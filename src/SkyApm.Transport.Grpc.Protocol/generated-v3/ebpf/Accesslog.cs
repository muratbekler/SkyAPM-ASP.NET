// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ebpf/accesslog.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Skywalking.V3 {

  /// <summary>Holder for reflection information generated from ebpf/accesslog.proto</summary>
  public static partial class AccesslogReflection {

    #region Descriptor
    /// <summary>File descriptor for ebpf/accesslog.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AccesslogReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChRlYnBmL2FjY2Vzc2xvZy5wcm90bxINc2t5d2Fsa2luZy52MxoTY29tbW9u",
            "L0NvbW1vbi5wcm90byL4AQoURUJQRkFjY2Vzc0xvZ01lc3NhZ2USNgoIbWV0",
            "YWRhdGEYASABKAsyJC5za3l3YWxraW5nLnYzLkVCUEZBY2Nlc3NMb2dNZXRh",
            "ZGF0YRI2Cgpjb25uZWN0aW9uGAIgASgLMiIuc2t5d2Fsa2luZy52My5BY2Nl",
            "c3NMb2dDb25uZWN0aW9uEjUKCmtlcm5lbExvZ3MYAyADKAsyIS5za3l3YWxr",
            "aW5nLnYzLkFjY2Vzc0xvZ0tlcm5lbExvZxI5Cgtwcm90b2NvbExvZxgEIAEo",
            "CzIkLnNreXdhbGtpbmcudjMuQWNjZXNzTG9nUHJvdG9jb2xMb2dzIn8KFUVC",
            "UEZBY2Nlc3NMb2dNZXRhZGF0YRIyCgRub2RlGAEgASgLMiQuc2t5d2Fsa2lu",
            "Zy52My5FQlBGQWNjZXNzTG9nTm9kZUluZm8SMgoGcG9saWN5GAIgASgLMiIu",
            "c2t5d2Fsa2luZy52My5FQlBGQWNjZXNzTG9nUG9saWN5IjAKE0VCUEZBY2Nl",
            "c3NMb2dQb2xpY3kSGQoRZXhjbHVkZU5hbWVzcGFjZXMYASADKAkiqQEKFUVC",
            "UEZBY2Nlc3NMb2dOb2RlSW5mbxIMCgRuYW1lGAEgASgJEkMKDW5ldEludGVy",
            "ZmFjZXMYAiADKAsyLC5za3l3YWxraW5nLnYzLkVCUEZBY2Nlc3NMb2dOb2Rl",
            "TmV0SW50ZXJmYWNlEigKCGJvb3RUaW1lGAMgASgLMhYuc2t5d2Fsa2luZy52",
            "My5JbnN0YW50EhMKC2NsdXN0ZXJOYW1lGAQgASgJIkkKHUVCUEZBY2Nlc3NM",
            "b2dOb2RlTmV0SW50ZXJmYWNlEg0KBWluZGV4GAEgASgFEgsKA210dRgCIAEo",
            "BRIMCgRuYW1lGAMgASgJIpYCChNBY2Nlc3NMb2dDb25uZWN0aW9uEi8KBWxv",
            "Y2FsGAEgASgLMiAuc2t5d2Fsa2luZy52My5Db25uZWN0aW9uQWRkcmVzcxIw",
            "CgZyZW1vdGUYAiABKAsyIC5za3l3YWxraW5nLnYzLkNvbm5lY3Rpb25BZGRy",
            "ZXNzEigKBHJvbGUYAyABKA4yGi5za3l3YWxraW5nLnYzLkRldGVjdFBvaW50",
            "EjoKB3Rsc01vZGUYBCABKA4yKS5za3l3YWxraW5nLnYzLkFjY2Vzc0xvZ0Nv",
            "bm5lY3Rpb25UTFNNb2RlEjYKCHByb3RvY29sGAUgASgOMiQuc2t5d2Fsa2lu",
            "Zy52My5BY2Nlc3NMb2dQcm90b2NvbFR5cGUihQEKEUNvbm5lY3Rpb25BZGRy",
            "ZXNzEj0KCmt1YmVybmV0ZXMYASABKAsyJy5za3l3YWxraW5nLnYzLkt1YmVy",
            "bmV0ZXNQcm9jZXNzQWRkcmVzc0gAEiYKAmlwGAIgASgLMhguc2t5d2Fsa2lu",
            "Zy52My5JUEFkZHJlc3NIAEIJCgdhZGRyZXNzInoKGEt1YmVybmV0ZXNQcm9j",
            "ZXNzQWRkcmVzcxITCgtzZXJ2aWNlTmFtZRgBIAEoCRIPCgdwb2ROYW1lGAIg",
            "ASgJEhUKDWNvbnRhaW5lck5hbWUYAyABKAkSEwoLcHJvY2Vzc05hbWUYBCAB",
            "KAkSDAoEcG9ydBgFIAEoBSInCglJUEFkZHJlc3MSDAoEaG9zdBgBIAEoCRIM",
            "CgRwb3J0GAIgASgFIuACChJBY2Nlc3NMb2dLZXJuZWxMb2cSQQoHY29ubmVj",
            "dBgBIAEoCzIuLnNreXdhbGtpbmcudjMuQWNjZXNzTG9nS2VybmVsQ29ubmVj",
            "dE9wZXJhdGlvbkgAEj8KBmFjY2VwdBgCIAEoCzItLnNreXdhbGtpbmcudjMu",
            "QWNjZXNzTG9nS2VybmVsQWNjZXB0T3BlcmF0aW9uSAASPQoFY2xvc2UYAyAB",
            "KAsyLC5za3l3YWxraW5nLnYzLkFjY2Vzc0xvZ0tlcm5lbENsb3NlT3BlcmF0",
            "aW9uSAASOwoEcmVhZBgEIAEoCzIrLnNreXdhbGtpbmcudjMuQWNjZXNzTG9n",
            "S2VybmVsUmVhZE9wZXJhdGlvbkgAEj0KBXdyaXRlGAUgASgLMiwuc2t5d2Fs",
            "a2luZy52My5BY2Nlc3NMb2dLZXJuZWxXcml0ZU9wZXJhdGlvbkgAQgsKCW9w",
            "ZXJhdGlvbiJZChVBY2Nlc3NMb2dQcm90b2NvbExvZ3MSNAoEaHR0cBgBIAEo",
            "CzIkLnNreXdhbGtpbmcudjMuQWNjZXNzTG9nSFRUUFByb3RvY29sSABCCgoI",
            "cHJvdG9jb2wiswIKFUFjY2Vzc0xvZ0hUVFBQcm90b2NvbBIvCglzdGFydFRp",
            "bWUYASABKAsyHC5za3l3YWxraW5nLnYzLkVCUEZUaW1lc3RhbXASLQoHZW5k",
            "VGltZRgCIAEoCzIcLnNreXdhbGtpbmcudjMuRUJQRlRpbWVzdGFtcBI8Cgd2",
            "ZXJzaW9uGAMgASgOMisuc2t5d2Fsa2luZy52My5BY2Nlc3NMb2dIVFRQUHJv",
            "dG9jb2xWZXJzaW9uEjwKB3JlcXVlc3QYBCABKAsyKy5za3l3YWxraW5nLnYz",
            "LkFjY2Vzc0xvZ0hUVFBQcm90b2NvbFJlcXVlc3QSPgoIcmVzcG9uc2UYBSAB",
            "KAsyLC5za3l3YWxraW5nLnYzLkFjY2Vzc0xvZ0hUVFBQcm90b2NvbFJlc3Bv",
            "bnNlItYBChxBY2Nlc3NMb2dIVFRQUHJvdG9jb2xSZXF1ZXN0EkEKBm1ldGhv",
            "ZBgBIAEoDjIxLnNreXdhbGtpbmcudjMuQWNjZXNzTG9nSFRUUFByb3RvY29s",
            "UmVxdWVzdE1ldGhvZBIMCgRwYXRoGAIgASgJEhoKEnNpemVPZkhlYWRlcnNC",
            "eXRlcxgDIAEoBBIXCg9zaXplT2ZCb2R5Qnl0ZXMYBCABKAQSMAoFdHJhY2UY",
            "BSABKAsyIS5za3l3YWxraW5nLnYzLkFjY2Vzc0xvZ1RyYWNlSW5mbyJoCh1B",
            "Y2Nlc3NMb2dIVFRQUHJvdG9jb2xSZXNwb25zZRISCgpzdGF0dXNDb2RlGAEg",
            "ASgFEhoKEnNpemVPZkhlYWRlcnNCeXRlcxgDIAEoBBIXCg9zaXplT2ZCb2R5",
            "Qnl0ZXMYBCABKAQiigEKEkFjY2Vzc0xvZ1RyYWNlSW5mbxI7Cghwcm92aWRl",
            "chgBIAEoDjIpLnNreXdhbGtpbmcudjMuQWNjZXNzTG9nVHJhY2VJbmZvUHJv",
            "dmlkZXISDwoHdHJhY2VJZBgCIAEoCRIWCg50cmFjZVNlZ21lbnRJZBgDIAEo",
            "CRIOCgZzcGFuSWQYBCABKAkikgEKH0FjY2Vzc0xvZ0tlcm5lbENvbm5lY3RP",
            "cGVyYXRpb24SLwoJc3RhcnRUaW1lGAEgASgLMhwuc2t5d2Fsa2luZy52My5F",
            "QlBGVGltZXN0YW1wEi0KB2VuZFRpbWUYAiABKAsyHC5za3l3YWxraW5nLnYz",
            "LkVCUEZUaW1lc3RhbXASDwoHc3VjY2VzcxgDIAEoCCKAAQoeQWNjZXNzTG9n",
            "S2VybmVsQWNjZXB0T3BlcmF0aW9uEi8KCXN0YXJ0VGltZRgBIAEoCzIcLnNr",
            "eXdhbGtpbmcudjMuRUJQRlRpbWVzdGFtcBItCgdlbmRUaW1lGAIgASgLMhwu",
            "c2t5d2Fsa2luZy52My5FQlBGVGltZXN0YW1wIpABCh1BY2Nlc3NMb2dLZXJu",
            "ZWxDbG9zZU9wZXJhdGlvbhIvCglzdGFydFRpbWUYASABKAsyHC5za3l3YWxr",
            "aW5nLnYzLkVCUEZUaW1lc3RhbXASLQoHZW5kVGltZRgCIAEoCzIcLnNreXdh",
            "bGtpbmcudjMuRUJQRlRpbWVzdGFtcBIPCgdzdWNjZXNzGAMgASgIIv8CCh1B",
            "Y2Nlc3NMb2dLZXJuZWxXcml0ZU9wZXJhdGlvbhIvCglzdGFydFRpbWUYASAB",
            "KAsyHC5za3l3YWxraW5nLnYzLkVCUEZUaW1lc3RhbXASLQoHZW5kVGltZRgC",
            "IAEoCzIcLnNreXdhbGtpbmcudjMuRUJQRlRpbWVzdGFtcBI7CgdzeXNjYWxs",
            "GAMgASgOMiouc2t5d2Fsa2luZy52My5BY2Nlc3NMb2dLZXJuZWxXcml0ZVN5",
            "c2NhbGwSPwoJbDRNZXRyaWNzGAQgASgLMiwuc2t5d2Fsa2luZy52My5BY2Nl",
            "c3NMb2dLZXJuZWxXcml0ZUw0TWV0cmljcxI/CglsM01ldHJpY3MYBSABKAsy",
            "LC5za3l3YWxraW5nLnYzLkFjY2Vzc0xvZ0tlcm5lbFdyaXRlTDNNZXRyaWNz",
            "Ej8KCWwyTWV0cmljcxgGIAEoCzIsLnNreXdhbGtpbmcudjMuQWNjZXNzTG9n",
            "S2VybmVsV3JpdGVMMk1ldHJpY3Mi4AEKHUFjY2Vzc0xvZ0tlcm5lbFdyaXRl",
            "TDRNZXRyaWNzEhUKDXRvdGFsRHVyYXRpb24YASABKAQSIQoZdG90YWxUcmFu",
            "c21pdFBhY2thZ2VDb3VudBgCIAEoAxIjCht0b3RhbFJldHJhbnNtaXRQYWNr",
            "YWdlQ291bnQYAyABKAMSRgoSbG9zc1BhY2thZ2VNZXRyaWNzGAQgAygLMiou",
            "c2t5d2Fsa2luZy52My5BY2Nlc3NMb2dMb3NzUGFja2FnZU1ldHJpY3MSGAoQ",
            "dG90YWxQYWNrYWdlU2l6ZRgFIAEoAyI+ChtBY2Nlc3NMb2dMb3NzUGFja2Fn",
            "ZU1ldHJpY3MSEAoIbG9jYXRpb24YASABKAkSDQoFY291bnQYAiABKAUi6wEK",
            "HUFjY2Vzc0xvZ0tlcm5lbFdyaXRlTDNNZXRyaWNzEhUKDXRvdGFsRHVyYXRp",
            "b24YASABKAQSGgoSdG90YWxMb2NhbER1cmF0aW9uGAIgASgEEhsKE3RvdGFs",
            "T3V0cHV0RHVyYXRpb24YAyABKAQSHAoUdG90YWxSZXNvbHZlTUFDQ291bnQY",
            "BSABKAQSHwoXdG90YWxSZXNvbHZlTUFDRHVyYXRpb24YBiABKAQSGwoTdG90",
            "YWxOZXRGaWx0ZXJDb3VudBgHIAEoBBIeChZ0b3RhbE5ldEZpbHRlckR1cmF0",
            "aW9uGAggASgEIq8BCh1BY2Nlc3NMb2dLZXJuZWxXcml0ZUwyTWV0cmljcxIV",
            "Cg10b3RhbER1cmF0aW9uGAEgASgEEg8KB2lmaW5kZXgYAiABKA0SIgoadG90",
            "YWxFbnRlclF1ZXVlQnVmZmVyQ291bnQYAyABKAQSHgoWdG90YWxSZWFkeVNl",
            "bmREdXJhdGlvbhgEIAEoBBIiChp0b3RhbE5ldERldmljZVNlbmREdXJhdGlv",
            "bhgFIAEoBCL6AgocQWNjZXNzTG9nS2VybmVsUmVhZE9wZXJhdGlvbhIvCglz",
            "dGFydFRpbWUYASABKAsyHC5za3l3YWxraW5nLnYzLkVCUEZUaW1lc3RhbXAS",
            "LQoHZW5kVGltZRgCIAEoCzIcLnNreXdhbGtpbmcudjMuRUJQRlRpbWVzdGFt",
            "cBI6CgdzeXNjYWxsGAMgASgOMikuc2t5d2Fsa2luZy52My5BY2Nlc3NMb2dL",
            "ZXJuZWxSZWFkU3lzY2FsbBI+CglsMk1ldHJpY3MYBCABKAsyKy5za3l3YWxr",
            "aW5nLnYzLkFjY2Vzc0xvZ0tlcm5lbFJlYWRMMk1ldHJpY3MSPgoJbDNNZXRy",
            "aWNzGAUgASgLMisuc2t5d2Fsa2luZy52My5BY2Nlc3NMb2dLZXJuZWxSZWFk",
            "TDNNZXRyaWNzEj4KCWw0TWV0cmljcxgGIAEoCzIrLnNreXdhbGtpbmcudjMu",
            "QWNjZXNzTG9nS2VybmVsUmVhZEw0TWV0cmljcyKzAQocQWNjZXNzTG9nS2Vy",
            "bmVsUmVhZEwyTWV0cmljcxIPCgdpZmluZGV4GAEgASgNEhkKEXRvdGFsUGFj",
            "a2FnZUNvdW50GAIgASgNEhgKEHRvdGFsUGFja2FnZVNpemUYAyABKAQSIwob",
            "dG90YWxQYWNrYWdlVG9RdWV1ZUR1cmF0aW9uGAQgASgEEigKIHRvdGFsUmN2",
            "UGFja2FnZUZyb21RdWV1ZUR1cmF0aW9uGAUgASgEIqkBChxBY2Nlc3NMb2dL",
            "ZXJuZWxSZWFkTDNNZXRyaWNzEhUKDXRvdGFsRHVyYXRpb24YASABKAQSGQoR",
            "dG90YWxSZWN2RHVyYXRpb24YAiABKAQSGgoSdG90YWxMb2NhbER1cmF0aW9u",
            "GAMgASgEEhsKE3RvdGFsTmV0RmlsdGVyQ291bnQYBCABKAQSHgoWdG90YWxO",
            "ZXRGaWx0ZXJEdXJhdGlvbhgFIAEoBCI1ChxBY2Nlc3NMb2dLZXJuZWxSZWFk",
            "TDRNZXRyaWNzEhUKDXRvdGFsRHVyYXRpb24YASABKAQiUgoNRUJQRlRpbWVz",
            "dGFtcBI0CgZvZmZzZXQYASABKAsyIi5za3l3YWxraW5nLnYzLkVCUEZPZmZz",
            "ZXRUaW1lc3RhbXBIAEILCgl0aW1lc3RhbXAiJQoTRUJQRk9mZnNldFRpbWVz",
            "dGFtcBIOCgZvZmZzZXQYASABKAQiGQoXRUJQRkFjY2Vzc0xvZ0Rvd25zdHJl",
            "YW0qMAoaQWNjZXNzTG9nQ29ubmVjdGlvblRMU01vZGUSCQoFUGxhaW4QABIH",
            "CgNUTFMQASo0ChxBY2Nlc3NMb2dIVFRQUHJvdG9jb2xWZXJzaW9uEgkKBUhU",
            "VFAxEAASCQoFSFRUUDIQASo4ChpBY2Nlc3NMb2dUcmFjZUluZm9Qcm92aWRl",
            "chIKCgZaaXBraW4QABIOCgpTa3lXYWxraW5nEAEqhgEKIkFjY2Vzc0xvZ0hU",
            "VFBQcm90b2NvbFJlcXVlc3RNZXRob2QSBwoDR2V0EAASCAoEUG9zdBABEgcK",
            "A1B1dBACEgoKBkRlbGV0ZRADEggKBEhlYWQQBBIJCgVQYXRjaBAFEgsKB09w",
            "dGlvbnMQBhIJCgVUcmFjZRAHEgsKB0Nvbm5lY3QQCCqDAQobQWNjZXNzTG9n",
            "S2VybmVsV3JpdGVTeXNjYWxsEgkKBVdyaXRlEAASCgoGV3JpdGV2EAESCAoE",
            "U2VuZBACEgoKBlNlbmRUbxADEgsKB1NlbmRNc2cQBBIMCghTZW5kTW1zZxAF",
            "EgwKCFNlbmRGaWxlEAYSDgoKU2VuZEZpbGU2NBAHKmQKGkFjY2Vzc0xvZ0tl",
            "cm5lbFJlYWRTeXNjYWxsEggKBFJlYWQQABIJCgVSZWFkdhABEggKBFJlY3YQ",
            "AhIMCghSZWN2RnJvbRADEgsKB1JlY3ZNc2cQBBIMCghSZWN2TW1zZxAFKjgK",
            "FUFjY2Vzc0xvZ1Byb3RvY29sVHlwZRIHCgNUQ1AQABIKCgZIVFRQXzEQARIK",
            "CgZIVFRQXzIQAjJyChRFQlBGQWNjZXNzTG9nU2VydmljZRJaCgdjb2xsZWN0",
            "EiMuc2t5d2Fsa2luZy52My5FQlBGQWNjZXNzTG9nTWVzc2FnZRomLnNreXdh",
            "bGtpbmcudjMuRUJQRkFjY2Vzc0xvZ0Rvd25zdHJlYW0iACgBQnMKM29yZy5h",
            "cGFjaGUuc2t5d2Fsa2luZy5hcG0ubmV0d29yay5lYnBmLmFjY2Vzc2xvZy52",
            "M1ABWjpza3l3YWxraW5nLmFwYWNoZS5vcmcvcmVwby9nb2FwaS9jb2xsZWN0",
            "L2VicGYvYWNjZXNzbG9nL3YzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Skywalking.V3.AccessLogConnectionTLSMode), typeof(global::Skywalking.V3.AccessLogHTTPProtocolVersion), typeof(global::Skywalking.V3.AccessLogTraceInfoProvider), typeof(global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod), typeof(global::Skywalking.V3.AccessLogKernelWriteSyscall), typeof(global::Skywalking.V3.AccessLogKernelReadSyscall), typeof(global::Skywalking.V3.AccessLogProtocolType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogMessage), global::Skywalking.V3.EBPFAccessLogMessage.Parser, new[]{ "Metadata", "Connection", "KernelLogs", "ProtocolLog" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogMetadata), global::Skywalking.V3.EBPFAccessLogMetadata.Parser, new[]{ "Node", "Policy" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogPolicy), global::Skywalking.V3.EBPFAccessLogPolicy.Parser, new[]{ "ExcludeNamespaces" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogNodeInfo), global::Skywalking.V3.EBPFAccessLogNodeInfo.Parser, new[]{ "Name", "NetInterfaces", "BootTime", "ClusterName" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogNodeNetInterface), global::Skywalking.V3.EBPFAccessLogNodeNetInterface.Parser, new[]{ "Index", "Mtu", "Name" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogConnection), global::Skywalking.V3.AccessLogConnection.Parser, new[]{ "Local", "Remote", "Role", "TlsMode", "Protocol" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ConnectionAddress), global::Skywalking.V3.ConnectionAddress.Parser, new[]{ "Kubernetes", "Ip" }, new[]{ "Address" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.KubernetesProcessAddress), global::Skywalking.V3.KubernetesProcessAddress.Parser, new[]{ "ServiceName", "PodName", "ContainerName", "ProcessName", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.IPAddress), global::Skywalking.V3.IPAddress.Parser, new[]{ "Host", "Port" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelLog), global::Skywalking.V3.AccessLogKernelLog.Parser, new[]{ "Connect", "Accept", "Close", "Read", "Write" }, new[]{ "Operation" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogProtocolLogs), global::Skywalking.V3.AccessLogProtocolLogs.Parser, new[]{ "Http" }, new[]{ "Protocol" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogHTTPProtocol), global::Skywalking.V3.AccessLogHTTPProtocol.Parser, new[]{ "StartTime", "EndTime", "Version", "Request", "Response" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogHTTPProtocolRequest), global::Skywalking.V3.AccessLogHTTPProtocolRequest.Parser, new[]{ "Method", "Path", "SizeOfHeadersBytes", "SizeOfBodyBytes", "Trace" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogHTTPProtocolResponse), global::Skywalking.V3.AccessLogHTTPProtocolResponse.Parser, new[]{ "StatusCode", "SizeOfHeadersBytes", "SizeOfBodyBytes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogTraceInfo), global::Skywalking.V3.AccessLogTraceInfo.Parser, new[]{ "Provider", "TraceId", "TraceSegmentId", "SpanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelConnectOperation), global::Skywalking.V3.AccessLogKernelConnectOperation.Parser, new[]{ "StartTime", "EndTime", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelAcceptOperation), global::Skywalking.V3.AccessLogKernelAcceptOperation.Parser, new[]{ "StartTime", "EndTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelCloseOperation), global::Skywalking.V3.AccessLogKernelCloseOperation.Parser, new[]{ "StartTime", "EndTime", "Success" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelWriteOperation), global::Skywalking.V3.AccessLogKernelWriteOperation.Parser, new[]{ "StartTime", "EndTime", "Syscall", "L4Metrics", "L3Metrics", "L2Metrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelWriteL4Metrics), global::Skywalking.V3.AccessLogKernelWriteL4Metrics.Parser, new[]{ "TotalDuration", "TotalTransmitPackageCount", "TotalRetransmitPackageCount", "LossPackageMetrics", "TotalPackageSize" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogLossPackageMetrics), global::Skywalking.V3.AccessLogLossPackageMetrics.Parser, new[]{ "Location", "Count" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelWriteL3Metrics), global::Skywalking.V3.AccessLogKernelWriteL3Metrics.Parser, new[]{ "TotalDuration", "TotalLocalDuration", "TotalOutputDuration", "TotalResolveMACCount", "TotalResolveMACDuration", "TotalNetFilterCount", "TotalNetFilterDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelWriteL2Metrics), global::Skywalking.V3.AccessLogKernelWriteL2Metrics.Parser, new[]{ "TotalDuration", "Ifindex", "TotalEnterQueueBufferCount", "TotalReadySendDuration", "TotalNetDeviceSendDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelReadOperation), global::Skywalking.V3.AccessLogKernelReadOperation.Parser, new[]{ "StartTime", "EndTime", "Syscall", "L2Metrics", "L3Metrics", "L4Metrics" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelReadL2Metrics), global::Skywalking.V3.AccessLogKernelReadL2Metrics.Parser, new[]{ "Ifindex", "TotalPackageCount", "TotalPackageSize", "TotalPackageToQueueDuration", "TotalRcvPackageFromQueueDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelReadL3Metrics), global::Skywalking.V3.AccessLogKernelReadL3Metrics.Parser, new[]{ "TotalDuration", "TotalRecvDuration", "TotalLocalDuration", "TotalNetFilterCount", "TotalNetFilterDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.AccessLogKernelReadL4Metrics), global::Skywalking.V3.AccessLogKernelReadL4Metrics.Parser, new[]{ "TotalDuration" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFTimestamp), global::Skywalking.V3.EBPFTimestamp.Parser, new[]{ "Offset" }, new[]{ "Timestamp" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFOffsetTimestamp), global::Skywalking.V3.EBPFOffsetTimestamp.Parser, new[]{ "Offset" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFAccessLogDownstream), global::Skywalking.V3.EBPFAccessLogDownstream.Parser, null, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum AccessLogConnectionTLSMode {
    [pbr::OriginalName("Plain")] Plain = 0,
    [pbr::OriginalName("TLS")] Tls = 1,
  }

  public enum AccessLogHTTPProtocolVersion {
    [pbr::OriginalName("HTTP1")] Http1 = 0,
    [pbr::OriginalName("HTTP2")] Http2 = 1,
  }

  public enum AccessLogTraceInfoProvider {
    [pbr::OriginalName("Zipkin")] Zipkin = 0,
    [pbr::OriginalName("SkyWalking")] SkyWalking = 1,
  }

  public enum AccessLogHTTPProtocolRequestMethod {
    [pbr::OriginalName("Get")] Get = 0,
    [pbr::OriginalName("Post")] Post = 1,
    [pbr::OriginalName("Put")] Put = 2,
    [pbr::OriginalName("Delete")] Delete = 3,
    [pbr::OriginalName("Head")] Head = 4,
    [pbr::OriginalName("Patch")] Patch = 5,
    [pbr::OriginalName("Options")] Options = 6,
    [pbr::OriginalName("Trace")] Trace = 7,
    [pbr::OriginalName("Connect")] Connect = 8,
  }

  public enum AccessLogKernelWriteSyscall {
    [pbr::OriginalName("Write")] Write = 0,
    [pbr::OriginalName("Writev")] Writev = 1,
    [pbr::OriginalName("Send")] Send = 2,
    [pbr::OriginalName("SendTo")] SendTo = 3,
    [pbr::OriginalName("SendMsg")] SendMsg = 4,
    [pbr::OriginalName("SendMmsg")] SendMmsg = 5,
    [pbr::OriginalName("SendFile")] SendFile = 6,
    [pbr::OriginalName("SendFile64")] SendFile64 = 7,
  }

  public enum AccessLogKernelReadSyscall {
    [pbr::OriginalName("Read")] Read = 0,
    [pbr::OriginalName("Readv")] Readv = 1,
    [pbr::OriginalName("Recv")] Recv = 2,
    [pbr::OriginalName("RecvFrom")] RecvFrom = 3,
    [pbr::OriginalName("RecvMsg")] RecvMsg = 4,
    [pbr::OriginalName("RecvMmsg")] RecvMmsg = 5,
  }

  public enum AccessLogProtocolType {
    [pbr::OriginalName("TCP")] Tcp = 0,
    [pbr::OriginalName("HTTP_1")] Http1 = 1,
    [pbr::OriginalName("HTTP_2")] Http2 = 2,
  }

  #endregion

  #region Messages
  public sealed partial class EBPFAccessLogMessage : pb::IMessage<EBPFAccessLogMessage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogMessage> _parser = new pb::MessageParser<EBPFAccessLogMessage>(() => new EBPFAccessLogMessage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogMessage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMessage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMessage(EBPFAccessLogMessage other) : this() {
      metadata_ = other.metadata_ != null ? other.metadata_.Clone() : null;
      connection_ = other.connection_ != null ? other.connection_.Clone() : null;
      kernelLogs_ = other.kernelLogs_.Clone();
      protocolLog_ = other.protocolLog_ != null ? other.protocolLog_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMessage Clone() {
      return new EBPFAccessLogMessage(this);
    }

    /// <summary>Field number for the "metadata" field.</summary>
    public const int MetadataFieldNumber = 1;
    private global::Skywalking.V3.EBPFAccessLogMetadata metadata_;
    /// <summary>
    /// metadata of access log, only not null when first message
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFAccessLogMetadata Metadata {
      get { return metadata_; }
      set {
        metadata_ = value;
      }
    }

    /// <summary>Field number for the "connection" field.</summary>
    public const int ConnectionFieldNumber = 2;
    private global::Skywalking.V3.AccessLogConnection connection_;
    /// <summary>
    /// local process and remote process connection information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogConnection Connection {
      get { return connection_; }
      set {
        connection_ = value;
      }
    }

    /// <summary>Field number for the "kernelLogs" field.</summary>
    public const int KernelLogsFieldNumber = 3;
    private static readonly pb::FieldCodec<global::Skywalking.V3.AccessLogKernelLog> _repeated_kernelLogs_codec
        = pb::FieldCodec.ForMessage(26, global::Skywalking.V3.AccessLogKernelLog.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.AccessLogKernelLog> kernelLogs_ = new pbc::RepeatedField<global::Skywalking.V3.AccessLogKernelLog>();
    /// <summary>
    /// kernel level metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.AccessLogKernelLog> KernelLogs {
      get { return kernelLogs_; }
    }

    /// <summary>Field number for the "protocolLog" field.</summary>
    public const int ProtocolLogFieldNumber = 4;
    private global::Skywalking.V3.AccessLogProtocolLogs protocolLog_;
    /// <summary>
    /// application protocol log
    /// if the protocol is detected, the kernel logs is works the related logs
    /// otherwise, the kernel log is not related and is sent periodically
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogProtocolLogs ProtocolLog {
      get { return protocolLog_; }
      set {
        protocolLog_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogMessage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogMessage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Metadata, other.Metadata)) return false;
      if (!object.Equals(Connection, other.Connection)) return false;
      if(!kernelLogs_.Equals(other.kernelLogs_)) return false;
      if (!object.Equals(ProtocolLog, other.ProtocolLog)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadata_ != null) hash ^= Metadata.GetHashCode();
      if (connection_ != null) hash ^= Connection.GetHashCode();
      hash ^= kernelLogs_.GetHashCode();
      if (protocolLog_ != null) hash ^= ProtocolLog.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (connection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Connection);
      }
      kernelLogs_.WriteTo(output, _repeated_kernelLogs_codec);
      if (protocolLog_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ProtocolLog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Metadata);
      }
      if (connection_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Connection);
      }
      kernelLogs_.WriteTo(ref output, _repeated_kernelLogs_codec);
      if (protocolLog_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(ProtocolLog);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Metadata);
      }
      if (connection_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connection);
      }
      size += kernelLogs_.CalculateSize(_repeated_kernelLogs_codec);
      if (protocolLog_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProtocolLog);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogMessage other) {
      if (other == null) {
        return;
      }
      if (other.metadata_ != null) {
        if (metadata_ == null) {
          Metadata = new global::Skywalking.V3.EBPFAccessLogMetadata();
        }
        Metadata.MergeFrom(other.Metadata);
      }
      if (other.connection_ != null) {
        if (connection_ == null) {
          Connection = new global::Skywalking.V3.AccessLogConnection();
        }
        Connection.MergeFrom(other.Connection);
      }
      kernelLogs_.Add(other.kernelLogs_);
      if (other.protocolLog_ != null) {
        if (protocolLog_ == null) {
          ProtocolLog = new global::Skywalking.V3.AccessLogProtocolLogs();
        }
        ProtocolLog.MergeFrom(other.ProtocolLog);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::Skywalking.V3.EBPFAccessLogMetadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (connection_ == null) {
              Connection = new global::Skywalking.V3.AccessLogConnection();
            }
            input.ReadMessage(Connection);
            break;
          }
          case 26: {
            kernelLogs_.AddEntriesFrom(input, _repeated_kernelLogs_codec);
            break;
          }
          case 34: {
            if (protocolLog_ == null) {
              ProtocolLog = new global::Skywalking.V3.AccessLogProtocolLogs();
            }
            input.ReadMessage(ProtocolLog);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (metadata_ == null) {
              Metadata = new global::Skywalking.V3.EBPFAccessLogMetadata();
            }
            input.ReadMessage(Metadata);
            break;
          }
          case 18: {
            if (connection_ == null) {
              Connection = new global::Skywalking.V3.AccessLogConnection();
            }
            input.ReadMessage(Connection);
            break;
          }
          case 26: {
            kernelLogs_.AddEntriesFrom(ref input, _repeated_kernelLogs_codec);
            break;
          }
          case 34: {
            if (protocolLog_ == null) {
              ProtocolLog = new global::Skywalking.V3.AccessLogProtocolLogs();
            }
            input.ReadMessage(ProtocolLog);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFAccessLogMetadata : pb::IMessage<EBPFAccessLogMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogMetadata> _parser = new pb::MessageParser<EBPFAccessLogMetadata>(() => new EBPFAccessLogMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMetadata(EBPFAccessLogMetadata other) : this() {
      node_ = other.node_ != null ? other.node_.Clone() : null;
      policy_ = other.policy_ != null ? other.policy_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogMetadata Clone() {
      return new EBPFAccessLogMetadata(this);
    }

    /// <summary>Field number for the "node" field.</summary>
    public const int NodeFieldNumber = 1;
    private global::Skywalking.V3.EBPFAccessLogNodeInfo node_;
    /// <summary>
    /// current node information
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFAccessLogNodeInfo Node {
      get { return node_; }
      set {
        node_ = value;
      }
    }

    /// <summary>Field number for the "policy" field.</summary>
    public const int PolicyFieldNumber = 2;
    private global::Skywalking.V3.EBPFAccessLogPolicy policy_;
    /// <summary>
    /// policy for access logs
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFAccessLogPolicy Policy {
      get { return policy_; }
      set {
        policy_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Node, other.Node)) return false;
      if (!object.Equals(Policy, other.Policy)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (node_ != null) hash ^= Node.GetHashCode();
      if (policy_ != null) hash ^= Policy.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (policy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Policy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (node_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Node);
      }
      if (policy_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Policy);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (node_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Node);
      }
      if (policy_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Policy);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogMetadata other) {
      if (other == null) {
        return;
      }
      if (other.node_ != null) {
        if (node_ == null) {
          Node = new global::Skywalking.V3.EBPFAccessLogNodeInfo();
        }
        Node.MergeFrom(other.Node);
      }
      if (other.policy_ != null) {
        if (policy_ == null) {
          Policy = new global::Skywalking.V3.EBPFAccessLogPolicy();
        }
        Policy.MergeFrom(other.Policy);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Skywalking.V3.EBPFAccessLogNodeInfo();
            }
            input.ReadMessage(Node);
            break;
          }
          case 18: {
            if (policy_ == null) {
              Policy = new global::Skywalking.V3.EBPFAccessLogPolicy();
            }
            input.ReadMessage(Policy);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (node_ == null) {
              Node = new global::Skywalking.V3.EBPFAccessLogNodeInfo();
            }
            input.ReadMessage(Node);
            break;
          }
          case 18: {
            if (policy_ == null) {
              Policy = new global::Skywalking.V3.EBPFAccessLogPolicy();
            }
            input.ReadMessage(Policy);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFAccessLogPolicy : pb::IMessage<EBPFAccessLogPolicy>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogPolicy> _parser = new pb::MessageParser<EBPFAccessLogPolicy>(() => new EBPFAccessLogPolicy());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogPolicy> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogPolicy() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogPolicy(EBPFAccessLogPolicy other) : this() {
      excludeNamespaces_ = other.excludeNamespaces_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogPolicy Clone() {
      return new EBPFAccessLogPolicy(this);
    }

    /// <summary>Field number for the "excludeNamespaces" field.</summary>
    public const int ExcludeNamespacesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_excludeNamespaces_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> excludeNamespaces_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// which namespaces should be excluded to generate the connection
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> ExcludeNamespaces {
      get { return excludeNamespaces_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogPolicy);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogPolicy other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!excludeNamespaces_.Equals(other.excludeNamespaces_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= excludeNamespaces_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      excludeNamespaces_.WriteTo(output, _repeated_excludeNamespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      excludeNamespaces_.WriteTo(ref output, _repeated_excludeNamespaces_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += excludeNamespaces_.CalculateSize(_repeated_excludeNamespaces_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogPolicy other) {
      if (other == null) {
        return;
      }
      excludeNamespaces_.Add(other.excludeNamespaces_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            excludeNamespaces_.AddEntriesFrom(input, _repeated_excludeNamespaces_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            excludeNamespaces_.AddEntriesFrom(ref input, _repeated_excludeNamespaces_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFAccessLogNodeInfo : pb::IMessage<EBPFAccessLogNodeInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogNodeInfo> _parser = new pb::MessageParser<EBPFAccessLogNodeInfo>(() => new EBPFAccessLogNodeInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogNodeInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeInfo(EBPFAccessLogNodeInfo other) : this() {
      name_ = other.name_;
      netInterfaces_ = other.netInterfaces_.Clone();
      bootTime_ = other.bootTime_ != null ? other.bootTime_.Clone() : null;
      clusterName_ = other.clusterName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeInfo Clone() {
      return new EBPFAccessLogNodeInfo(this);
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 1;
    private string name_ = "";
    /// <summary>
    /// Node name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "netInterfaces" field.</summary>
    public const int NetInterfacesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFAccessLogNodeNetInterface> _repeated_netInterfaces_codec
        = pb::FieldCodec.ForMessage(18, global::Skywalking.V3.EBPFAccessLogNodeNetInterface.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFAccessLogNodeNetInterface> netInterfaces_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFAccessLogNodeNetInterface>();
    /// <summary>
    /// All net interfaces list
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFAccessLogNodeNetInterface> NetInterfaces {
      get { return netInterfaces_; }
    }

    /// <summary>Field number for the "bootTime" field.</summary>
    public const int BootTimeFieldNumber = 3;
    private global::SkyWalking.NetworkProtocol.V3.Instant bootTime_;
    /// <summary>
    /// System boot time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.Instant BootTime {
      get { return bootTime_; }
      set {
        bootTime_ = value;
      }
    }

    /// <summary>Field number for the "clusterName" field.</summary>
    public const int ClusterNameFieldNumber = 4;
    private string clusterName_ = "";
    /// <summary>
    /// Cluster name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ClusterName {
      get { return clusterName_; }
      set {
        clusterName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogNodeInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogNodeInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Name != other.Name) return false;
      if(!netInterfaces_.Equals(other.netInterfaces_)) return false;
      if (!object.Equals(BootTime, other.BootTime)) return false;
      if (ClusterName != other.ClusterName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      hash ^= netInterfaces_.GetHashCode();
      if (bootTime_ != null) hash ^= BootTime.GetHashCode();
      if (ClusterName.Length != 0) hash ^= ClusterName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      netInterfaces_.WriteTo(output, _repeated_netInterfaces_codec);
      if (bootTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BootTime);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClusterName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      netInterfaces_.WriteTo(ref output, _repeated_netInterfaces_codec);
      if (bootTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(BootTime);
      }
      if (ClusterName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ClusterName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      size += netInterfaces_.CalculateSize(_repeated_netInterfaces_codec);
      if (bootTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(BootTime);
      }
      if (ClusterName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ClusterName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogNodeInfo other) {
      if (other == null) {
        return;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      netInterfaces_.Add(other.netInterfaces_);
      if (other.bootTime_ != null) {
        if (bootTime_ == null) {
          BootTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
        }
        BootTime.MergeFrom(other.BootTime);
      }
      if (other.ClusterName.Length != 0) {
        ClusterName = other.ClusterName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            netInterfaces_.AddEntriesFrom(input, _repeated_netInterfaces_codec);
            break;
          }
          case 26: {
            if (bootTime_ == null) {
              BootTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(BootTime);
            break;
          }
          case 34: {
            ClusterName = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            netInterfaces_.AddEntriesFrom(ref input, _repeated_netInterfaces_codec);
            break;
          }
          case 26: {
            if (bootTime_ == null) {
              BootTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(BootTime);
            break;
          }
          case 34: {
            ClusterName = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFAccessLogNodeNetInterface : pb::IMessage<EBPFAccessLogNodeNetInterface>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogNodeNetInterface> _parser = new pb::MessageParser<EBPFAccessLogNodeNetInterface>(() => new EBPFAccessLogNodeNetInterface());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogNodeNetInterface> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeNetInterface() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeNetInterface(EBPFAccessLogNodeNetInterface other) : this() {
      index_ = other.index_;
      mtu_ = other.mtu_;
      name_ = other.name_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogNodeNetInterface Clone() {
      return new EBPFAccessLogNodeNetInterface(this);
    }

    /// <summary>Field number for the "index" field.</summary>
    public const int IndexFieldNumber = 1;
    private int index_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Index {
      get { return index_; }
      set {
        index_ = value;
      }
    }

    /// <summary>Field number for the "mtu" field.</summary>
    public const int MtuFieldNumber = 2;
    private int mtu_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Mtu {
      get { return mtu_; }
      set {
        mtu_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogNodeNetInterface);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogNodeNetInterface other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Index != other.Index) return false;
      if (Mtu != other.Mtu) return false;
      if (Name != other.Name) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Index != 0) hash ^= Index.GetHashCode();
      if (Mtu != 0) hash ^= Mtu.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Mtu != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mtu);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Index != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Index);
      }
      if (Mtu != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Mtu);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Index != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Index);
      }
      if (Mtu != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Mtu);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogNodeNetInterface other) {
      if (other == null) {
        return;
      }
      if (other.Index != 0) {
        Index = other.Index;
      }
      if (other.Mtu != 0) {
        Mtu = other.Mtu;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Mtu = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Index = input.ReadInt32();
            break;
          }
          case 16: {
            Mtu = input.ReadInt32();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Connection information
  /// </summary>
  public sealed partial class AccessLogConnection : pb::IMessage<AccessLogConnection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogConnection> _parser = new pb::MessageParser<AccessLogConnection>(() => new AccessLogConnection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogConnection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogConnection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogConnection(AccessLogConnection other) : this() {
      local_ = other.local_ != null ? other.local_.Clone() : null;
      remote_ = other.remote_ != null ? other.remote_.Clone() : null;
      role_ = other.role_;
      tlsMode_ = other.tlsMode_;
      protocol_ = other.protocol_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogConnection Clone() {
      return new AccessLogConnection(this);
    }

    /// <summary>Field number for the "local" field.</summary>
    public const int LocalFieldNumber = 1;
    private global::Skywalking.V3.ConnectionAddress local_;
    /// <summary>
    /// local address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ConnectionAddress Local {
      get { return local_; }
      set {
        local_ = value;
      }
    }

    /// <summary>Field number for the "remote" field.</summary>
    public const int RemoteFieldNumber = 2;
    private global::Skywalking.V3.ConnectionAddress remote_;
    /// <summary>
    /// remote/peer address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ConnectionAddress Remote {
      get { return remote_; }
      set {
        remote_ = value;
      }
    }

    /// <summary>Field number for the "role" field.</summary>
    public const int RoleFieldNumber = 3;
    private global::SkyWalking.NetworkProtocol.V3.DetectPoint role_ = global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client;
    /// <summary>
    /// local address detect point
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.DetectPoint Role {
      get { return role_; }
      set {
        role_ = value;
      }
    }

    /// <summary>Field number for the "tlsMode" field.</summary>
    public const int TlsModeFieldNumber = 4;
    private global::Skywalking.V3.AccessLogConnectionTLSMode tlsMode_ = global::Skywalking.V3.AccessLogConnectionTLSMode.Plain;
    /// <summary>
    /// is the connection using TLS or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogConnectionTLSMode TlsMode {
      get { return tlsMode_; }
      set {
        tlsMode_ = value;
      }
    }

    /// <summary>Field number for the "protocol" field.</summary>
    public const int ProtocolFieldNumber = 5;
    private global::Skywalking.V3.AccessLogProtocolType protocol_ = global::Skywalking.V3.AccessLogProtocolType.Tcp;
    /// <summary>
    /// application protocol type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogProtocolType Protocol {
      get { return protocol_; }
      set {
        protocol_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogConnection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogConnection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Local, other.Local)) return false;
      if (!object.Equals(Remote, other.Remote)) return false;
      if (Role != other.Role) return false;
      if (TlsMode != other.TlsMode) return false;
      if (Protocol != other.Protocol) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (local_ != null) hash ^= Local.GetHashCode();
      if (remote_ != null) hash ^= Remote.GetHashCode();
      if (Role != global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client) hash ^= Role.GetHashCode();
      if (TlsMode != global::Skywalking.V3.AccessLogConnectionTLSMode.Plain) hash ^= TlsMode.GetHashCode();
      if (Protocol != global::Skywalking.V3.AccessLogProtocolType.Tcp) hash ^= Protocol.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (local_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Local);
      }
      if (remote_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Remote);
      }
      if (Role != global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Role);
      }
      if (TlsMode != global::Skywalking.V3.AccessLogConnectionTLSMode.Plain) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TlsMode);
      }
      if (Protocol != global::Skywalking.V3.AccessLogProtocolType.Tcp) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Protocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (local_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Local);
      }
      if (remote_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Remote);
      }
      if (Role != global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Role);
      }
      if (TlsMode != global::Skywalking.V3.AccessLogConnectionTLSMode.Plain) {
        output.WriteRawTag(32);
        output.WriteEnum((int) TlsMode);
      }
      if (Protocol != global::Skywalking.V3.AccessLogProtocolType.Tcp) {
        output.WriteRawTag(40);
        output.WriteEnum((int) Protocol);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (local_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Local);
      }
      if (remote_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remote);
      }
      if (Role != global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Role);
      }
      if (TlsMode != global::Skywalking.V3.AccessLogConnectionTLSMode.Plain) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TlsMode);
      }
      if (Protocol != global::Skywalking.V3.AccessLogProtocolType.Tcp) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Protocol);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogConnection other) {
      if (other == null) {
        return;
      }
      if (other.local_ != null) {
        if (local_ == null) {
          Local = new global::Skywalking.V3.ConnectionAddress();
        }
        Local.MergeFrom(other.Local);
      }
      if (other.remote_ != null) {
        if (remote_ == null) {
          Remote = new global::Skywalking.V3.ConnectionAddress();
        }
        Remote.MergeFrom(other.Remote);
      }
      if (other.Role != global::SkyWalking.NetworkProtocol.V3.DetectPoint.Client) {
        Role = other.Role;
      }
      if (other.TlsMode != global::Skywalking.V3.AccessLogConnectionTLSMode.Plain) {
        TlsMode = other.TlsMode;
      }
      if (other.Protocol != global::Skywalking.V3.AccessLogProtocolType.Tcp) {
        Protocol = other.Protocol;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (local_ == null) {
              Local = new global::Skywalking.V3.ConnectionAddress();
            }
            input.ReadMessage(Local);
            break;
          }
          case 18: {
            if (remote_ == null) {
              Remote = new global::Skywalking.V3.ConnectionAddress();
            }
            input.ReadMessage(Remote);
            break;
          }
          case 24: {
            Role = (global::SkyWalking.NetworkProtocol.V3.DetectPoint) input.ReadEnum();
            break;
          }
          case 32: {
            TlsMode = (global::Skywalking.V3.AccessLogConnectionTLSMode) input.ReadEnum();
            break;
          }
          case 40: {
            Protocol = (global::Skywalking.V3.AccessLogProtocolType) input.ReadEnum();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (local_ == null) {
              Local = new global::Skywalking.V3.ConnectionAddress();
            }
            input.ReadMessage(Local);
            break;
          }
          case 18: {
            if (remote_ == null) {
              Remote = new global::Skywalking.V3.ConnectionAddress();
            }
            input.ReadMessage(Remote);
            break;
          }
          case 24: {
            Role = (global::SkyWalking.NetworkProtocol.V3.DetectPoint) input.ReadEnum();
            break;
          }
          case 32: {
            TlsMode = (global::Skywalking.V3.AccessLogConnectionTLSMode) input.ReadEnum();
            break;
          }
          case 40: {
            Protocol = (global::Skywalking.V3.AccessLogProtocolType) input.ReadEnum();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ConnectionAddress : pb::IMessage<ConnectionAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ConnectionAddress> _parser = new pb::MessageParser<ConnectionAddress>(() => new ConnectionAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ConnectionAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAddress(ConnectionAddress other) : this() {
      switch (other.AddressCase) {
        case AddressOneofCase.Kubernetes:
          Kubernetes = other.Kubernetes.Clone();
          break;
        case AddressOneofCase.Ip:
          Ip = other.Ip.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ConnectionAddress Clone() {
      return new ConnectionAddress(this);
    }

    /// <summary>Field number for the "kubernetes" field.</summary>
    public const int KubernetesFieldNumber = 1;
    /// <summary>
    /// if the address is monitored under the local machine, then return the kubernetes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.KubernetesProcessAddress Kubernetes {
      get { return addressCase_ == AddressOneofCase.Kubernetes ? (global::Skywalking.V3.KubernetesProcessAddress) address_ : null; }
      set {
        address_ = value;
        addressCase_ = value == null ? AddressOneofCase.None : AddressOneofCase.Kubernetes;
      }
    }

    /// <summary>Field number for the "ip" field.</summary>
    public const int IpFieldNumber = 2;
    /// <summary>
    /// if the address cannot be aware, then return the ip address
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.IPAddress Ip {
      get { return addressCase_ == AddressOneofCase.Ip ? (global::Skywalking.V3.IPAddress) address_ : null; }
      set {
        address_ = value;
        addressCase_ = value == null ? AddressOneofCase.None : AddressOneofCase.Ip;
      }
    }

    private object address_;
    /// <summary>Enum of possible cases for the "address" oneof.</summary>
    public enum AddressOneofCase {
      None = 0,
      Kubernetes = 1,
      Ip = 2,
    }
    private AddressOneofCase addressCase_ = AddressOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AddressOneofCase AddressCase {
      get { return addressCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearAddress() {
      addressCase_ = AddressOneofCase.None;
      address_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ConnectionAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ConnectionAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Kubernetes, other.Kubernetes)) return false;
      if (!object.Equals(Ip, other.Ip)) return false;
      if (AddressCase != other.AddressCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (addressCase_ == AddressOneofCase.Kubernetes) hash ^= Kubernetes.GetHashCode();
      if (addressCase_ == AddressOneofCase.Ip) hash ^= Ip.GetHashCode();
      hash ^= (int) addressCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (addressCase_ == AddressOneofCase.Kubernetes) {
        output.WriteRawTag(10);
        output.WriteMessage(Kubernetes);
      }
      if (addressCase_ == AddressOneofCase.Ip) {
        output.WriteRawTag(18);
        output.WriteMessage(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (addressCase_ == AddressOneofCase.Kubernetes) {
        output.WriteRawTag(10);
        output.WriteMessage(Kubernetes);
      }
      if (addressCase_ == AddressOneofCase.Ip) {
        output.WriteRawTag(18);
        output.WriteMessage(Ip);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (addressCase_ == AddressOneofCase.Kubernetes) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Kubernetes);
      }
      if (addressCase_ == AddressOneofCase.Ip) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Ip);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ConnectionAddress other) {
      if (other == null) {
        return;
      }
      switch (other.AddressCase) {
        case AddressOneofCase.Kubernetes:
          if (Kubernetes == null) {
            Kubernetes = new global::Skywalking.V3.KubernetesProcessAddress();
          }
          Kubernetes.MergeFrom(other.Kubernetes);
          break;
        case AddressOneofCase.Ip:
          if (Ip == null) {
            Ip = new global::Skywalking.V3.IPAddress();
          }
          Ip.MergeFrom(other.Ip);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Skywalking.V3.KubernetesProcessAddress subBuilder = new global::Skywalking.V3.KubernetesProcessAddress();
            if (addressCase_ == AddressOneofCase.Kubernetes) {
              subBuilder.MergeFrom(Kubernetes);
            }
            input.ReadMessage(subBuilder);
            Kubernetes = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.IPAddress subBuilder = new global::Skywalking.V3.IPAddress();
            if (addressCase_ == AddressOneofCase.Ip) {
              subBuilder.MergeFrom(Ip);
            }
            input.ReadMessage(subBuilder);
            Ip = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Skywalking.V3.KubernetesProcessAddress subBuilder = new global::Skywalking.V3.KubernetesProcessAddress();
            if (addressCase_ == AddressOneofCase.Kubernetes) {
              subBuilder.MergeFrom(Kubernetes);
            }
            input.ReadMessage(subBuilder);
            Kubernetes = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.IPAddress subBuilder = new global::Skywalking.V3.IPAddress();
            if (addressCase_ == AddressOneofCase.Ip) {
              subBuilder.MergeFrom(Ip);
            }
            input.ReadMessage(subBuilder);
            Ip = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class KubernetesProcessAddress : pb::IMessage<KubernetesProcessAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<KubernetesProcessAddress> _parser = new pb::MessageParser<KubernetesProcessAddress>(() => new KubernetesProcessAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<KubernetesProcessAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KubernetesProcessAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KubernetesProcessAddress(KubernetesProcessAddress other) : this() {
      serviceName_ = other.serviceName_;
      podName_ = other.podName_;
      containerName_ = other.containerName_;
      processName_ = other.processName_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public KubernetesProcessAddress Clone() {
      return new KubernetesProcessAddress(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "podName" field.</summary>
    public const int PodNameFieldNumber = 2;
    private string podName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PodName {
      get { return podName_; }
      set {
        podName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "containerName" field.</summary>
    public const int ContainerNameFieldNumber = 3;
    private string containerName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ContainerName {
      get { return containerName_; }
      set {
        containerName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processName" field.</summary>
    public const int ProcessNameFieldNumber = 4;
    private string processName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 5;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as KubernetesProcessAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(KubernetesProcessAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (PodName != other.PodName) return false;
      if (ContainerName != other.ContainerName) return false;
      if (ProcessName != other.ProcessName) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (PodName.Length != 0) hash ^= PodName.GetHashCode();
      if (ContainerName.Length != 0) hash ^= ContainerName.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (PodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PodName);
      }
      if (ContainerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContainerName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (PodName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PodName);
      }
      if (ContainerName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ContainerName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      if (Port != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (PodName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PodName);
      }
      if (ContainerName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ContainerName);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(KubernetesProcessAddress other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.PodName.Length != 0) {
        PodName = other.PodName;
      }
      if (other.ContainerName.Length != 0) {
        ContainerName = other.ContainerName;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            PodName = input.ReadString();
            break;
          }
          case 26: {
            ContainerName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            PodName = input.ReadString();
            break;
          }
          case 26: {
            ContainerName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 40: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class IPAddress : pb::IMessage<IPAddress>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<IPAddress> _parser = new pb::MessageParser<IPAddress>(() => new IPAddress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<IPAddress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAddress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAddress(IPAddress other) : this() {
      host_ = other.host_;
      port_ = other.port_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public IPAddress Clone() {
      return new IPAddress(this);
    }

    /// <summary>Field number for the "host" field.</summary>
    public const int HostFieldNumber = 1;
    private string host_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Host {
      get { return host_; }
      set {
        host_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "port" field.</summary>
    public const int PortFieldNumber = 2;
    private int port_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Port {
      get { return port_; }
      set {
        port_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as IPAddress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(IPAddress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Host != other.Host) return false;
      if (Port != other.Port) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Host.Length != 0) hash ^= Host.GetHashCode();
      if (Port != 0) hash ^= Port.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Host.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Host);
      }
      if (Port != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Port);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Host.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Host);
      }
      if (Port != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Port);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(IPAddress other) {
      if (other == null) {
        return;
      }
      if (other.Host.Length != 0) {
        Host = other.Host;
      }
      if (other.Port != 0) {
        Port = other.Port;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Host = input.ReadString();
            break;
          }
          case 16: {
            Port = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelLog : pb::IMessage<AccessLogKernelLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelLog> _parser = new pb::MessageParser<AccessLogKernelLog>(() => new AccessLogKernelLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelLog(AccessLogKernelLog other) : this() {
      switch (other.OperationCase) {
        case OperationOneofCase.Connect:
          Connect = other.Connect.Clone();
          break;
        case OperationOneofCase.Accept:
          Accept = other.Accept.Clone();
          break;
        case OperationOneofCase.Close:
          Close = other.Close.Clone();
          break;
        case OperationOneofCase.Read:
          Read = other.Read.Clone();
          break;
        case OperationOneofCase.Write:
          Write = other.Write.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelLog Clone() {
      return new AccessLogKernelLog(this);
    }

    /// <summary>Field number for the "connect" field.</summary>
    public const int ConnectFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelConnectOperation Connect {
      get { return operationCase_ == OperationOneofCase.Connect ? (global::Skywalking.V3.AccessLogKernelConnectOperation) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Connect;
      }
    }

    /// <summary>Field number for the "accept" field.</summary>
    public const int AcceptFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelAcceptOperation Accept {
      get { return operationCase_ == OperationOneofCase.Accept ? (global::Skywalking.V3.AccessLogKernelAcceptOperation) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Accept;
      }
    }

    /// <summary>Field number for the "close" field.</summary>
    public const int CloseFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelCloseOperation Close {
      get { return operationCase_ == OperationOneofCase.Close ? (global::Skywalking.V3.AccessLogKernelCloseOperation) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Close;
      }
    }

    /// <summary>Field number for the "read" field.</summary>
    public const int ReadFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelReadOperation Read {
      get { return operationCase_ == OperationOneofCase.Read ? (global::Skywalking.V3.AccessLogKernelReadOperation) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Read;
      }
    }

    /// <summary>Field number for the "write" field.</summary>
    public const int WriteFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelWriteOperation Write {
      get { return operationCase_ == OperationOneofCase.Write ? (global::Skywalking.V3.AccessLogKernelWriteOperation) operation_ : null; }
      set {
        operation_ = value;
        operationCase_ = value == null ? OperationOneofCase.None : OperationOneofCase.Write;
      }
    }

    private object operation_;
    /// <summary>Enum of possible cases for the "operation" oneof.</summary>
    public enum OperationOneofCase {
      None = 0,
      Connect = 1,
      Accept = 2,
      Close = 3,
      Read = 4,
      Write = 5,
    }
    private OperationOneofCase operationCase_ = OperationOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public OperationOneofCase OperationCase {
      get { return operationCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearOperation() {
      operationCase_ = OperationOneofCase.None;
      operation_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Connect, other.Connect)) return false;
      if (!object.Equals(Accept, other.Accept)) return false;
      if (!object.Equals(Close, other.Close)) return false;
      if (!object.Equals(Read, other.Read)) return false;
      if (!object.Equals(Write, other.Write)) return false;
      if (OperationCase != other.OperationCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (operationCase_ == OperationOneofCase.Connect) hash ^= Connect.GetHashCode();
      if (operationCase_ == OperationOneofCase.Accept) hash ^= Accept.GetHashCode();
      if (operationCase_ == OperationOneofCase.Close) hash ^= Close.GetHashCode();
      if (operationCase_ == OperationOneofCase.Read) hash ^= Read.GetHashCode();
      if (operationCase_ == OperationOneofCase.Write) hash ^= Write.GetHashCode();
      hash ^= (int) operationCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (operationCase_ == OperationOneofCase.Connect) {
        output.WriteRawTag(10);
        output.WriteMessage(Connect);
      }
      if (operationCase_ == OperationOneofCase.Accept) {
        output.WriteRawTag(18);
        output.WriteMessage(Accept);
      }
      if (operationCase_ == OperationOneofCase.Close) {
        output.WriteRawTag(26);
        output.WriteMessage(Close);
      }
      if (operationCase_ == OperationOneofCase.Read) {
        output.WriteRawTag(34);
        output.WriteMessage(Read);
      }
      if (operationCase_ == OperationOneofCase.Write) {
        output.WriteRawTag(42);
        output.WriteMessage(Write);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (operationCase_ == OperationOneofCase.Connect) {
        output.WriteRawTag(10);
        output.WriteMessage(Connect);
      }
      if (operationCase_ == OperationOneofCase.Accept) {
        output.WriteRawTag(18);
        output.WriteMessage(Accept);
      }
      if (operationCase_ == OperationOneofCase.Close) {
        output.WriteRawTag(26);
        output.WriteMessage(Close);
      }
      if (operationCase_ == OperationOneofCase.Read) {
        output.WriteRawTag(34);
        output.WriteMessage(Read);
      }
      if (operationCase_ == OperationOneofCase.Write) {
        output.WriteRawTag(42);
        output.WriteMessage(Write);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (operationCase_ == OperationOneofCase.Connect) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Connect);
      }
      if (operationCase_ == OperationOneofCase.Accept) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Accept);
      }
      if (operationCase_ == OperationOneofCase.Close) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Close);
      }
      if (operationCase_ == OperationOneofCase.Read) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Read);
      }
      if (operationCase_ == OperationOneofCase.Write) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Write);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelLog other) {
      if (other == null) {
        return;
      }
      switch (other.OperationCase) {
        case OperationOneofCase.Connect:
          if (Connect == null) {
            Connect = new global::Skywalking.V3.AccessLogKernelConnectOperation();
          }
          Connect.MergeFrom(other.Connect);
          break;
        case OperationOneofCase.Accept:
          if (Accept == null) {
            Accept = new global::Skywalking.V3.AccessLogKernelAcceptOperation();
          }
          Accept.MergeFrom(other.Accept);
          break;
        case OperationOneofCase.Close:
          if (Close == null) {
            Close = new global::Skywalking.V3.AccessLogKernelCloseOperation();
          }
          Close.MergeFrom(other.Close);
          break;
        case OperationOneofCase.Read:
          if (Read == null) {
            Read = new global::Skywalking.V3.AccessLogKernelReadOperation();
          }
          Read.MergeFrom(other.Read);
          break;
        case OperationOneofCase.Write:
          if (Write == null) {
            Write = new global::Skywalking.V3.AccessLogKernelWriteOperation();
          }
          Write.MergeFrom(other.Write);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Skywalking.V3.AccessLogKernelConnectOperation subBuilder = new global::Skywalking.V3.AccessLogKernelConnectOperation();
            if (operationCase_ == OperationOneofCase.Connect) {
              subBuilder.MergeFrom(Connect);
            }
            input.ReadMessage(subBuilder);
            Connect = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.AccessLogKernelAcceptOperation subBuilder = new global::Skywalking.V3.AccessLogKernelAcceptOperation();
            if (operationCase_ == OperationOneofCase.Accept) {
              subBuilder.MergeFrom(Accept);
            }
            input.ReadMessage(subBuilder);
            Accept = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.AccessLogKernelCloseOperation subBuilder = new global::Skywalking.V3.AccessLogKernelCloseOperation();
            if (operationCase_ == OperationOneofCase.Close) {
              subBuilder.MergeFrom(Close);
            }
            input.ReadMessage(subBuilder);
            Close = subBuilder;
            break;
          }
          case 34: {
            global::Skywalking.V3.AccessLogKernelReadOperation subBuilder = new global::Skywalking.V3.AccessLogKernelReadOperation();
            if (operationCase_ == OperationOneofCase.Read) {
              subBuilder.MergeFrom(Read);
            }
            input.ReadMessage(subBuilder);
            Read = subBuilder;
            break;
          }
          case 42: {
            global::Skywalking.V3.AccessLogKernelWriteOperation subBuilder = new global::Skywalking.V3.AccessLogKernelWriteOperation();
            if (operationCase_ == OperationOneofCase.Write) {
              subBuilder.MergeFrom(Write);
            }
            input.ReadMessage(subBuilder);
            Write = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Skywalking.V3.AccessLogKernelConnectOperation subBuilder = new global::Skywalking.V3.AccessLogKernelConnectOperation();
            if (operationCase_ == OperationOneofCase.Connect) {
              subBuilder.MergeFrom(Connect);
            }
            input.ReadMessage(subBuilder);
            Connect = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.AccessLogKernelAcceptOperation subBuilder = new global::Skywalking.V3.AccessLogKernelAcceptOperation();
            if (operationCase_ == OperationOneofCase.Accept) {
              subBuilder.MergeFrom(Accept);
            }
            input.ReadMessage(subBuilder);
            Accept = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.AccessLogKernelCloseOperation subBuilder = new global::Skywalking.V3.AccessLogKernelCloseOperation();
            if (operationCase_ == OperationOneofCase.Close) {
              subBuilder.MergeFrom(Close);
            }
            input.ReadMessage(subBuilder);
            Close = subBuilder;
            break;
          }
          case 34: {
            global::Skywalking.V3.AccessLogKernelReadOperation subBuilder = new global::Skywalking.V3.AccessLogKernelReadOperation();
            if (operationCase_ == OperationOneofCase.Read) {
              subBuilder.MergeFrom(Read);
            }
            input.ReadMessage(subBuilder);
            Read = subBuilder;
            break;
          }
          case 42: {
            global::Skywalking.V3.AccessLogKernelWriteOperation subBuilder = new global::Skywalking.V3.AccessLogKernelWriteOperation();
            if (operationCase_ == OperationOneofCase.Write) {
              subBuilder.MergeFrom(Write);
            }
            input.ReadMessage(subBuilder);
            Write = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogProtocolLogs : pb::IMessage<AccessLogProtocolLogs>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogProtocolLogs> _parser = new pb::MessageParser<AccessLogProtocolLogs>(() => new AccessLogProtocolLogs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogProtocolLogs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogProtocolLogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogProtocolLogs(AccessLogProtocolLogs other) : this() {
      switch (other.ProtocolCase) {
        case ProtocolOneofCase.Http:
          Http = other.Http.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogProtocolLogs Clone() {
      return new AccessLogProtocolLogs(this);
    }

    /// <summary>Field number for the "http" field.</summary>
    public const int HttpFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogHTTPProtocol Http {
      get { return protocolCase_ == ProtocolOneofCase.Http ? (global::Skywalking.V3.AccessLogHTTPProtocol) protocol_ : null; }
      set {
        protocol_ = value;
        protocolCase_ = value == null ? ProtocolOneofCase.None : ProtocolOneofCase.Http;
      }
    }

    private object protocol_;
    /// <summary>Enum of possible cases for the "protocol" oneof.</summary>
    public enum ProtocolOneofCase {
      None = 0,
      Http = 1,
    }
    private ProtocolOneofCase protocolCase_ = ProtocolOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtocolOneofCase ProtocolCase {
      get { return protocolCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProtocol() {
      protocolCase_ = ProtocolOneofCase.None;
      protocol_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogProtocolLogs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogProtocolLogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Http, other.Http)) return false;
      if (ProtocolCase != other.ProtocolCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (protocolCase_ == ProtocolOneofCase.Http) hash ^= Http.GetHashCode();
      hash ^= (int) protocolCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (protocolCase_ == ProtocolOneofCase.Http) {
        output.WriteRawTag(10);
        output.WriteMessage(Http);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (protocolCase_ == ProtocolOneofCase.Http) {
        output.WriteRawTag(10);
        output.WriteMessage(Http);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (protocolCase_ == ProtocolOneofCase.Http) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Http);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogProtocolLogs other) {
      if (other == null) {
        return;
      }
      switch (other.ProtocolCase) {
        case ProtocolOneofCase.Http:
          if (Http == null) {
            Http = new global::Skywalking.V3.AccessLogHTTPProtocol();
          }
          Http.MergeFrom(other.Http);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Skywalking.V3.AccessLogHTTPProtocol subBuilder = new global::Skywalking.V3.AccessLogHTTPProtocol();
            if (protocolCase_ == ProtocolOneofCase.Http) {
              subBuilder.MergeFrom(Http);
            }
            input.ReadMessage(subBuilder);
            Http = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Skywalking.V3.AccessLogHTTPProtocol subBuilder = new global::Skywalking.V3.AccessLogHTTPProtocol();
            if (protocolCase_ == ProtocolOneofCase.Http) {
              subBuilder.MergeFrom(Http);
            }
            input.ReadMessage(subBuilder);
            Http = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogHTTPProtocol : pb::IMessage<AccessLogHTTPProtocol>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogHTTPProtocol> _parser = new pb::MessageParser<AccessLogHTTPProtocol>(() => new AccessLogHTTPProtocol());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogHTTPProtocol> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[11]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocol() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocol(AccessLogHTTPProtocol other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      version_ = other.version_;
      request_ = other.request_ != null ? other.request_.Clone() : null;
      response_ = other.response_ != null ? other.response_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocol Clone() {
      return new AccessLogHTTPProtocol(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// first bytes receive/write timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// last bytes receive/write timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 3;
    private global::Skywalking.V3.AccessLogHTTPProtocolVersion version_ = global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogHTTPProtocolVersion Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "request" field.</summary>
    public const int RequestFieldNumber = 4;
    private global::Skywalking.V3.AccessLogHTTPProtocolRequest request_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogHTTPProtocolRequest Request {
      get { return request_; }
      set {
        request_ = value;
      }
    }

    /// <summary>Field number for the "response" field.</summary>
    public const int ResponseFieldNumber = 5;
    private global::Skywalking.V3.AccessLogHTTPProtocolResponse response_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogHTTPProtocolResponse Response {
      get { return response_; }
      set {
        response_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogHTTPProtocol);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogHTTPProtocol other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Version != other.Version) return false;
      if (!object.Equals(Request, other.Request)) return false;
      if (!object.Equals(Response, other.Response)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Version != global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1) hash ^= Version.GetHashCode();
      if (request_ != null) hash ^= Request.GetHashCode();
      if (response_ != null) hash ^= Response.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Version != global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Version);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Version != global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Version);
      }
      if (request_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(Request);
      }
      if (response_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Response);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Version != global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Version);
      }
      if (request_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Request);
      }
      if (response_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Response);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogHTTPProtocol other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Version != global::Skywalking.V3.AccessLogHTTPProtocolVersion.Http1) {
        Version = other.Version;
      }
      if (other.request_ != null) {
        if (request_ == null) {
          Request = new global::Skywalking.V3.AccessLogHTTPProtocolRequest();
        }
        Request.MergeFrom(other.Request);
      }
      if (other.response_ != null) {
        if (response_ == null) {
          Response = new global::Skywalking.V3.AccessLogHTTPProtocolResponse();
        }
        Response.MergeFrom(other.Response);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Version = (global::Skywalking.V3.AccessLogHTTPProtocolVersion) input.ReadEnum();
            break;
          }
          case 34: {
            if (request_ == null) {
              Request = new global::Skywalking.V3.AccessLogHTTPProtocolRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 42: {
            if (response_ == null) {
              Response = new global::Skywalking.V3.AccessLogHTTPProtocolResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Version = (global::Skywalking.V3.AccessLogHTTPProtocolVersion) input.ReadEnum();
            break;
          }
          case 34: {
            if (request_ == null) {
              Request = new global::Skywalking.V3.AccessLogHTTPProtocolRequest();
            }
            input.ReadMessage(Request);
            break;
          }
          case 42: {
            if (response_ == null) {
              Response = new global::Skywalking.V3.AccessLogHTTPProtocolResponse();
            }
            input.ReadMessage(Response);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogHTTPProtocolRequest : pb::IMessage<AccessLogHTTPProtocolRequest>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogHTTPProtocolRequest> _parser = new pb::MessageParser<AccessLogHTTPProtocolRequest>(() => new AccessLogHTTPProtocolRequest());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogHTTPProtocolRequest> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[12]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolRequest() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolRequest(AccessLogHTTPProtocolRequest other) : this() {
      method_ = other.method_;
      path_ = other.path_;
      sizeOfHeadersBytes_ = other.sizeOfHeadersBytes_;
      sizeOfBodyBytes_ = other.sizeOfBodyBytes_;
      trace_ = other.trace_ != null ? other.trace_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolRequest Clone() {
      return new AccessLogHTTPProtocolRequest(this);
    }

    /// <summary>Field number for the "method" field.</summary>
    public const int MethodFieldNumber = 1;
    private global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod method_ = global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod Method {
      get { return method_; }
      set {
        method_ = value;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    private string path_ = "";
    /// <summary>
    /// The path portion from the incoming request URI.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return path_; }
      set {
        path_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "sizeOfHeadersBytes" field.</summary>
    public const int SizeOfHeadersBytesFieldNumber = 3;
    private ulong sizeOfHeadersBytes_;
    /// <summary>
    /// Request header and body size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SizeOfHeadersBytes {
      get { return sizeOfHeadersBytes_; }
      set {
        sizeOfHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "sizeOfBodyBytes" field.</summary>
    public const int SizeOfBodyBytesFieldNumber = 4;
    private ulong sizeOfBodyBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SizeOfBodyBytes {
      get { return sizeOfBodyBytes_; }
      set {
        sizeOfBodyBytes_ = value;
      }
    }

    /// <summary>Field number for the "trace" field.</summary>
    public const int TraceFieldNumber = 5;
    private global::Skywalking.V3.AccessLogTraceInfo trace_;
    /// <summary>
    /// The trace information if detected.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogTraceInfo Trace {
      get { return trace_; }
      set {
        trace_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogHTTPProtocolRequest);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogHTTPProtocolRequest other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Method != other.Method) return false;
      if (Path != other.Path) return false;
      if (SizeOfHeadersBytes != other.SizeOfHeadersBytes) return false;
      if (SizeOfBodyBytes != other.SizeOfBodyBytes) return false;
      if (!object.Equals(Trace, other.Trace)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Method != global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get) hash ^= Method.GetHashCode();
      if (Path.Length != 0) hash ^= Path.GetHashCode();
      if (SizeOfHeadersBytes != 0UL) hash ^= SizeOfHeadersBytes.GetHashCode();
      if (SizeOfBodyBytes != 0UL) hash ^= SizeOfBodyBytes.GetHashCode();
      if (trace_ != null) hash ^= Trace.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Method != global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Method);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (SizeOfHeadersBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SizeOfBodyBytes);
      }
      if (trace_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Trace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Method != global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Method);
      }
      if (Path.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (SizeOfHeadersBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SizeOfBodyBytes);
      }
      if (trace_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Trace);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Method != global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Method);
      }
      if (Path.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (SizeOfHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeOfBodyBytes);
      }
      if (trace_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trace);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogHTTPProtocolRequest other) {
      if (other == null) {
        return;
      }
      if (other.Method != global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod.Get) {
        Method = other.Method;
      }
      if (other.Path.Length != 0) {
        Path = other.Path;
      }
      if (other.SizeOfHeadersBytes != 0UL) {
        SizeOfHeadersBytes = other.SizeOfHeadersBytes;
      }
      if (other.SizeOfBodyBytes != 0UL) {
        SizeOfBodyBytes = other.SizeOfBodyBytes;
      }
      if (other.trace_ != null) {
        if (trace_ == null) {
          Trace = new global::Skywalking.V3.AccessLogTraceInfo();
        }
        Trace.MergeFrom(other.Trace);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Method = (global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod) input.ReadEnum();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            SizeOfHeadersBytes = input.ReadUInt64();
            break;
          }
          case 32: {
            SizeOfBodyBytes = input.ReadUInt64();
            break;
          }
          case 42: {
            if (trace_ == null) {
              Trace = new global::Skywalking.V3.AccessLogTraceInfo();
            }
            input.ReadMessage(Trace);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Method = (global::Skywalking.V3.AccessLogHTTPProtocolRequestMethod) input.ReadEnum();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 24: {
            SizeOfHeadersBytes = input.ReadUInt64();
            break;
          }
          case 32: {
            SizeOfBodyBytes = input.ReadUInt64();
            break;
          }
          case 42: {
            if (trace_ == null) {
              Trace = new global::Skywalking.V3.AccessLogTraceInfo();
            }
            input.ReadMessage(Trace);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogHTTPProtocolResponse : pb::IMessage<AccessLogHTTPProtocolResponse>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogHTTPProtocolResponse> _parser = new pb::MessageParser<AccessLogHTTPProtocolResponse>(() => new AccessLogHTTPProtocolResponse());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogHTTPProtocolResponse> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[13]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolResponse() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolResponse(AccessLogHTTPProtocolResponse other) : this() {
      statusCode_ = other.statusCode_;
      sizeOfHeadersBytes_ = other.sizeOfHeadersBytes_;
      sizeOfBodyBytes_ = other.sizeOfBodyBytes_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogHTTPProtocolResponse Clone() {
      return new AccessLogHTTPProtocolResponse(this);
    }

    /// <summary>Field number for the "statusCode" field.</summary>
    public const int StatusCodeFieldNumber = 1;
    private int statusCode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StatusCode {
      get { return statusCode_; }
      set {
        statusCode_ = value;
      }
    }

    /// <summary>Field number for the "sizeOfHeadersBytes" field.</summary>
    public const int SizeOfHeadersBytesFieldNumber = 3;
    private ulong sizeOfHeadersBytes_;
    /// <summary>
    /// Response header and body size.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SizeOfHeadersBytes {
      get { return sizeOfHeadersBytes_; }
      set {
        sizeOfHeadersBytes_ = value;
      }
    }

    /// <summary>Field number for the "sizeOfBodyBytes" field.</summary>
    public const int SizeOfBodyBytesFieldNumber = 4;
    private ulong sizeOfBodyBytes_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong SizeOfBodyBytes {
      get { return sizeOfBodyBytes_; }
      set {
        sizeOfBodyBytes_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogHTTPProtocolResponse);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogHTTPProtocolResponse other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StatusCode != other.StatusCode) return false;
      if (SizeOfHeadersBytes != other.SizeOfHeadersBytes) return false;
      if (SizeOfBodyBytes != other.SizeOfBodyBytes) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StatusCode != 0) hash ^= StatusCode.GetHashCode();
      if (SizeOfHeadersBytes != 0UL) hash ^= SizeOfHeadersBytes.GetHashCode();
      if (SizeOfBodyBytes != 0UL) hash ^= SizeOfBodyBytes.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (SizeOfHeadersBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SizeOfBodyBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StatusCode != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(StatusCode);
      }
      if (SizeOfHeadersBytes != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(SizeOfBodyBytes);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StatusCode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StatusCode);
      }
      if (SizeOfHeadersBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeOfHeadersBytes);
      }
      if (SizeOfBodyBytes != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(SizeOfBodyBytes);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogHTTPProtocolResponse other) {
      if (other == null) {
        return;
      }
      if (other.StatusCode != 0) {
        StatusCode = other.StatusCode;
      }
      if (other.SizeOfHeadersBytes != 0UL) {
        SizeOfHeadersBytes = other.SizeOfHeadersBytes;
      }
      if (other.SizeOfBodyBytes != 0UL) {
        SizeOfBodyBytes = other.SizeOfBodyBytes;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 24: {
            SizeOfHeadersBytes = input.ReadUInt64();
            break;
          }
          case 32: {
            SizeOfBodyBytes = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StatusCode = input.ReadInt32();
            break;
          }
          case 24: {
            SizeOfHeadersBytes = input.ReadUInt64();
            break;
          }
          case 32: {
            SizeOfBodyBytes = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogTraceInfo : pb::IMessage<AccessLogTraceInfo>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogTraceInfo> _parser = new pb::MessageParser<AccessLogTraceInfo>(() => new AccessLogTraceInfo());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogTraceInfo> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[14]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogTraceInfo() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogTraceInfo(AccessLogTraceInfo other) : this() {
      provider_ = other.provider_;
      traceId_ = other.traceId_;
      traceSegmentId_ = other.traceSegmentId_;
      spanId_ = other.spanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogTraceInfo Clone() {
      return new AccessLogTraceInfo(this);
    }

    /// <summary>Field number for the "provider" field.</summary>
    public const int ProviderFieldNumber = 1;
    private global::Skywalking.V3.AccessLogTraceInfoProvider provider_ = global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogTraceInfoProvider Provider {
      get { return provider_; }
      set {
        provider_ = value;
      }
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 2;
    private string traceId_ = "";
    /// <summary>
    /// [Optional] A string id represents the whole trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 3;
    private string traceSegmentId_ = "";
    /// <summary>
    /// A unique id represents this segment. Other segments could use this id to reference as a child segment.
    /// [Optional] when this span reference
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 4;
    private string spanId_ = "";
    /// <summary>
    /// If type == SkyWalking
    /// The number id of the span. Should be unique in the whole segment.
    /// Starting at 0
    ///
    /// If type == Zipkin
    /// The type of span ID is string.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string SpanId {
      get { return spanId_; }
      set {
        spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogTraceInfo);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogTraceInfo other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Provider != other.Provider) return false;
      if (TraceId != other.TraceId) return false;
      if (TraceSegmentId != other.TraceSegmentId) return false;
      if (SpanId != other.SpanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Provider != global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin) hash ^= Provider.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (TraceSegmentId.Length != 0) hash ^= TraceSegmentId.GetHashCode();
      if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Provider != global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TraceSegmentId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Provider != global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Provider);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(TraceSegmentId);
      }
      if (SpanId.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(SpanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Provider != global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Provider);
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceSegmentId);
      }
      if (SpanId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogTraceInfo other) {
      if (other == null) {
        return;
      }
      if (other.Provider != global::Skywalking.V3.AccessLogTraceInfoProvider.Zipkin) {
        Provider = other.Provider;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.TraceSegmentId.Length != 0) {
        TraceSegmentId = other.TraceSegmentId;
      }
      if (other.SpanId.Length != 0) {
        SpanId = other.SpanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Provider = (global::Skywalking.V3.AccessLogTraceInfoProvider) input.ReadEnum();
            break;
          }
          case 18: {
            TraceId = input.ReadString();
            break;
          }
          case 26: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 34: {
            SpanId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Provider = (global::Skywalking.V3.AccessLogTraceInfoProvider) input.ReadEnum();
            break;
          }
          case 18: {
            TraceId = input.ReadString();
            break;
          }
          case 26: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 34: {
            SpanId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelConnectOperation : pb::IMessage<AccessLogKernelConnectOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelConnectOperation> _parser = new pb::MessageParser<AccessLogKernelConnectOperation>(() => new AccessLogKernelConnectOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelConnectOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[15]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelConnectOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelConnectOperation(AccessLogKernelConnectOperation other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelConnectOperation Clone() {
      return new AccessLogKernelConnectOperation(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// Starting to connect with peer address timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// Finish connect operation timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    /// <summary>
    /// Is the connect operation success or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelConnectOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelConnectOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelConnectOperation other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelAcceptOperation : pb::IMessage<AccessLogKernelAcceptOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelAcceptOperation> _parser = new pb::MessageParser<AccessLogKernelAcceptOperation>(() => new AccessLogKernelAcceptOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelAcceptOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[16]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelAcceptOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelAcceptOperation(AccessLogKernelAcceptOperation other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelAcceptOperation Clone() {
      return new AccessLogKernelAcceptOperation(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// Starting to accept socket timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// Finish accept operation timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelAcceptOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelAcceptOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelAcceptOperation other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelCloseOperation : pb::IMessage<AccessLogKernelCloseOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelCloseOperation> _parser = new pb::MessageParser<AccessLogKernelCloseOperation>(() => new AccessLogKernelCloseOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelCloseOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[17]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelCloseOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelCloseOperation(AccessLogKernelCloseOperation other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      success_ = other.success_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelCloseOperation Clone() {
      return new AccessLogKernelCloseOperation(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// Starting to close the connection timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// Finish close operation timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "success" field.</summary>
    public const int SuccessFieldNumber = 3;
    private bool success_;
    /// <summary>
    /// Is the close operation success or not
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelCloseOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelCloseOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Success != other.Success) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Success != false) hash ^= Success.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Success != false) {
        output.WriteRawTag(24);
        output.WriteBool(Success);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Success != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelCloseOperation other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Success = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelWriteOperation : pb::IMessage<AccessLogKernelWriteOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelWriteOperation> _parser = new pb::MessageParser<AccessLogKernelWriteOperation>(() => new AccessLogKernelWriteOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelWriteOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[18]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteOperation(AccessLogKernelWriteOperation other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      syscall_ = other.syscall_;
      l4Metrics_ = other.l4Metrics_ != null ? other.l4Metrics_.Clone() : null;
      l3Metrics_ = other.l3Metrics_ != null ? other.l3Metrics_.Clone() : null;
      l2Metrics_ = other.l2Metrics_ != null ? other.l2Metrics_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteOperation Clone() {
      return new AccessLogKernelWriteOperation(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// Starting to write data timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// Finish write operation timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "syscall" field.</summary>
    public const int SyscallFieldNumber = 3;
    private global::Skywalking.V3.AccessLogKernelWriteSyscall syscall_ = global::Skywalking.V3.AccessLogKernelWriteSyscall.Write;
    /// <summary>
    /// Which kind of syscall of current write operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelWriteSyscall Syscall {
      get { return syscall_; }
      set {
        syscall_ = value;
      }
    }

    /// <summary>Field number for the "l4Metrics" field.</summary>
    public const int L4MetricsFieldNumber = 4;
    private global::Skywalking.V3.AccessLogKernelWriteL4Metrics l4Metrics_;
    /// <summary>
    /// Layer 2-4 related metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelWriteL4Metrics L4Metrics {
      get { return l4Metrics_; }
      set {
        l4Metrics_ = value;
      }
    }

    /// <summary>Field number for the "l3Metrics" field.</summary>
    public const int L3MetricsFieldNumber = 5;
    private global::Skywalking.V3.AccessLogKernelWriteL3Metrics l3Metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelWriteL3Metrics L3Metrics {
      get { return l3Metrics_; }
      set {
        l3Metrics_ = value;
      }
    }

    /// <summary>Field number for the "l2Metrics" field.</summary>
    public const int L2MetricsFieldNumber = 6;
    private global::Skywalking.V3.AccessLogKernelWriteL2Metrics l2Metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelWriteL2Metrics L2Metrics {
      get { return l2Metrics_; }
      set {
        l2Metrics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelWriteOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelWriteOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Syscall != other.Syscall) return false;
      if (!object.Equals(L4Metrics, other.L4Metrics)) return false;
      if (!object.Equals(L3Metrics, other.L3Metrics)) return false;
      if (!object.Equals(L2Metrics, other.L2Metrics)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Syscall != global::Skywalking.V3.AccessLogKernelWriteSyscall.Write) hash ^= Syscall.GetHashCode();
      if (l4Metrics_ != null) hash ^= L4Metrics.GetHashCode();
      if (l3Metrics_ != null) hash ^= L3Metrics.GetHashCode();
      if (l2Metrics_ != null) hash ^= L2Metrics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelWriteSyscall.Write) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Syscall);
      }
      if (l4Metrics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(L4Metrics);
      }
      if (l3Metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(L3Metrics);
      }
      if (l2Metrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(L2Metrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelWriteSyscall.Write) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Syscall);
      }
      if (l4Metrics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(L4Metrics);
      }
      if (l3Metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(L3Metrics);
      }
      if (l2Metrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(L2Metrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelWriteSyscall.Write) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Syscall);
      }
      if (l4Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L4Metrics);
      }
      if (l3Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L3Metrics);
      }
      if (l2Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L2Metrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelWriteOperation other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Syscall != global::Skywalking.V3.AccessLogKernelWriteSyscall.Write) {
        Syscall = other.Syscall;
      }
      if (other.l4Metrics_ != null) {
        if (l4Metrics_ == null) {
          L4Metrics = new global::Skywalking.V3.AccessLogKernelWriteL4Metrics();
        }
        L4Metrics.MergeFrom(other.L4Metrics);
      }
      if (other.l3Metrics_ != null) {
        if (l3Metrics_ == null) {
          L3Metrics = new global::Skywalking.V3.AccessLogKernelWriteL3Metrics();
        }
        L3Metrics.MergeFrom(other.L3Metrics);
      }
      if (other.l2Metrics_ != null) {
        if (l2Metrics_ == null) {
          L2Metrics = new global::Skywalking.V3.AccessLogKernelWriteL2Metrics();
        }
        L2Metrics.MergeFrom(other.L2Metrics);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Syscall = (global::Skywalking.V3.AccessLogKernelWriteSyscall) input.ReadEnum();
            break;
          }
          case 34: {
            if (l4Metrics_ == null) {
              L4Metrics = new global::Skywalking.V3.AccessLogKernelWriteL4Metrics();
            }
            input.ReadMessage(L4Metrics);
            break;
          }
          case 42: {
            if (l3Metrics_ == null) {
              L3Metrics = new global::Skywalking.V3.AccessLogKernelWriteL3Metrics();
            }
            input.ReadMessage(L3Metrics);
            break;
          }
          case 50: {
            if (l2Metrics_ == null) {
              L2Metrics = new global::Skywalking.V3.AccessLogKernelWriteL2Metrics();
            }
            input.ReadMessage(L2Metrics);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Syscall = (global::Skywalking.V3.AccessLogKernelWriteSyscall) input.ReadEnum();
            break;
          }
          case 34: {
            if (l4Metrics_ == null) {
              L4Metrics = new global::Skywalking.V3.AccessLogKernelWriteL4Metrics();
            }
            input.ReadMessage(L4Metrics);
            break;
          }
          case 42: {
            if (l3Metrics_ == null) {
              L3Metrics = new global::Skywalking.V3.AccessLogKernelWriteL3Metrics();
            }
            input.ReadMessage(L3Metrics);
            break;
          }
          case 50: {
            if (l2Metrics_ == null) {
              L2Metrics = new global::Skywalking.V3.AccessLogKernelWriteL2Metrics();
            }
            input.ReadMessage(L2Metrics);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelWriteL4Metrics : pb::IMessage<AccessLogKernelWriteL4Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelWriteL4Metrics> _parser = new pb::MessageParser<AccessLogKernelWriteL4Metrics>(() => new AccessLogKernelWriteL4Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelWriteL4Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[19]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL4Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL4Metrics(AccessLogKernelWriteL4Metrics other) : this() {
      totalDuration_ = other.totalDuration_;
      totalTransmitPackageCount_ = other.totalTransmitPackageCount_;
      totalRetransmitPackageCount_ = other.totalRetransmitPackageCount_;
      lossPackageMetrics_ = other.lossPackageMetrics_.Clone();
      totalPackageSize_ = other.totalPackageSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL4Metrics Clone() {
      return new AccessLogKernelWriteL4Metrics(this);
    }

    /// <summary>Field number for the "totalDuration" field.</summary>
    public const int TotalDurationFieldNumber = 1;
    private ulong totalDuration_;
    /// <summary>
    /// total duration(nanosecond) of layer 4
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalTransmitPackageCount" field.</summary>
    public const int TotalTransmitPackageCountFieldNumber = 2;
    private long totalTransmitPackageCount_;
    /// <summary>
    /// total send package(contains retransmit count) count(sk_buff in linux)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalTransmitPackageCount {
      get { return totalTransmitPackageCount_; }
      set {
        totalTransmitPackageCount_ = value;
      }
    }

    /// <summary>Field number for the "totalRetransmitPackageCount" field.</summary>
    public const int TotalRetransmitPackageCountFieldNumber = 3;
    private long totalRetransmitPackageCount_;
    /// <summary>
    /// total retransmit package count(sk_buff in linux)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalRetransmitPackageCount {
      get { return totalRetransmitPackageCount_; }
      set {
        totalRetransmitPackageCount_ = value;
      }
    }

    /// <summary>Field number for the "lossPackageMetrics" field.</summary>
    public const int LossPackageMetricsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Skywalking.V3.AccessLogLossPackageMetrics> _repeated_lossPackageMetrics_codec
        = pb::FieldCodec.ForMessage(34, global::Skywalking.V3.AccessLogLossPackageMetrics.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.AccessLogLossPackageMetrics> lossPackageMetrics_ = new pbc::RepeatedField<global::Skywalking.V3.AccessLogLossPackageMetrics>();
    /// <summary>
    /// total losted package count metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.AccessLogLossPackageMetrics> LossPackageMetrics {
      get { return lossPackageMetrics_; }
    }

    /// <summary>Field number for the "totalPackageSize" field.</summary>
    public const int TotalPackageSizeFieldNumber = 5;
    private long totalPackageSize_;
    /// <summary>
    /// total package size(bytes)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long TotalPackageSize {
      get { return totalPackageSize_; }
      set {
        totalPackageSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelWriteL4Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelWriteL4Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDuration != other.TotalDuration) return false;
      if (TotalTransmitPackageCount != other.TotalTransmitPackageCount) return false;
      if (TotalRetransmitPackageCount != other.TotalRetransmitPackageCount) return false;
      if(!lossPackageMetrics_.Equals(other.lossPackageMetrics_)) return false;
      if (TotalPackageSize != other.TotalPackageSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDuration != 0UL) hash ^= TotalDuration.GetHashCode();
      if (TotalTransmitPackageCount != 0L) hash ^= TotalTransmitPackageCount.GetHashCode();
      if (TotalRetransmitPackageCount != 0L) hash ^= TotalRetransmitPackageCount.GetHashCode();
      hash ^= lossPackageMetrics_.GetHashCode();
      if (TotalPackageSize != 0L) hash ^= TotalPackageSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalTransmitPackageCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalTransmitPackageCount);
      }
      if (TotalRetransmitPackageCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalRetransmitPackageCount);
      }
      lossPackageMetrics_.WriteTo(output, _repeated_lossPackageMetrics_codec);
      if (TotalPackageSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalPackageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalTransmitPackageCount != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(TotalTransmitPackageCount);
      }
      if (TotalRetransmitPackageCount != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(TotalRetransmitPackageCount);
      }
      lossPackageMetrics_.WriteTo(ref output, _repeated_lossPackageMetrics_codec);
      if (TotalPackageSize != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TotalPackageSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDuration);
      }
      if (TotalTransmitPackageCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalTransmitPackageCount);
      }
      if (TotalRetransmitPackageCount != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalRetransmitPackageCount);
      }
      size += lossPackageMetrics_.CalculateSize(_repeated_lossPackageMetrics_codec);
      if (TotalPackageSize != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TotalPackageSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelWriteL4Metrics other) {
      if (other == null) {
        return;
      }
      if (other.TotalDuration != 0UL) {
        TotalDuration = other.TotalDuration;
      }
      if (other.TotalTransmitPackageCount != 0L) {
        TotalTransmitPackageCount = other.TotalTransmitPackageCount;
      }
      if (other.TotalRetransmitPackageCount != 0L) {
        TotalRetransmitPackageCount = other.TotalRetransmitPackageCount;
      }
      lossPackageMetrics_.Add(other.lossPackageMetrics_);
      if (other.TotalPackageSize != 0L) {
        TotalPackageSize = other.TotalPackageSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalTransmitPackageCount = input.ReadInt64();
            break;
          }
          case 24: {
            TotalRetransmitPackageCount = input.ReadInt64();
            break;
          }
          case 34: {
            lossPackageMetrics_.AddEntriesFrom(input, _repeated_lossPackageMetrics_codec);
            break;
          }
          case 40: {
            TotalPackageSize = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalTransmitPackageCount = input.ReadInt64();
            break;
          }
          case 24: {
            TotalRetransmitPackageCount = input.ReadInt64();
            break;
          }
          case 34: {
            lossPackageMetrics_.AddEntriesFrom(ref input, _repeated_lossPackageMetrics_codec);
            break;
          }
          case 40: {
            TotalPackageSize = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogLossPackageMetrics : pb::IMessage<AccessLogLossPackageMetrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogLossPackageMetrics> _parser = new pb::MessageParser<AccessLogLossPackageMetrics>(() => new AccessLogLossPackageMetrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogLossPackageMetrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[20]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogLossPackageMetrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogLossPackageMetrics(AccessLogLossPackageMetrics other) : this() {
      location_ = other.location_;
      count_ = other.count_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogLossPackageMetrics Clone() {
      return new AccessLogLossPackageMetrics(this);
    }

    /// <summary>Field number for the "location" field.</summary>
    public const int LocationFieldNumber = 1;
    private string location_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Location {
      get { return location_; }
      set {
        location_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 2;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogLossPackageMetrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogLossPackageMetrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Location != other.Location) return false;
      if (Count != other.Count) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Location.Length != 0) hash ^= Location.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Location.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Location);
      }
      if (Count != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Count);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Location.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Location);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogLossPackageMetrics other) {
      if (other == null) {
        return;
      }
      if (other.Location.Length != 0) {
        Location = other.Location;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Location = input.ReadString();
            break;
          }
          case 16: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelWriteL3Metrics : pb::IMessage<AccessLogKernelWriteL3Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelWriteL3Metrics> _parser = new pb::MessageParser<AccessLogKernelWriteL3Metrics>(() => new AccessLogKernelWriteL3Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelWriteL3Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[21]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL3Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL3Metrics(AccessLogKernelWriteL3Metrics other) : this() {
      totalDuration_ = other.totalDuration_;
      totalLocalDuration_ = other.totalLocalDuration_;
      totalOutputDuration_ = other.totalOutputDuration_;
      totalResolveMACCount_ = other.totalResolveMACCount_;
      totalResolveMACDuration_ = other.totalResolveMACDuration_;
      totalNetFilterCount_ = other.totalNetFilterCount_;
      totalNetFilterDuration_ = other.totalNetFilterDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL3Metrics Clone() {
      return new AccessLogKernelWriteL3Metrics(this);
    }

    /// <summary>Field number for the "totalDuration" field.</summary>
    public const int TotalDurationFieldNumber = 1;
    private ulong totalDuration_;
    /// <summary>
    /// total duration(nanosecond) of layer 3
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalLocalDuration" field.</summary>
    public const int TotalLocalDurationFieldNumber = 2;
    private ulong totalLocalDuration_;
    /// <summary>
    /// total local out use duration(nanoseconds) -> kernel: ip_local_out
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalLocalDuration {
      get { return totalLocalDuration_; }
      set {
        totalLocalDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalOutputDuration" field.</summary>
    public const int TotalOutputDurationFieldNumber = 3;
    private ulong totalOutputDuration_;
    /// <summary>
    /// total output use duration(nanoseconds) -> kernel: ip_finish_output2 - ip_output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalOutputDuration {
      get { return totalOutputDuration_; }
      set {
        totalOutputDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalResolveMACCount" field.</summary>
    public const int TotalResolveMACCountFieldNumber = 5;
    private ulong totalResolveMACCount_;
    /// <summary>
    /// total resolve remote MAC address(ARP Request) count and duration(nanosecond) -> kernel: neigh_resolve_output
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalResolveMACCount {
      get { return totalResolveMACCount_; }
      set {
        totalResolveMACCount_ = value;
      }
    }

    /// <summary>Field number for the "totalResolveMACDuration" field.</summary>
    public const int TotalResolveMACDurationFieldNumber = 6;
    private ulong totalResolveMACDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalResolveMACDuration {
      get { return totalResolveMACDuration_; }
      set {
        totalResolveMACDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalNetFilterCount" field.</summary>
    public const int TotalNetFilterCountFieldNumber = 7;
    private ulong totalNetFilterCount_;
    /// <summary>
    /// total netfiltering count and duration(nanosecond) -> kernel: nf_hook
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalNetFilterCount {
      get { return totalNetFilterCount_; }
      set {
        totalNetFilterCount_ = value;
      }
    }

    /// <summary>Field number for the "totalNetFilterDuration" field.</summary>
    public const int TotalNetFilterDurationFieldNumber = 8;
    private ulong totalNetFilterDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalNetFilterDuration {
      get { return totalNetFilterDuration_; }
      set {
        totalNetFilterDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelWriteL3Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelWriteL3Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDuration != other.TotalDuration) return false;
      if (TotalLocalDuration != other.TotalLocalDuration) return false;
      if (TotalOutputDuration != other.TotalOutputDuration) return false;
      if (TotalResolveMACCount != other.TotalResolveMACCount) return false;
      if (TotalResolveMACDuration != other.TotalResolveMACDuration) return false;
      if (TotalNetFilterCount != other.TotalNetFilterCount) return false;
      if (TotalNetFilterDuration != other.TotalNetFilterDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDuration != 0UL) hash ^= TotalDuration.GetHashCode();
      if (TotalLocalDuration != 0UL) hash ^= TotalLocalDuration.GetHashCode();
      if (TotalOutputDuration != 0UL) hash ^= TotalOutputDuration.GetHashCode();
      if (TotalResolveMACCount != 0UL) hash ^= TotalResolveMACCount.GetHashCode();
      if (TotalResolveMACDuration != 0UL) hash ^= TotalResolveMACDuration.GetHashCode();
      if (TotalNetFilterCount != 0UL) hash ^= TotalNetFilterCount.GetHashCode();
      if (TotalNetFilterDuration != 0UL) hash ^= TotalNetFilterDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalLocalDuration != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalLocalDuration);
      }
      if (TotalOutputDuration != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalOutputDuration);
      }
      if (TotalResolveMACCount != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalResolveMACCount);
      }
      if (TotalResolveMACDuration != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TotalResolveMACDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalLocalDuration != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalLocalDuration);
      }
      if (TotalOutputDuration != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalOutputDuration);
      }
      if (TotalResolveMACCount != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalResolveMACCount);
      }
      if (TotalResolveMACDuration != 0UL) {
        output.WriteRawTag(48);
        output.WriteUInt64(TotalResolveMACDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        output.WriteRawTag(56);
        output.WriteUInt64(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        output.WriteRawTag(64);
        output.WriteUInt64(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDuration);
      }
      if (TotalLocalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalLocalDuration);
      }
      if (TotalOutputDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalOutputDuration);
      }
      if (TotalResolveMACCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalResolveMACCount);
      }
      if (TotalResolveMACDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalResolveMACDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelWriteL3Metrics other) {
      if (other == null) {
        return;
      }
      if (other.TotalDuration != 0UL) {
        TotalDuration = other.TotalDuration;
      }
      if (other.TotalLocalDuration != 0UL) {
        TotalLocalDuration = other.TotalLocalDuration;
      }
      if (other.TotalOutputDuration != 0UL) {
        TotalOutputDuration = other.TotalOutputDuration;
      }
      if (other.TotalResolveMACCount != 0UL) {
        TotalResolveMACCount = other.TotalResolveMACCount;
      }
      if (other.TotalResolveMACDuration != 0UL) {
        TotalResolveMACDuration = other.TotalResolveMACDuration;
      }
      if (other.TotalNetFilterCount != 0UL) {
        TotalNetFilterCount = other.TotalNetFilterCount;
      }
      if (other.TotalNetFilterDuration != 0UL) {
        TotalNetFilterDuration = other.TotalNetFilterDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalLocalDuration = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalOutputDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalResolveMACCount = input.ReadUInt64();
            break;
          }
          case 48: {
            TotalResolveMACDuration = input.ReadUInt64();
            break;
          }
          case 56: {
            TotalNetFilterCount = input.ReadUInt64();
            break;
          }
          case 64: {
            TotalNetFilterDuration = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalLocalDuration = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalOutputDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalResolveMACCount = input.ReadUInt64();
            break;
          }
          case 48: {
            TotalResolveMACDuration = input.ReadUInt64();
            break;
          }
          case 56: {
            TotalNetFilterCount = input.ReadUInt64();
            break;
          }
          case 64: {
            TotalNetFilterDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelWriteL2Metrics : pb::IMessage<AccessLogKernelWriteL2Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelWriteL2Metrics> _parser = new pb::MessageParser<AccessLogKernelWriteL2Metrics>(() => new AccessLogKernelWriteL2Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelWriteL2Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[22]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL2Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL2Metrics(AccessLogKernelWriteL2Metrics other) : this() {
      totalDuration_ = other.totalDuration_;
      ifindex_ = other.ifindex_;
      totalEnterQueueBufferCount_ = other.totalEnterQueueBufferCount_;
      totalReadySendDuration_ = other.totalReadySendDuration_;
      totalNetDeviceSendDuration_ = other.totalNetDeviceSendDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelWriteL2Metrics Clone() {
      return new AccessLogKernelWriteL2Metrics(this);
    }

    /// <summary>Field number for the "totalDuration" field.</summary>
    public const int TotalDurationFieldNumber = 1;
    private ulong totalDuration_;
    /// <summary>
    /// total duration(nanosecond) of layer 2
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    /// <summary>Field number for the "ifindex" field.</summary>
    public const int IfindexFieldNumber = 2;
    private uint ifindex_;
    /// <summary>
    /// target network hardware interface index, get the net hardware name through EBPFAccessLogNodeNetInterface#index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ifindex {
      get { return ifindex_; }
      set {
        ifindex_ = value;
      }
    }

    /// <summary>Field number for the "totalEnterQueueBufferCount" field.</summary>
    public const int TotalEnterQueueBufferCountFieldNumber = 3;
    private ulong totalEnterQueueBufferCount_;
    /// <summary>
    /// total enter the net device buffer count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalEnterQueueBufferCount {
      get { return totalEnterQueueBufferCount_; }
      set {
        totalEnterQueueBufferCount_ = value;
      }
    }

    /// <summary>Field number for the "totalReadySendDuration" field.</summary>
    public const int TotalReadySendDurationFieldNumber = 4;
    private ulong totalReadySendDuration_;
    /// <summary>
    /// total buffer data ready to send duration(nanosecond), ready_to_send - enter_queue
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalReadySendDuration {
      get { return totalReadySendDuration_; }
      set {
        totalReadySendDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalNetDeviceSendDuration" field.</summary>
    public const int TotalNetDeviceSendDurationFieldNumber = 5;
    private ulong totalNetDeviceSendDuration_;
    /// <summary>
    /// total send buffer to the net device duration(nanosecond)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalNetDeviceSendDuration {
      get { return totalNetDeviceSendDuration_; }
      set {
        totalNetDeviceSendDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelWriteL2Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelWriteL2Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDuration != other.TotalDuration) return false;
      if (Ifindex != other.Ifindex) return false;
      if (TotalEnterQueueBufferCount != other.TotalEnterQueueBufferCount) return false;
      if (TotalReadySendDuration != other.TotalReadySendDuration) return false;
      if (TotalNetDeviceSendDuration != other.TotalNetDeviceSendDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDuration != 0UL) hash ^= TotalDuration.GetHashCode();
      if (Ifindex != 0) hash ^= Ifindex.GetHashCode();
      if (TotalEnterQueueBufferCount != 0UL) hash ^= TotalEnterQueueBufferCount.GetHashCode();
      if (TotalReadySendDuration != 0UL) hash ^= TotalReadySendDuration.GetHashCode();
      if (TotalNetDeviceSendDuration != 0UL) hash ^= TotalNetDeviceSendDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (Ifindex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ifindex);
      }
      if (TotalEnterQueueBufferCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalEnterQueueBufferCount);
      }
      if (TotalReadySendDuration != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalReadySendDuration);
      }
      if (TotalNetDeviceSendDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalNetDeviceSendDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (Ifindex != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Ifindex);
      }
      if (TotalEnterQueueBufferCount != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalEnterQueueBufferCount);
      }
      if (TotalReadySendDuration != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalReadySendDuration);
      }
      if (TotalNetDeviceSendDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalNetDeviceSendDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDuration);
      }
      if (Ifindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ifindex);
      }
      if (TotalEnterQueueBufferCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalEnterQueueBufferCount);
      }
      if (TotalReadySendDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalReadySendDuration);
      }
      if (TotalNetDeviceSendDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNetDeviceSendDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelWriteL2Metrics other) {
      if (other == null) {
        return;
      }
      if (other.TotalDuration != 0UL) {
        TotalDuration = other.TotalDuration;
      }
      if (other.Ifindex != 0) {
        Ifindex = other.Ifindex;
      }
      if (other.TotalEnterQueueBufferCount != 0UL) {
        TotalEnterQueueBufferCount = other.TotalEnterQueueBufferCount;
      }
      if (other.TotalReadySendDuration != 0UL) {
        TotalReadySendDuration = other.TotalReadySendDuration;
      }
      if (other.TotalNetDeviceSendDuration != 0UL) {
        TotalNetDeviceSendDuration = other.TotalNetDeviceSendDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            Ifindex = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalEnterQueueBufferCount = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalReadySendDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalNetDeviceSendDuration = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            Ifindex = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalEnterQueueBufferCount = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalReadySendDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalNetDeviceSendDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelReadOperation : pb::IMessage<AccessLogKernelReadOperation>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelReadOperation> _parser = new pb::MessageParser<AccessLogKernelReadOperation>(() => new AccessLogKernelReadOperation());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelReadOperation> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[23]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadOperation() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadOperation(AccessLogKernelReadOperation other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      syscall_ = other.syscall_;
      l2Metrics_ = other.l2Metrics_ != null ? other.l2Metrics_.Clone() : null;
      l3Metrics_ = other.l3Metrics_ != null ? other.l3Metrics_.Clone() : null;
      l4Metrics_ = other.l4Metrics_ != null ? other.l4Metrics_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadOperation Clone() {
      return new AccessLogKernelReadOperation(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::Skywalking.V3.EBPFTimestamp startTime_;
    /// <summary>
    /// Starting to read data timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 2;
    private global::Skywalking.V3.EBPFTimestamp endTime_;
    /// <summary>
    /// Finish read operation timestamp
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFTimestamp EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "syscall" field.</summary>
    public const int SyscallFieldNumber = 3;
    private global::Skywalking.V3.AccessLogKernelReadSyscall syscall_ = global::Skywalking.V3.AccessLogKernelReadSyscall.Read;
    /// <summary>
    /// Which kind of syscall of current read operation
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelReadSyscall Syscall {
      get { return syscall_; }
      set {
        syscall_ = value;
      }
    }

    /// <summary>Field number for the "l2Metrics" field.</summary>
    public const int L2MetricsFieldNumber = 4;
    private global::Skywalking.V3.AccessLogKernelReadL2Metrics l2Metrics_;
    /// <summary>
    /// Layer 2-4 related metrics
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelReadL2Metrics L2Metrics {
      get { return l2Metrics_; }
      set {
        l2Metrics_ = value;
      }
    }

    /// <summary>Field number for the "l3Metrics" field.</summary>
    public const int L3MetricsFieldNumber = 5;
    private global::Skywalking.V3.AccessLogKernelReadL3Metrics l3Metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelReadL3Metrics L3Metrics {
      get { return l3Metrics_; }
      set {
        l3Metrics_ = value;
      }
    }

    /// <summary>Field number for the "l4Metrics" field.</summary>
    public const int L4MetricsFieldNumber = 6;
    private global::Skywalking.V3.AccessLogKernelReadL4Metrics l4Metrics_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.AccessLogKernelReadL4Metrics L4Metrics {
      get { return l4Metrics_; }
      set {
        l4Metrics_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelReadOperation);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelReadOperation other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if (Syscall != other.Syscall) return false;
      if (!object.Equals(L2Metrics, other.L2Metrics)) return false;
      if (!object.Equals(L3Metrics, other.L3Metrics)) return false;
      if (!object.Equals(L4Metrics, other.L4Metrics)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      if (Syscall != global::Skywalking.V3.AccessLogKernelReadSyscall.Read) hash ^= Syscall.GetHashCode();
      if (l2Metrics_ != null) hash ^= L2Metrics.GetHashCode();
      if (l3Metrics_ != null) hash ^= L3Metrics.GetHashCode();
      if (l4Metrics_ != null) hash ^= L4Metrics.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelReadSyscall.Read) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Syscall);
      }
      if (l2Metrics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(L2Metrics);
      }
      if (l3Metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(L3Metrics);
      }
      if (l4Metrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(L4Metrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (endTime_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelReadSyscall.Read) {
        output.WriteRawTag(24);
        output.WriteEnum((int) Syscall);
      }
      if (l2Metrics_ != null) {
        output.WriteRawTag(34);
        output.WriteMessage(L2Metrics);
      }
      if (l3Metrics_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(L3Metrics);
      }
      if (l4Metrics_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(L4Metrics);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      if (Syscall != global::Skywalking.V3.AccessLogKernelReadSyscall.Read) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Syscall);
      }
      if (l2Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L2Metrics);
      }
      if (l3Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L3Metrics);
      }
      if (l4Metrics_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(L4Metrics);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelReadOperation other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::Skywalking.V3.EBPFTimestamp();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      if (other.Syscall != global::Skywalking.V3.AccessLogKernelReadSyscall.Read) {
        Syscall = other.Syscall;
      }
      if (other.l2Metrics_ != null) {
        if (l2Metrics_ == null) {
          L2Metrics = new global::Skywalking.V3.AccessLogKernelReadL2Metrics();
        }
        L2Metrics.MergeFrom(other.L2Metrics);
      }
      if (other.l3Metrics_ != null) {
        if (l3Metrics_ == null) {
          L3Metrics = new global::Skywalking.V3.AccessLogKernelReadL3Metrics();
        }
        L3Metrics.MergeFrom(other.L3Metrics);
      }
      if (other.l4Metrics_ != null) {
        if (l4Metrics_ == null) {
          L4Metrics = new global::Skywalking.V3.AccessLogKernelReadL4Metrics();
        }
        L4Metrics.MergeFrom(other.L4Metrics);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Syscall = (global::Skywalking.V3.AccessLogKernelReadSyscall) input.ReadEnum();
            break;
          }
          case 34: {
            if (l2Metrics_ == null) {
              L2Metrics = new global::Skywalking.V3.AccessLogKernelReadL2Metrics();
            }
            input.ReadMessage(L2Metrics);
            break;
          }
          case 42: {
            if (l3Metrics_ == null) {
              L3Metrics = new global::Skywalking.V3.AccessLogKernelReadL3Metrics();
            }
            input.ReadMessage(L3Metrics);
            break;
          }
          case 50: {
            if (l4Metrics_ == null) {
              L4Metrics = new global::Skywalking.V3.AccessLogKernelReadL4Metrics();
            }
            input.ReadMessage(L4Metrics);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            if (endTime_ == null) {
              EndTime = new global::Skywalking.V3.EBPFTimestamp();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 24: {
            Syscall = (global::Skywalking.V3.AccessLogKernelReadSyscall) input.ReadEnum();
            break;
          }
          case 34: {
            if (l2Metrics_ == null) {
              L2Metrics = new global::Skywalking.V3.AccessLogKernelReadL2Metrics();
            }
            input.ReadMessage(L2Metrics);
            break;
          }
          case 42: {
            if (l3Metrics_ == null) {
              L3Metrics = new global::Skywalking.V3.AccessLogKernelReadL3Metrics();
            }
            input.ReadMessage(L3Metrics);
            break;
          }
          case 50: {
            if (l4Metrics_ == null) {
              L4Metrics = new global::Skywalking.V3.AccessLogKernelReadL4Metrics();
            }
            input.ReadMessage(L4Metrics);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelReadL2Metrics : pb::IMessage<AccessLogKernelReadL2Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelReadL2Metrics> _parser = new pb::MessageParser<AccessLogKernelReadL2Metrics>(() => new AccessLogKernelReadL2Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelReadL2Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[24]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL2Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL2Metrics(AccessLogKernelReadL2Metrics other) : this() {
      ifindex_ = other.ifindex_;
      totalPackageCount_ = other.totalPackageCount_;
      totalPackageSize_ = other.totalPackageSize_;
      totalPackageToQueueDuration_ = other.totalPackageToQueueDuration_;
      totalRcvPackageFromQueueDuration_ = other.totalRcvPackageFromQueueDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL2Metrics Clone() {
      return new AccessLogKernelReadL2Metrics(this);
    }

    /// <summary>Field number for the "ifindex" field.</summary>
    public const int IfindexFieldNumber = 1;
    private uint ifindex_;
    /// <summary>
    /// from network hardware interface index, get the net hardware name through EBPFAccessLogNodeNetInterface#index
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Ifindex {
      get { return ifindex_; }
      set {
        ifindex_ = value;
      }
    }

    /// <summary>Field number for the "totalPackageCount" field.</summary>
    public const int TotalPackageCountFieldNumber = 2;
    private uint totalPackageCount_;
    /// <summary>
    /// total package count
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TotalPackageCount {
      get { return totalPackageCount_; }
      set {
        totalPackageCount_ = value;
      }
    }

    /// <summary>Field number for the "totalPackageSize" field.</summary>
    public const int TotalPackageSizeFieldNumber = 3;
    private ulong totalPackageSize_;
    /// <summary>
    /// total package size
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalPackageSize {
      get { return totalPackageSize_; }
      set {
        totalPackageSize_ = value;
      }
    }

    /// <summary>Field number for the "totalPackageToQueueDuration" field.</summary>
    public const int TotalPackageToQueueDurationFieldNumber = 4;
    private ulong totalPackageToQueueDuration_;
    /// <summary>
    /// total duration(nanosecond) of all data packets queued (waiting to be read).
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalPackageToQueueDuration {
      get { return totalPackageToQueueDuration_; }
      set {
        totalPackageToQueueDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalRcvPackageFromQueueDuration" field.</summary>
    public const int TotalRcvPackageFromQueueDurationFieldNumber = 5;
    private ulong totalRcvPackageFromQueueDuration_;
    /// <summary>
    /// total duration(nanosecond) of all data packets read from the queue.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalRcvPackageFromQueueDuration {
      get { return totalRcvPackageFromQueueDuration_; }
      set {
        totalRcvPackageFromQueueDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelReadL2Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelReadL2Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Ifindex != other.Ifindex) return false;
      if (TotalPackageCount != other.TotalPackageCount) return false;
      if (TotalPackageSize != other.TotalPackageSize) return false;
      if (TotalPackageToQueueDuration != other.TotalPackageToQueueDuration) return false;
      if (TotalRcvPackageFromQueueDuration != other.TotalRcvPackageFromQueueDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Ifindex != 0) hash ^= Ifindex.GetHashCode();
      if (TotalPackageCount != 0) hash ^= TotalPackageCount.GetHashCode();
      if (TotalPackageSize != 0UL) hash ^= TotalPackageSize.GetHashCode();
      if (TotalPackageToQueueDuration != 0UL) hash ^= TotalPackageToQueueDuration.GetHashCode();
      if (TotalRcvPackageFromQueueDuration != 0UL) hash ^= TotalRcvPackageFromQueueDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Ifindex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ifindex);
      }
      if (TotalPackageCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalPackageCount);
      }
      if (TotalPackageSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalPackageSize);
      }
      if (TotalPackageToQueueDuration != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalPackageToQueueDuration);
      }
      if (TotalRcvPackageFromQueueDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalRcvPackageFromQueueDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Ifindex != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Ifindex);
      }
      if (TotalPackageCount != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TotalPackageCount);
      }
      if (TotalPackageSize != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalPackageSize);
      }
      if (TotalPackageToQueueDuration != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalPackageToQueueDuration);
      }
      if (TotalRcvPackageFromQueueDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalRcvPackageFromQueueDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Ifindex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Ifindex);
      }
      if (TotalPackageCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPackageCount);
      }
      if (TotalPackageSize != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalPackageSize);
      }
      if (TotalPackageToQueueDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalPackageToQueueDuration);
      }
      if (TotalRcvPackageFromQueueDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalRcvPackageFromQueueDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelReadL2Metrics other) {
      if (other == null) {
        return;
      }
      if (other.Ifindex != 0) {
        Ifindex = other.Ifindex;
      }
      if (other.TotalPackageCount != 0) {
        TotalPackageCount = other.TotalPackageCount;
      }
      if (other.TotalPackageSize != 0UL) {
        TotalPackageSize = other.TotalPackageSize;
      }
      if (other.TotalPackageToQueueDuration != 0UL) {
        TotalPackageToQueueDuration = other.TotalPackageToQueueDuration;
      }
      if (other.TotalRcvPackageFromQueueDuration != 0UL) {
        TotalRcvPackageFromQueueDuration = other.TotalRcvPackageFromQueueDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Ifindex = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalPackageCount = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalPackageSize = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalPackageToQueueDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalRcvPackageFromQueueDuration = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Ifindex = input.ReadUInt32();
            break;
          }
          case 16: {
            TotalPackageCount = input.ReadUInt32();
            break;
          }
          case 24: {
            TotalPackageSize = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalPackageToQueueDuration = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalRcvPackageFromQueueDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelReadL3Metrics : pb::IMessage<AccessLogKernelReadL3Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelReadL3Metrics> _parser = new pb::MessageParser<AccessLogKernelReadL3Metrics>(() => new AccessLogKernelReadL3Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelReadL3Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[25]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL3Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL3Metrics(AccessLogKernelReadL3Metrics other) : this() {
      totalDuration_ = other.totalDuration_;
      totalRecvDuration_ = other.totalRecvDuration_;
      totalLocalDuration_ = other.totalLocalDuration_;
      totalNetFilterCount_ = other.totalNetFilterCount_;
      totalNetFilterDuration_ = other.totalNetFilterDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL3Metrics Clone() {
      return new AccessLogKernelReadL3Metrics(this);
    }

    /// <summary>Field number for the "totalDuration" field.</summary>
    public const int TotalDurationFieldNumber = 1;
    private ulong totalDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalRecvDuration" field.</summary>
    public const int TotalRecvDurationFieldNumber = 2;
    private ulong totalRecvDuration_;
    /// <summary>
    /// total local receive use duration(nanoseconds) -> kernel: ip_rcv_finish - ip_rcv
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalRecvDuration {
      get { return totalRecvDuration_; }
      set {
        totalRecvDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalLocalDuration" field.</summary>
    public const int TotalLocalDurationFieldNumber = 3;
    private ulong totalLocalDuration_;
    /// <summary>
    /// total local use duration(nanoseconds) -> kernel: ip_local_deliver_finish - ip_local_deliver
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalLocalDuration {
      get { return totalLocalDuration_; }
      set {
        totalLocalDuration_ = value;
      }
    }

    /// <summary>Field number for the "totalNetFilterCount" field.</summary>
    public const int TotalNetFilterCountFieldNumber = 4;
    private ulong totalNetFilterCount_;
    /// <summary>
    /// total netfiltering count and duration(nanosecond) -> kernel: nf_hook
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalNetFilterCount {
      get { return totalNetFilterCount_; }
      set {
        totalNetFilterCount_ = value;
      }
    }

    /// <summary>Field number for the "totalNetFilterDuration" field.</summary>
    public const int TotalNetFilterDurationFieldNumber = 5;
    private ulong totalNetFilterDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalNetFilterDuration {
      get { return totalNetFilterDuration_; }
      set {
        totalNetFilterDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelReadL3Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelReadL3Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDuration != other.TotalDuration) return false;
      if (TotalRecvDuration != other.TotalRecvDuration) return false;
      if (TotalLocalDuration != other.TotalLocalDuration) return false;
      if (TotalNetFilterCount != other.TotalNetFilterCount) return false;
      if (TotalNetFilterDuration != other.TotalNetFilterDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDuration != 0UL) hash ^= TotalDuration.GetHashCode();
      if (TotalRecvDuration != 0UL) hash ^= TotalRecvDuration.GetHashCode();
      if (TotalLocalDuration != 0UL) hash ^= TotalLocalDuration.GetHashCode();
      if (TotalNetFilterCount != 0UL) hash ^= TotalNetFilterCount.GetHashCode();
      if (TotalNetFilterDuration != 0UL) hash ^= TotalNetFilterDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalRecvDuration != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalRecvDuration);
      }
      if (TotalLocalDuration != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalLocalDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (TotalRecvDuration != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(TotalRecvDuration);
      }
      if (TotalLocalDuration != 0UL) {
        output.WriteRawTag(24);
        output.WriteUInt64(TotalLocalDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        output.WriteRawTag(32);
        output.WriteUInt64(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        output.WriteRawTag(40);
        output.WriteUInt64(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDuration);
      }
      if (TotalRecvDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalRecvDuration);
      }
      if (TotalLocalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalLocalDuration);
      }
      if (TotalNetFilterCount != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNetFilterCount);
      }
      if (TotalNetFilterDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalNetFilterDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelReadL3Metrics other) {
      if (other == null) {
        return;
      }
      if (other.TotalDuration != 0UL) {
        TotalDuration = other.TotalDuration;
      }
      if (other.TotalRecvDuration != 0UL) {
        TotalRecvDuration = other.TotalRecvDuration;
      }
      if (other.TotalLocalDuration != 0UL) {
        TotalLocalDuration = other.TotalLocalDuration;
      }
      if (other.TotalNetFilterCount != 0UL) {
        TotalNetFilterCount = other.TotalNetFilterCount;
      }
      if (other.TotalNetFilterDuration != 0UL) {
        TotalNetFilterDuration = other.TotalNetFilterDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalRecvDuration = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalLocalDuration = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalNetFilterCount = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalNetFilterDuration = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
          case 16: {
            TotalRecvDuration = input.ReadUInt64();
            break;
          }
          case 24: {
            TotalLocalDuration = input.ReadUInt64();
            break;
          }
          case 32: {
            TotalNetFilterCount = input.ReadUInt64();
            break;
          }
          case 40: {
            TotalNetFilterDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class AccessLogKernelReadL4Metrics : pb::IMessage<AccessLogKernelReadL4Metrics>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<AccessLogKernelReadL4Metrics> _parser = new pb::MessageParser<AccessLogKernelReadL4Metrics>(() => new AccessLogKernelReadL4Metrics());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<AccessLogKernelReadL4Metrics> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[26]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL4Metrics() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL4Metrics(AccessLogKernelReadL4Metrics other) : this() {
      totalDuration_ = other.totalDuration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public AccessLogKernelReadL4Metrics Clone() {
      return new AccessLogKernelReadL4Metrics(this);
    }

    /// <summary>Field number for the "totalDuration" field.</summary>
    public const int TotalDurationFieldNumber = 1;
    private ulong totalDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong TotalDuration {
      get { return totalDuration_; }
      set {
        totalDuration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as AccessLogKernelReadL4Metrics);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(AccessLogKernelReadL4Metrics other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TotalDuration != other.TotalDuration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TotalDuration != 0UL) hash ^= TotalDuration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TotalDuration != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(TotalDuration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TotalDuration != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(TotalDuration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(AccessLogKernelReadL4Metrics other) {
      if (other == null) {
        return;
      }
      if (other.TotalDuration != 0UL) {
        TotalDuration = other.TotalDuration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            TotalDuration = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFTimestamp : pb::IMessage<EBPFTimestamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFTimestamp> _parser = new pb::MessageParser<EBPFTimestamp>(() => new EBPFTimestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFTimestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[27]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFTimestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFTimestamp(EBPFTimestamp other) : this() {
      switch (other.TimestampCase) {
        case TimestampOneofCase.Offset:
          Offset = other.Offset.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFTimestamp Clone() {
      return new EBPFTimestamp(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFOffsetTimestamp Offset {
      get { return timestampCase_ == TimestampOneofCase.Offset ? (global::Skywalking.V3.EBPFOffsetTimestamp) timestamp_ : null; }
      set {
        timestamp_ = value;
        timestampCase_ = value == null ? TimestampOneofCase.None : TimestampOneofCase.Offset;
      }
    }

    private object timestamp_;
    /// <summary>Enum of possible cases for the "timestamp" oneof.</summary>
    public enum TimestampOneofCase {
      None = 0,
      Offset = 1,
    }
    private TimestampOneofCase timestampCase_ = TimestampOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TimestampOneofCase TimestampCase {
      get { return timestampCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTimestamp() {
      timestampCase_ = TimestampOneofCase.None;
      timestamp_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFTimestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFTimestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Offset, other.Offset)) return false;
      if (TimestampCase != other.TimestampCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (timestampCase_ == TimestampOneofCase.Offset) hash ^= Offset.GetHashCode();
      hash ^= (int) timestampCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (timestampCase_ == TimestampOneofCase.Offset) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (timestampCase_ == TimestampOneofCase.Offset) {
        output.WriteRawTag(10);
        output.WriteMessage(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (timestampCase_ == TimestampOneofCase.Offset) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFTimestamp other) {
      if (other == null) {
        return;
      }
      switch (other.TimestampCase) {
        case TimestampOneofCase.Offset:
          if (Offset == null) {
            Offset = new global::Skywalking.V3.EBPFOffsetTimestamp();
          }
          Offset.MergeFrom(other.Offset);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Skywalking.V3.EBPFOffsetTimestamp subBuilder = new global::Skywalking.V3.EBPFOffsetTimestamp();
            if (timestampCase_ == TimestampOneofCase.Offset) {
              subBuilder.MergeFrom(Offset);
            }
            input.ReadMessage(subBuilder);
            Offset = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Skywalking.V3.EBPFOffsetTimestamp subBuilder = new global::Skywalking.V3.EBPFOffsetTimestamp();
            if (timestampCase_ == TimestampOneofCase.Offset) {
              subBuilder.MergeFrom(Offset);
            }
            input.ReadMessage(subBuilder);
            Offset = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Get nanosecond through offset with node start instant
  /// </summary>
  public sealed partial class EBPFOffsetTimestamp : pb::IMessage<EBPFOffsetTimestamp>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFOffsetTimestamp> _parser = new pb::MessageParser<EBPFOffsetTimestamp>(() => new EBPFOffsetTimestamp());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFOffsetTimestamp> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[28]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffsetTimestamp() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffsetTimestamp(EBPFOffsetTimestamp other) : this() {
      offset_ = other.offset_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffsetTimestamp Clone() {
      return new EBPFOffsetTimestamp(this);
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 1;
    private ulong offset_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ulong Offset {
      get { return offset_; }
      set {
        offset_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFOffsetTimestamp);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFOffsetTimestamp other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Offset != other.Offset) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Offset != 0UL) hash ^= Offset.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Offset != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Offset != 0UL) {
        output.WriteRawTag(8);
        output.WriteUInt64(Offset);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Offset != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(Offset);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFOffsetTimestamp other) {
      if (other == null) {
        return;
      }
      if (other.Offset != 0UL) {
        Offset = other.Offset;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Offset = input.ReadUInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFAccessLogDownstream : pb::IMessage<EBPFAccessLogDownstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFAccessLogDownstream> _parser = new pb::MessageParser<EBPFAccessLogDownstream>(() => new EBPFAccessLogDownstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFAccessLogDownstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.AccesslogReflection.Descriptor.MessageTypes[29]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogDownstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogDownstream(EBPFAccessLogDownstream other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFAccessLogDownstream Clone() {
      return new EBPFAccessLogDownstream(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFAccessLogDownstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFAccessLogDownstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFAccessLogDownstream other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
