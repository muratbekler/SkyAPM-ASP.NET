// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ebpf/profiling/Profile.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Skywalking.V3 {

  /// <summary>Holder for reflection information generated from ebpf/profiling/Profile.proto</summary>
  public static partial class ProfileReflection {

    #region Descriptor
    /// <summary>File descriptor for ebpf/profiling/Profile.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProfileReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxlYnBmL3Byb2ZpbGluZy9Qcm9maWxlLnByb3RvEg1za3l3YWxraW5nLnYz",
            "GhRjb21tb24vQ29tbWFuZC5wcm90byJLChZFQlBGUHJvZmlsaW5nVGFza1F1",
            "ZXJ5EhcKD3JvdmVySW5zdGFuY2VJZBgBIAEoCRIYChBsYXRlc3RVcGRhdGVU",
            "aW1lGAIgASgDIsIBChFFQlBGUHJvZmlsaW5nRGF0YRI2CgR0YXNrGAEgASgL",
            "Miguc2t5d2Fsa2luZy52My5FQlBGUHJvZmlsaW5nVGFza01ldGFkYXRhEjIK",
            "BW9uQ1BVGAIgASgLMiEuc2t5d2Fsa2luZy52My5FQlBGT25DUFVQcm9maWxp",
            "bmdIABI0CgZvZmZDUFUYAyABKAsyIi5za3l3YWxraW5nLnYzLkVCUEZPZmZD",
            "UFVQcm9maWxpbmdIAEILCglwcm9maWxpbmcibwoZRUJQRlByb2ZpbGluZ1Rh",
            "c2tNZXRhZGF0YRIOCgZ0YXNrSWQYASABKAkSEQoJcHJvY2Vzc0lkGAIgASgJ",
            "EhoKEnByb2ZpbGluZ1N0YXJ0VGltZRgDIAEoAxITCgtjdXJyZW50VGltZRgE",
            "IAEoAyJ9ChpFQlBGUHJvZmlsaW5nU3RhY2tNZXRhZGF0YRI4CglzdGFja1R5",
            "cGUYASABKA4yJS5za3l3YWxraW5nLnYzLkVCUEZQcm9maWxpbmdTdGFja1R5",
            "cGUSDwoHc3RhY2tJZBgCIAEoBRIUCgxzdGFja1N5bWJvbHMYAyADKAkiYgoS",
            "RUJQRk9uQ1BVUHJvZmlsaW5nEjkKBnN0YWNrcxgBIAMoCzIpLnNreXdhbGtp",
            "bmcudjMuRUJQRlByb2ZpbGluZ1N0YWNrTWV0YWRhdGESEQoJZHVtcENvdW50",
            "GAIgASgFIncKE0VCUEZPZmZDUFVQcm9maWxpbmcSOQoGc3RhY2tzGAEgAygL",
            "Mikuc2t5d2Fsa2luZy52My5FQlBGUHJvZmlsaW5nU3RhY2tNZXRhZGF0YRIT",
            "Cgtzd2l0Y2hDb3VudBgCIAEoBRIQCghkdXJhdGlvbhgDIAEoAypKChZFQlBG",
            "UHJvZmlsaW5nU3RhY2tUeXBlEhgKFFBST0NFU1NfS0VSTkVMX1NQQUNFEAAS",
            "FgoSUFJPQ0VTU19VU0VSX1NQQUNFEAEyvQEKFEVCUEZQcm9maWxpbmdTZXJ2",
            "aWNlEk4KCnF1ZXJ5VGFza3MSJS5za3l3YWxraW5nLnYzLkVCUEZQcm9maWxp",
            "bmdUYXNrUXVlcnkaFy5za3l3YWxraW5nLnYzLkNvbW1hbmRzIgASVQoUY29s",
            "bGVjdFByb2ZpbGluZ0RhdGESIC5za3l3YWxraW5nLnYzLkVCUEZQcm9maWxp",
            "bmdEYXRhGhcuc2t5d2Fsa2luZy52My5Db21tYW5kcyIAKAFCcwozb3JnLmFw",
            "YWNoZS5za3l3YWxraW5nLmFwbS5uZXR3b3JrLmVicGYucHJvZmlsaW5nLnYz",
            "UAFaOnNreXdhbGtpbmcuYXBhY2hlLm9yZy9yZXBvL2dvYXBpL2NvbGxlY3Qv",
            "ZWJwZi9wcm9maWxpbmcvdjNiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Skywalking.V3.EBPFProfilingStackType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProfilingTaskQuery), global::Skywalking.V3.EBPFProfilingTaskQuery.Parser, new[]{ "RoverInstanceId", "LatestUpdateTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProfilingData), global::Skywalking.V3.EBPFProfilingData.Parser, new[]{ "Task", "OnCPU", "OffCPU" }, new[]{ "Profiling" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProfilingTaskMetadata), global::Skywalking.V3.EBPFProfilingTaskMetadata.Parser, new[]{ "TaskId", "ProcessId", "ProfilingStartTime", "CurrentTime" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProfilingStackMetadata), global::Skywalking.V3.EBPFProfilingStackMetadata.Parser, new[]{ "StackType", "StackId", "StackSymbols" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFOnCPUProfiling), global::Skywalking.V3.EBPFOnCPUProfiling.Parser, new[]{ "Stacks", "DumpCount" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFOffCPUProfiling), global::Skywalking.V3.EBPFOffCPUProfiling.Parser, new[]{ "Stacks", "SwitchCount", "Duration" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum EBPFProfilingStackType {
    [pbr::OriginalName("PROCESS_KERNEL_SPACE")] ProcessKernelSpace = 0,
    [pbr::OriginalName("PROCESS_USER_SPACE")] ProcessUserSpace = 1,
  }

  #endregion

  #region Messages
  public sealed partial class EBPFProfilingTaskQuery : pb::IMessage<EBPFProfilingTaskQuery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProfilingTaskQuery> _parser = new pb::MessageParser<EBPFProfilingTaskQuery>(() => new EBPFProfilingTaskQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProfilingTaskQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskQuery(EBPFProfilingTaskQuery other) : this() {
      roverInstanceId_ = other.roverInstanceId_;
      latestUpdateTime_ = other.latestUpdateTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskQuery Clone() {
      return new EBPFProfilingTaskQuery(this);
    }

    /// <summary>Field number for the "roverInstanceId" field.</summary>
    public const int RoverInstanceIdFieldNumber = 1;
    private string roverInstanceId_ = "";
    /// <summary>
    /// rover instance id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string RoverInstanceId {
      get { return roverInstanceId_; }
      set {
        roverInstanceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "latestUpdateTime" field.</summary>
    public const int LatestUpdateTimeFieldNumber = 2;
    private long latestUpdateTime_;
    /// <summary>
    /// latest task update time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long LatestUpdateTime {
      get { return latestUpdateTime_; }
      set {
        latestUpdateTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProfilingTaskQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProfilingTaskQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RoverInstanceId != other.RoverInstanceId) return false;
      if (LatestUpdateTime != other.LatestUpdateTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RoverInstanceId.Length != 0) hash ^= RoverInstanceId.GetHashCode();
      if (LatestUpdateTime != 0L) hash ^= LatestUpdateTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RoverInstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoverInstanceId);
      }
      if (LatestUpdateTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LatestUpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RoverInstanceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoverInstanceId);
      }
      if (LatestUpdateTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(LatestUpdateTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RoverInstanceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoverInstanceId);
      }
      if (LatestUpdateTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LatestUpdateTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProfilingTaskQuery other) {
      if (other == null) {
        return;
      }
      if (other.RoverInstanceId.Length != 0) {
        RoverInstanceId = other.RoverInstanceId;
      }
      if (other.LatestUpdateTime != 0L) {
        LatestUpdateTime = other.LatestUpdateTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            RoverInstanceId = input.ReadString();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            RoverInstanceId = input.ReadString();
            break;
          }
          case 16: {
            LatestUpdateTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProfilingData : pb::IMessage<EBPFProfilingData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProfilingData> _parser = new pb::MessageParser<EBPFProfilingData>(() => new EBPFProfilingData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProfilingData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingData(EBPFProfilingData other) : this() {
      task_ = other.task_ != null ? other.task_.Clone() : null;
      switch (other.ProfilingCase) {
        case ProfilingOneofCase.OnCPU:
          OnCPU = other.OnCPU.Clone();
          break;
        case ProfilingOneofCase.OffCPU:
          OffCPU = other.OffCPU.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingData Clone() {
      return new EBPFProfilingData(this);
    }

    /// <summary>Field number for the "task" field.</summary>
    public const int TaskFieldNumber = 1;
    private global::Skywalking.V3.EBPFProfilingTaskMetadata task_;
    /// <summary>
    /// task metadata
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProfilingTaskMetadata Task {
      get { return task_; }
      set {
        task_ = value;
      }
    }

    /// <summary>Field number for the "onCPU" field.</summary>
    public const int OnCPUFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFOnCPUProfiling OnCPU {
      get { return profilingCase_ == ProfilingOneofCase.OnCPU ? (global::Skywalking.V3.EBPFOnCPUProfiling) profiling_ : null; }
      set {
        profiling_ = value;
        profilingCase_ = value == null ? ProfilingOneofCase.None : ProfilingOneofCase.OnCPU;
      }
    }

    /// <summary>Field number for the "offCPU" field.</summary>
    public const int OffCPUFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFOffCPUProfiling OffCPU {
      get { return profilingCase_ == ProfilingOneofCase.OffCPU ? (global::Skywalking.V3.EBPFOffCPUProfiling) profiling_ : null; }
      set {
        profiling_ = value;
        profilingCase_ = value == null ? ProfilingOneofCase.None : ProfilingOneofCase.OffCPU;
      }
    }

    private object profiling_;
    /// <summary>Enum of possible cases for the "profiling" oneof.</summary>
    public enum ProfilingOneofCase {
      None = 0,
      OnCPU = 2,
      OffCPU = 3,
    }
    private ProfilingOneofCase profilingCase_ = ProfilingOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProfilingOneofCase ProfilingCase {
      get { return profilingCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProfiling() {
      profilingCase_ = ProfilingOneofCase.None;
      profiling_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProfilingData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProfilingData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Task, other.Task)) return false;
      if (!object.Equals(OnCPU, other.OnCPU)) return false;
      if (!object.Equals(OffCPU, other.OffCPU)) return false;
      if (ProfilingCase != other.ProfilingCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (task_ != null) hash ^= Task.GetHashCode();
      if (profilingCase_ == ProfilingOneofCase.OnCPU) hash ^= OnCPU.GetHashCode();
      if (profilingCase_ == ProfilingOneofCase.OffCPU) hash ^= OffCPU.GetHashCode();
      hash ^= (int) profilingCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
      if (profilingCase_ == ProfilingOneofCase.OnCPU) {
        output.WriteRawTag(18);
        output.WriteMessage(OnCPU);
      }
      if (profilingCase_ == ProfilingOneofCase.OffCPU) {
        output.WriteRawTag(26);
        output.WriteMessage(OffCPU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (task_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Task);
      }
      if (profilingCase_ == ProfilingOneofCase.OnCPU) {
        output.WriteRawTag(18);
        output.WriteMessage(OnCPU);
      }
      if (profilingCase_ == ProfilingOneofCase.OffCPU) {
        output.WriteRawTag(26);
        output.WriteMessage(OffCPU);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (task_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Task);
      }
      if (profilingCase_ == ProfilingOneofCase.OnCPU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnCPU);
      }
      if (profilingCase_ == ProfilingOneofCase.OffCPU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffCPU);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProfilingData other) {
      if (other == null) {
        return;
      }
      if (other.task_ != null) {
        if (task_ == null) {
          Task = new global::Skywalking.V3.EBPFProfilingTaskMetadata();
        }
        Task.MergeFrom(other.Task);
      }
      switch (other.ProfilingCase) {
        case ProfilingOneofCase.OnCPU:
          if (OnCPU == null) {
            OnCPU = new global::Skywalking.V3.EBPFOnCPUProfiling();
          }
          OnCPU.MergeFrom(other.OnCPU);
          break;
        case ProfilingOneofCase.OffCPU:
          if (OffCPU == null) {
            OffCPU = new global::Skywalking.V3.EBPFOffCPUProfiling();
          }
          OffCPU.MergeFrom(other.OffCPU);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (task_ == null) {
              Task = new global::Skywalking.V3.EBPFProfilingTaskMetadata();
            }
            input.ReadMessage(Task);
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFOnCPUProfiling subBuilder = new global::Skywalking.V3.EBPFOnCPUProfiling();
            if (profilingCase_ == ProfilingOneofCase.OnCPU) {
              subBuilder.MergeFrom(OnCPU);
            }
            input.ReadMessage(subBuilder);
            OnCPU = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.EBPFOffCPUProfiling subBuilder = new global::Skywalking.V3.EBPFOffCPUProfiling();
            if (profilingCase_ == ProfilingOneofCase.OffCPU) {
              subBuilder.MergeFrom(OffCPU);
            }
            input.ReadMessage(subBuilder);
            OffCPU = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (task_ == null) {
              Task = new global::Skywalking.V3.EBPFProfilingTaskMetadata();
            }
            input.ReadMessage(Task);
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFOnCPUProfiling subBuilder = new global::Skywalking.V3.EBPFOnCPUProfiling();
            if (profilingCase_ == ProfilingOneofCase.OnCPU) {
              subBuilder.MergeFrom(OnCPU);
            }
            input.ReadMessage(subBuilder);
            OnCPU = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.EBPFOffCPUProfiling subBuilder = new global::Skywalking.V3.EBPFOffCPUProfiling();
            if (profilingCase_ == ProfilingOneofCase.OffCPU) {
              subBuilder.MergeFrom(OffCPU);
            }
            input.ReadMessage(subBuilder);
            OffCPU = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProfilingTaskMetadata : pb::IMessage<EBPFProfilingTaskMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProfilingTaskMetadata> _parser = new pb::MessageParser<EBPFProfilingTaskMetadata>(() => new EBPFProfilingTaskMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProfilingTaskMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskMetadata(EBPFProfilingTaskMetadata other) : this() {
      taskId_ = other.taskId_;
      processId_ = other.processId_;
      profilingStartTime_ = other.profilingStartTime_;
      currentTime_ = other.currentTime_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingTaskMetadata Clone() {
      return new EBPFProfilingTaskMetadata(this);
    }

    /// <summary>Field number for the "taskId" field.</summary>
    public const int TaskIdFieldNumber = 1;
    private string taskId_ = "";
    /// <summary>
    /// profiling task id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TaskId {
      get { return taskId_; }
      set {
        taskId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processId" field.</summary>
    public const int ProcessIdFieldNumber = 2;
    private string processId_ = "";
    /// <summary>
    /// profiling process id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessId {
      get { return processId_; }
      set {
        processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "profilingStartTime" field.</summary>
    public const int ProfilingStartTimeFieldNumber = 3;
    private long profilingStartTime_;
    /// <summary>
    /// the start time of this profiling process
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ProfilingStartTime {
      get { return profilingStartTime_; }
      set {
        profilingStartTime_ = value;
      }
    }

    /// <summary>Field number for the "currentTime" field.</summary>
    public const int CurrentTimeFieldNumber = 4;
    private long currentTime_;
    /// <summary>
    /// report time
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long CurrentTime {
      get { return currentTime_; }
      set {
        currentTime_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProfilingTaskMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProfilingTaskMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TaskId != other.TaskId) return false;
      if (ProcessId != other.ProcessId) return false;
      if (ProfilingStartTime != other.ProfilingStartTime) return false;
      if (CurrentTime != other.CurrentTime) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TaskId.Length != 0) hash ^= TaskId.GetHashCode();
      if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
      if (ProfilingStartTime != 0L) hash ^= ProfilingStartTime.GetHashCode();
      if (CurrentTime != 0L) hash ^= CurrentTime.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (ProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProcessId);
      }
      if (ProfilingStartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ProfilingStartTime);
      }
      if (CurrentTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurrentTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TaskId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TaskId);
      }
      if (ProcessId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ProcessId);
      }
      if (ProfilingStartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(ProfilingStartTime);
      }
      if (CurrentTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(CurrentTime);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TaskId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TaskId);
      }
      if (ProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
      }
      if (ProfilingStartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ProfilingStartTime);
      }
      if (CurrentTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CurrentTime);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProfilingTaskMetadata other) {
      if (other == null) {
        return;
      }
      if (other.TaskId.Length != 0) {
        TaskId = other.TaskId;
      }
      if (other.ProcessId.Length != 0) {
        ProcessId = other.ProcessId;
      }
      if (other.ProfilingStartTime != 0L) {
        ProfilingStartTime = other.ProfilingStartTime;
      }
      if (other.CurrentTime != 0L) {
        CurrentTime = other.CurrentTime;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            ProcessId = input.ReadString();
            break;
          }
          case 24: {
            ProfilingStartTime = input.ReadInt64();
            break;
          }
          case 32: {
            CurrentTime = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TaskId = input.ReadString();
            break;
          }
          case 18: {
            ProcessId = input.ReadString();
            break;
          }
          case 24: {
            ProfilingStartTime = input.ReadInt64();
            break;
          }
          case 32: {
            CurrentTime = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProfilingStackMetadata : pb::IMessage<EBPFProfilingStackMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProfilingStackMetadata> _parser = new pb::MessageParser<EBPFProfilingStackMetadata>(() => new EBPFProfilingStackMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProfilingStackMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingStackMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingStackMetadata(EBPFProfilingStackMetadata other) : this() {
      stackType_ = other.stackType_;
      stackId_ = other.stackId_;
      stackSymbols_ = other.stackSymbols_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProfilingStackMetadata Clone() {
      return new EBPFProfilingStackMetadata(this);
    }

    /// <summary>Field number for the "stackType" field.</summary>
    public const int StackTypeFieldNumber = 1;
    private global::Skywalking.V3.EBPFProfilingStackType stackType_ = global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace;
    /// <summary>
    /// stack type
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProfilingStackType StackType {
      get { return stackType_; }
      set {
        stackType_ = value;
      }
    }

    /// <summary>Field number for the "stackId" field.</summary>
    public const int StackIdFieldNumber = 2;
    private int stackId_;
    /// <summary>
    /// stack id from kernel provide
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int StackId {
      get { return stackId_; }
      set {
        stackId_ = value;
      }
    }

    /// <summary>Field number for the "stackSymbols" field.</summary>
    public const int StackSymbolsFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_stackSymbols_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> stackSymbols_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// stack symbols
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> StackSymbols {
      get { return stackSymbols_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProfilingStackMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProfilingStackMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (StackType != other.StackType) return false;
      if (StackId != other.StackId) return false;
      if(!stackSymbols_.Equals(other.stackSymbols_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (StackType != global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace) hash ^= StackType.GetHashCode();
      if (StackId != 0) hash ^= StackId.GetHashCode();
      hash ^= stackSymbols_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (StackType != global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StackType);
      }
      if (StackId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StackId);
      }
      stackSymbols_.WriteTo(output, _repeated_stackSymbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (StackType != global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace) {
        output.WriteRawTag(8);
        output.WriteEnum((int) StackType);
      }
      if (StackId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(StackId);
      }
      stackSymbols_.WriteTo(ref output, _repeated_stackSymbols_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (StackType != global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) StackType);
      }
      if (StackId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StackId);
      }
      size += stackSymbols_.CalculateSize(_repeated_stackSymbols_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProfilingStackMetadata other) {
      if (other == null) {
        return;
      }
      if (other.StackType != global::Skywalking.V3.EBPFProfilingStackType.ProcessKernelSpace) {
        StackType = other.StackType;
      }
      if (other.StackId != 0) {
        StackId = other.StackId;
      }
      stackSymbols_.Add(other.stackSymbols_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            StackType = (global::Skywalking.V3.EBPFProfilingStackType) input.ReadEnum();
            break;
          }
          case 16: {
            StackId = input.ReadInt32();
            break;
          }
          case 26: {
            stackSymbols_.AddEntriesFrom(input, _repeated_stackSymbols_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            StackType = (global::Skywalking.V3.EBPFProfilingStackType) input.ReadEnum();
            break;
          }
          case 16: {
            StackId = input.ReadInt32();
            break;
          }
          case 26: {
            stackSymbols_.AddEntriesFrom(ref input, _repeated_stackSymbols_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFOnCPUProfiling : pb::IMessage<EBPFOnCPUProfiling>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFOnCPUProfiling> _parser = new pb::MessageParser<EBPFOnCPUProfiling>(() => new EBPFOnCPUProfiling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFOnCPUProfiling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOnCPUProfiling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOnCPUProfiling(EBPFOnCPUProfiling other) : this() {
      stacks_ = other.stacks_.Clone();
      dumpCount_ = other.dumpCount_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOnCPUProfiling Clone() {
      return new EBPFOnCPUProfiling(this);
    }

    /// <summary>Field number for the "stacks" field.</summary>
    public const int StacksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFProfilingStackMetadata> _repeated_stacks_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.EBPFProfilingStackMetadata.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata> stacks_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata>();
    /// <summary>
    /// stack data in one task(thread)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata> Stacks {
      get { return stacks_; }
    }

    /// <summary>Field number for the "dumpCount" field.</summary>
    public const int DumpCountFieldNumber = 2;
    private int dumpCount_;
    /// <summary>
    /// stack counts
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int DumpCount {
      get { return dumpCount_; }
      set {
        dumpCount_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFOnCPUProfiling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFOnCPUProfiling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stacks_.Equals(other.stacks_)) return false;
      if (DumpCount != other.DumpCount) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stacks_.GetHashCode();
      if (DumpCount != 0) hash ^= DumpCount.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stacks_.WriteTo(output, _repeated_stacks_codec);
      if (DumpCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DumpCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stacks_.WriteTo(ref output, _repeated_stacks_codec);
      if (DumpCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(DumpCount);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stacks_.CalculateSize(_repeated_stacks_codec);
      if (DumpCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DumpCount);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFOnCPUProfiling other) {
      if (other == null) {
        return;
      }
      stacks_.Add(other.stacks_);
      if (other.DumpCount != 0) {
        DumpCount = other.DumpCount;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stacks_.AddEntriesFrom(input, _repeated_stacks_codec);
            break;
          }
          case 16: {
            DumpCount = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            stacks_.AddEntriesFrom(ref input, _repeated_stacks_codec);
            break;
          }
          case 16: {
            DumpCount = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFOffCPUProfiling : pb::IMessage<EBPFOffCPUProfiling>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFOffCPUProfiling> _parser = new pb::MessageParser<EBPFOffCPUProfiling>(() => new EBPFOffCPUProfiling());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFOffCPUProfiling> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProfileReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffCPUProfiling() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffCPUProfiling(EBPFOffCPUProfiling other) : this() {
      stacks_ = other.stacks_.Clone();
      switchCount_ = other.switchCount_;
      duration_ = other.duration_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFOffCPUProfiling Clone() {
      return new EBPFOffCPUProfiling(this);
    }

    /// <summary>Field number for the "stacks" field.</summary>
    public const int StacksFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFProfilingStackMetadata> _repeated_stacks_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.EBPFProfilingStackMetadata.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata> stacks_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata>();
    /// <summary>
    /// stack data in one task(thread)
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFProfilingStackMetadata> Stacks {
      get { return stacks_; }
    }

    /// <summary>Field number for the "switchCount" field.</summary>
    public const int SwitchCountFieldNumber = 2;
    private int switchCount_;
    /// <summary>
    /// total count of the process is switched to off cpu by the scheduler.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SwitchCount {
      get { return switchCount_; }
      set {
        switchCount_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 3;
    private long duration_;
    /// <summary>
    /// where time(nanoseconds) is spent waiting while blocked on I/O, locks, timers, paging/swapping, etc.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFOffCPUProfiling);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFOffCPUProfiling other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!stacks_.Equals(other.stacks_)) return false;
      if (SwitchCount != other.SwitchCount) return false;
      if (Duration != other.Duration) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= stacks_.GetHashCode();
      if (SwitchCount != 0) hash ^= SwitchCount.GetHashCode();
      if (Duration != 0L) hash ^= Duration.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      stacks_.WriteTo(output, _repeated_stacks_codec);
      if (SwitchCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SwitchCount);
      }
      if (Duration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      stacks_.WriteTo(ref output, _repeated_stacks_codec);
      if (SwitchCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(SwitchCount);
      }
      if (Duration != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(Duration);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += stacks_.CalculateSize(_repeated_stacks_codec);
      if (SwitchCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SwitchCount);
      }
      if (Duration != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Duration);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFOffCPUProfiling other) {
      if (other == null) {
        return;
      }
      stacks_.Add(other.stacks_);
      if (other.SwitchCount != 0) {
        SwitchCount = other.SwitchCount;
      }
      if (other.Duration != 0L) {
        Duration = other.Duration;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            stacks_.AddEntriesFrom(input, _repeated_stacks_codec);
            break;
          }
          case 16: {
            SwitchCount = input.ReadInt32();
            break;
          }
          case 24: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            stacks_.AddEntriesFrom(ref input, _repeated_stacks_codec);
            break;
          }
          case 16: {
            SwitchCount = input.ReadInt32();
            break;
          }
          case 24: {
            Duration = input.ReadInt64();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
