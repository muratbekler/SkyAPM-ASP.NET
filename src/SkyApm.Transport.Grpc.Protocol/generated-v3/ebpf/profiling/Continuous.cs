// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ebpf/profiling/Continuous.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Skywalking.V3 {

  /// <summary>Holder for reflection information generated from ebpf/profiling/Continuous.proto</summary>
  public static partial class ContinuousReflection {

    #region Descriptor
    /// <summary>File descriptor for ebpf/profiling/Continuous.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ContinuousReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch9lYnBmL3Byb2ZpbGluZy9Db250aW51b3VzLnByb3RvEg1za3l3YWxraW5n",
            "LnYzGhRjb21tb24vQ29tbWFuZC5wcm90byJoCh5Db250aW51b3VzUHJvZmls",
            "aW5nUG9saWN5UXVlcnkSRgoIcG9saWNpZXMYASADKAsyNC5za3l3YWxraW5n",
            "LnYzLkNvbnRpbnVvdXNQcm9maWxpbmdTZXJ2aWNlUG9saWN5UXVlcnkiSgol",
            "Q29udGludW91c1Byb2ZpbGluZ1NlcnZpY2VQb2xpY3lRdWVyeRITCgtzZXJ2",
            "aWNlTmFtZRgBIAEoCRIMCgR1dWlkGAIgASgJIoMDChlDb250aW51b3VzUHJv",
            "ZmlsaW5nUmVwb3J0Eg0KBWxheWVyGAEgASgJEhMKC3NlcnZpY2VOYW1lGAIg",
            "ASgJEhQKDGluc3RhbmNlTmFtZRgDIAEoCRITCgtwcm9jZXNzTmFtZRgEIAEo",
            "CRI3CgZjYXVzZXMYBSADKAsyJy5za3l3YWxraW5nLnYzLkNvbnRpbnVvdXNQ",
            "cm9maWxpbmdDYXVzZRIQCghkdXJhdGlvbhgGIAEoBRI8CgVvbkNQVRgHIAEo",
            "CzIrLnNreXdhbGtpbmcudjMuQ29udGludW91c09uQ1BVUHJvZmlsaW5nVGFz",
            "a0gAEj4KBm9mZkNQVRgIIAEoCzIsLnNreXdhbGtpbmcudjMuQ29udGludW91",
            "c09mZkNQVVByb2ZpbGluZ1Rhc2tIABJACgduZXR3b3JrGAkgASgLMi0uc2t5",
            "d2Fsa2luZy52My5Db250aW51b3VzTmV0d29ya1Byb2ZpbGluZ1Rhc2tIAEIM",
            "Cgp0YXJnZXRUYXNrIu8BChhDb250aW51b3VzUHJvZmlsaW5nQ2F1c2USRAoE",
            "dHlwZRgBIAEoDjI2LnNreXdhbGtpbmcudjMuQ29udGludW91c1Byb2ZpbGlu",
            "Z1RyaWdnZXJlZE1vbml0b3JUeXBlEkkKC3NpbmdsZVZhbHVlGAIgASgLMjIu",
            "c2t5d2Fsa2luZy52My5Db250aW51b3VzUHJvZmlsaW5nU2luZ2xlVmFsdWVD",
            "YXVzZUgAEjkKA3VyaRgDIAEoCzIqLnNreXdhbGtpbmcudjMuQ29udGludW91",
            "c1Byb2ZpbGluZ1VSSUNhdXNlSABCBwoFY2F1c2UiSQojQ29udGludW91c1By",
            "b2ZpbGluZ1NpbmdsZVZhbHVlQ2F1c2USEQoJdGhyZXNob2xkGAEgASgBEg8K",
            "B2N1cnJlbnQYAiABKAEiaQobQ29udGludW91c1Byb2ZpbGluZ1VSSUNhdXNl",
            "Eg8KBXJlZ2V4GAEgASgJSAASDgoEcGF0aBgCIAEoCUgAEhEKCXRocmVzaG9s",
            "ZBgDIAEoARIPCgdjdXJyZW50GAQgASgBQgUKA3VyaSIeChxDb250aW51b3Vz",
            "T25DUFVQcm9maWxpbmdUYXNrIh8KHUNvbnRpbnVvdXNPZmZDUFVQcm9maWxp",
            "bmdUYXNrIjwKHkNvbnRpbnVvdXNOZXR3b3JrUHJvZmlsaW5nVGFzaxIaChJz",
            "YW1wbGluZ1VSSVJlZ2V4ZXMYASADKAkqjQEKJ0NvbnRpbnVvdXNQcm9maWxp",
            "bmdUcmlnZ2VyZWRNb25pdG9yVHlwZRIOCgpQcm9jZXNzQ1BVEAASFgoSUHJv",
            "Y2Vzc1RocmVhZENvdW50EAESDgoKU3lzdGVtTG9hZBACEhEKDUhUVFBFcnJv",
            "clJhdGUQAxIXChNIVFRQQXZnUmVzcG9uc2VUaW1lEAQy0wEKGkNvbnRpbnVv",
            "dXNQcm9maWxpbmdTZXJ2aWNlElkKDXF1ZXJ5UG9saWNpZXMSLS5za3l3YWxr",
            "aW5nLnYzLkNvbnRpbnVvdXNQcm9maWxpbmdQb2xpY3lRdWVyeRoXLnNreXdh",
            "bGtpbmcudjMuQ29tbWFuZHMiABJaChNyZXBvcnRQcm9maWxpbmdUYXNrEigu",
            "c2t5d2Fsa2luZy52My5Db250aW51b3VzUHJvZmlsaW5nUmVwb3J0Ghcuc2t5",
            "d2Fsa2luZy52My5Db21tYW5kcyIAQnMKM29yZy5hcGFjaGUuc2t5d2Fsa2lu",
            "Zy5hcG0ubmV0d29yay5lYnBmLnByb2ZpbGluZy52M1ABWjpza3l3YWxraW5n",
            "LmFwYWNoZS5vcmcvcmVwby9nb2FwaS9jb2xsZWN0L2VicGYvcHJvZmlsaW5n",
            "L3YzYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingPolicyQuery), global::Skywalking.V3.ContinuousProfilingPolicyQuery.Parser, new[]{ "Policies" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingServicePolicyQuery), global::Skywalking.V3.ContinuousProfilingServicePolicyQuery.Parser, new[]{ "ServiceName", "Uuid" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingReport), global::Skywalking.V3.ContinuousProfilingReport.Parser, new[]{ "Layer", "ServiceName", "InstanceName", "ProcessName", "Causes", "Duration", "OnCPU", "OffCPU", "Network" }, new[]{ "TargetTask" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingCause), global::Skywalking.V3.ContinuousProfilingCause.Parser, new[]{ "Type", "SingleValue", "Uri" }, new[]{ "Cause" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingSingleValueCause), global::Skywalking.V3.ContinuousProfilingSingleValueCause.Parser, new[]{ "Threshold", "Current" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousProfilingURICause), global::Skywalking.V3.ContinuousProfilingURICause.Parser, new[]{ "Regex", "Path", "Threshold", "Current" }, new[]{ "Uri" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousOnCPUProfilingTask), global::Skywalking.V3.ContinuousOnCPUProfilingTask.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousOffCPUProfilingTask), global::Skywalking.V3.ContinuousOffCPUProfilingTask.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.ContinuousNetworkProfilingTask), global::Skywalking.V3.ContinuousNetworkProfilingTask.Parser, new[]{ "SamplingURIRegexes" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  public enum ContinuousProfilingTriggeredMonitorType {
    /// <summary>
    /// Current process CPU usage percent(0-100).
    /// </summary>
    [pbr::OriginalName("ProcessCPU")] ProcessCpu = 0,
    /// <summary>
    /// The number of threads in the process.
    /// </summary>
    [pbr::OriginalName("ProcessThreadCount")] ProcessThreadCount = 1,
    /// <summary>
    /// System load value.
    /// </summary>
    [pbr::OriginalName("SystemLoad")] SystemLoad = 2,
    /// <summary>
    /// Process response error rate(0-100).
    /// HTTP response codes in [500-600) are considered errors.
    /// Formula: ErrorCount / TotalCount * 100
    /// </summary>
    [pbr::OriginalName("HTTPErrorRate")] HttperrorRate = 3,
    /// <summary>
    /// Process response average time(ms).
    /// Formula: TotalResponseTime(ms) / TotalCount
    /// </summary>
    [pbr::OriginalName("HTTPAvgResponseTime")] HttpavgResponseTime = 4,
  }

  #endregion

  #region Messages
  public sealed partial class ContinuousProfilingPolicyQuery : pb::IMessage<ContinuousProfilingPolicyQuery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingPolicyQuery> _parser = new pb::MessageParser<ContinuousProfilingPolicyQuery>(() => new ContinuousProfilingPolicyQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingPolicyQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingPolicyQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingPolicyQuery(ContinuousProfilingPolicyQuery other) : this() {
      policies_ = other.policies_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingPolicyQuery Clone() {
      return new ContinuousProfilingPolicyQuery(this);
    }

    /// <summary>Field number for the "policies" field.</summary>
    public const int PoliciesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.ContinuousProfilingServicePolicyQuery> _repeated_policies_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.ContinuousProfilingServicePolicyQuery.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingServicePolicyQuery> policies_ = new pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingServicePolicyQuery>();
    /// <summary>
    /// current agent contains service and policies
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingServicePolicyQuery> Policies {
      get { return policies_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingPolicyQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingPolicyQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!policies_.Equals(other.policies_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= policies_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      policies_.WriteTo(output, _repeated_policies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      policies_.WriteTo(ref output, _repeated_policies_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += policies_.CalculateSize(_repeated_policies_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingPolicyQuery other) {
      if (other == null) {
        return;
      }
      policies_.Add(other.policies_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            policies_.AddEntriesFrom(input, _repeated_policies_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            policies_.AddEntriesFrom(ref input, _repeated_policies_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContinuousProfilingServicePolicyQuery : pb::IMessage<ContinuousProfilingServicePolicyQuery>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingServicePolicyQuery> _parser = new pb::MessageParser<ContinuousProfilingServicePolicyQuery>(() => new ContinuousProfilingServicePolicyQuery());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingServicePolicyQuery> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingServicePolicyQuery() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingServicePolicyQuery(ContinuousProfilingServicePolicyQuery other) : this() {
      serviceName_ = other.serviceName_;
      uuid_ = other.uuid_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingServicePolicyQuery Clone() {
      return new ContinuousProfilingServicePolicyQuery(this);
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 1;
    private string serviceName_ = "";
    /// <summary>
    /// service name of the each process
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    /// <summary>
    /// UUID represents the version(hash/shasum) of the current policies for the service.
    /// This is blank in the initialization stage and is set through the `ContinuousProfilingPolicyQuery` command response for the following rounds of queries.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingServicePolicyQuery);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingServicePolicyQuery other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ServiceName != other.ServiceName) return false;
      if (Uuid != other.Uuid) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ServiceName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ServiceName);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingServicePolicyQuery other) {
      if (other == null) {
        return;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ServiceName = input.ReadString();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContinuousProfilingReport : pb::IMessage<ContinuousProfilingReport>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingReport> _parser = new pb::MessageParser<ContinuousProfilingReport>(() => new ContinuousProfilingReport());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingReport> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingReport() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingReport(ContinuousProfilingReport other) : this() {
      layer_ = other.layer_;
      serviceName_ = other.serviceName_;
      instanceName_ = other.instanceName_;
      processName_ = other.processName_;
      causes_ = other.causes_.Clone();
      duration_ = other.duration_;
      switch (other.TargetTaskCase) {
        case TargetTaskOneofCase.OnCPU:
          OnCPU = other.OnCPU.Clone();
          break;
        case TargetTaskOneofCase.OffCPU:
          OffCPU = other.OffCPU.Clone();
          break;
        case TargetTaskOneofCase.Network:
          Network = other.Network.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingReport Clone() {
      return new ContinuousProfilingReport(this);
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 1;
    private string layer_ = "";
    /// <summary>
    /// over threshold process entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Layer {
      get { return layer_; }
      set {
        layer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instanceName" field.</summary>
    public const int InstanceNameFieldNumber = 3;
    private string instanceName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceName {
      get { return instanceName_; }
      set {
        instanceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processName" field.</summary>
    public const int ProcessNameFieldNumber = 4;
    private string processName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "causes" field.</summary>
    public const int CausesFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Skywalking.V3.ContinuousProfilingCause> _repeated_causes_codec
        = pb::FieldCodec.ForMessage(42, global::Skywalking.V3.ContinuousProfilingCause.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingCause> causes_ = new pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingCause>();
    /// <summary>
    /// reached thresholds causes
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.ContinuousProfilingCause> Causes {
      get { return causes_; }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 6;
    private int duration_;
    /// <summary>
    /// The execution duration for this triggered profiling.
    /// This is set at the agent side.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "onCPU" field.</summary>
    public const int OnCPUFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousOnCPUProfilingTask OnCPU {
      get { return targetTaskCase_ == TargetTaskOneofCase.OnCPU ? (global::Skywalking.V3.ContinuousOnCPUProfilingTask) targetTask_ : null; }
      set {
        targetTask_ = value;
        targetTaskCase_ = value == null ? TargetTaskOneofCase.None : TargetTaskOneofCase.OnCPU;
      }
    }

    /// <summary>Field number for the "offCPU" field.</summary>
    public const int OffCPUFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousOffCPUProfilingTask OffCPU {
      get { return targetTaskCase_ == TargetTaskOneofCase.OffCPU ? (global::Skywalking.V3.ContinuousOffCPUProfilingTask) targetTask_ : null; }
      set {
        targetTask_ = value;
        targetTaskCase_ = value == null ? TargetTaskOneofCase.None : TargetTaskOneofCase.OffCPU;
      }
    }

    /// <summary>Field number for the "network" field.</summary>
    public const int NetworkFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousNetworkProfilingTask Network {
      get { return targetTaskCase_ == TargetTaskOneofCase.Network ? (global::Skywalking.V3.ContinuousNetworkProfilingTask) targetTask_ : null; }
      set {
        targetTask_ = value;
        targetTaskCase_ = value == null ? TargetTaskOneofCase.None : TargetTaskOneofCase.Network;
      }
    }

    private object targetTask_;
    /// <summary>Enum of possible cases for the "targetTask" oneof.</summary>
    public enum TargetTaskOneofCase {
      None = 0,
      OnCPU = 7,
      OffCPU = 8,
      Network = 9,
    }
    private TargetTaskOneofCase targetTaskCase_ = TargetTaskOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TargetTaskOneofCase TargetTaskCase {
      get { return targetTaskCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearTargetTask() {
      targetTaskCase_ = TargetTaskOneofCase.None;
      targetTask_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingReport);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingReport other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Layer != other.Layer) return false;
      if (ServiceName != other.ServiceName) return false;
      if (InstanceName != other.InstanceName) return false;
      if (ProcessName != other.ProcessName) return false;
      if(!causes_.Equals(other.causes_)) return false;
      if (Duration != other.Duration) return false;
      if (!object.Equals(OnCPU, other.OnCPU)) return false;
      if (!object.Equals(OffCPU, other.OffCPU)) return false;
      if (!object.Equals(Network, other.Network)) return false;
      if (TargetTaskCase != other.TargetTaskCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Layer.Length != 0) hash ^= Layer.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (InstanceName.Length != 0) hash ^= InstanceName.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      hash ^= causes_.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) hash ^= OnCPU.GetHashCode();
      if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) hash ^= OffCPU.GetHashCode();
      if (targetTaskCase_ == TargetTaskOneofCase.Network) hash ^= Network.GetHashCode();
      hash ^= (int) targetTaskCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Layer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Layer);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (InstanceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstanceName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      causes_.WriteTo(output, _repeated_causes_codec);
      if (Duration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Duration);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) {
        output.WriteRawTag(58);
        output.WriteMessage(OnCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) {
        output.WriteRawTag(66);
        output.WriteMessage(OffCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.Network) {
        output.WriteRawTag(74);
        output.WriteMessage(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Layer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Layer);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (InstanceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstanceName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      causes_.WriteTo(ref output, _repeated_causes_codec);
      if (Duration != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Duration);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) {
        output.WriteRawTag(58);
        output.WriteMessage(OnCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) {
        output.WriteRawTag(66);
        output.WriteMessage(OffCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.Network) {
        output.WriteRawTag(74);
        output.WriteMessage(Network);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Layer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Layer);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (InstanceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceName);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      size += causes_.CalculateSize(_repeated_causes_codec);
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(OffCPU);
      }
      if (targetTaskCase_ == TargetTaskOneofCase.Network) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Network);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingReport other) {
      if (other == null) {
        return;
      }
      if (other.Layer.Length != 0) {
        Layer = other.Layer;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.InstanceName.Length != 0) {
        InstanceName = other.InstanceName;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      causes_.Add(other.causes_);
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      switch (other.TargetTaskCase) {
        case TargetTaskOneofCase.OnCPU:
          if (OnCPU == null) {
            OnCPU = new global::Skywalking.V3.ContinuousOnCPUProfilingTask();
          }
          OnCPU.MergeFrom(other.OnCPU);
          break;
        case TargetTaskOneofCase.OffCPU:
          if (OffCPU == null) {
            OffCPU = new global::Skywalking.V3.ContinuousOffCPUProfilingTask();
          }
          OffCPU.MergeFrom(other.OffCPU);
          break;
        case TargetTaskOneofCase.Network:
          if (Network == null) {
            Network = new global::Skywalking.V3.ContinuousNetworkProfilingTask();
          }
          Network.MergeFrom(other.Network);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Layer = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            InstanceName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 42: {
            causes_.AddEntriesFrom(input, _repeated_causes_codec);
            break;
          }
          case 48: {
            Duration = input.ReadInt32();
            break;
          }
          case 58: {
            global::Skywalking.V3.ContinuousOnCPUProfilingTask subBuilder = new global::Skywalking.V3.ContinuousOnCPUProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) {
              subBuilder.MergeFrom(OnCPU);
            }
            input.ReadMessage(subBuilder);
            OnCPU = subBuilder;
            break;
          }
          case 66: {
            global::Skywalking.V3.ContinuousOffCPUProfilingTask subBuilder = new global::Skywalking.V3.ContinuousOffCPUProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) {
              subBuilder.MergeFrom(OffCPU);
            }
            input.ReadMessage(subBuilder);
            OffCPU = subBuilder;
            break;
          }
          case 74: {
            global::Skywalking.V3.ContinuousNetworkProfilingTask subBuilder = new global::Skywalking.V3.ContinuousNetworkProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.Network) {
              subBuilder.MergeFrom(Network);
            }
            input.ReadMessage(subBuilder);
            Network = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Layer = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            InstanceName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 42: {
            causes_.AddEntriesFrom(ref input, _repeated_causes_codec);
            break;
          }
          case 48: {
            Duration = input.ReadInt32();
            break;
          }
          case 58: {
            global::Skywalking.V3.ContinuousOnCPUProfilingTask subBuilder = new global::Skywalking.V3.ContinuousOnCPUProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.OnCPU) {
              subBuilder.MergeFrom(OnCPU);
            }
            input.ReadMessage(subBuilder);
            OnCPU = subBuilder;
            break;
          }
          case 66: {
            global::Skywalking.V3.ContinuousOffCPUProfilingTask subBuilder = new global::Skywalking.V3.ContinuousOffCPUProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.OffCPU) {
              subBuilder.MergeFrom(OffCPU);
            }
            input.ReadMessage(subBuilder);
            OffCPU = subBuilder;
            break;
          }
          case 74: {
            global::Skywalking.V3.ContinuousNetworkProfilingTask subBuilder = new global::Skywalking.V3.ContinuousNetworkProfilingTask();
            if (targetTaskCase_ == TargetTaskOneofCase.Network) {
              subBuilder.MergeFrom(Network);
            }
            input.ReadMessage(subBuilder);
            Network = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContinuousProfilingCause : pb::IMessage<ContinuousProfilingCause>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingCause> _parser = new pb::MessageParser<ContinuousProfilingCause>(() => new ContinuousProfilingCause());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingCause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingCause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingCause(ContinuousProfilingCause other) : this() {
      type_ = other.type_;
      switch (other.CauseCase) {
        case CauseOneofCase.SingleValue:
          SingleValue = other.SingleValue.Clone();
          break;
        case CauseOneofCase.Uri:
          Uri = other.Uri.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingCause Clone() {
      return new ContinuousProfilingCause(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType type_ = global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "singleValue" field.</summary>
    public const int SingleValueFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousProfilingSingleValueCause SingleValue {
      get { return causeCase_ == CauseOneofCase.SingleValue ? (global::Skywalking.V3.ContinuousProfilingSingleValueCause) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.SingleValue;
      }
    }

    /// <summary>Field number for the "uri" field.</summary>
    public const int UriFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.ContinuousProfilingURICause Uri {
      get { return causeCase_ == CauseOneofCase.Uri ? (global::Skywalking.V3.ContinuousProfilingURICause) cause_ : null; }
      set {
        cause_ = value;
        causeCase_ = value == null ? CauseOneofCase.None : CauseOneofCase.Uri;
      }
    }

    private object cause_;
    /// <summary>Enum of possible cases for the "cause" oneof.</summary>
    public enum CauseOneofCase {
      None = 0,
      SingleValue = 2,
      Uri = 3,
    }
    private CauseOneofCase causeCase_ = CauseOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CauseOneofCase CauseCase {
      get { return causeCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearCause() {
      causeCase_ = CauseOneofCase.None;
      cause_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingCause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingCause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(SingleValue, other.SingleValue)) return false;
      if (!object.Equals(Uri, other.Uri)) return false;
      if (CauseCase != other.CauseCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu) hash ^= Type.GetHashCode();
      if (causeCase_ == CauseOneofCase.SingleValue) hash ^= SingleValue.GetHashCode();
      if (causeCase_ == CauseOneofCase.Uri) hash ^= Uri.GetHashCode();
      hash ^= (int) causeCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type != global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (causeCase_ == CauseOneofCase.SingleValue) {
        output.WriteRawTag(18);
        output.WriteMessage(SingleValue);
      }
      if (causeCase_ == CauseOneofCase.Uri) {
        output.WriteRawTag(26);
        output.WriteMessage(Uri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type != global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (causeCase_ == CauseOneofCase.SingleValue) {
        output.WriteRawTag(18);
        output.WriteMessage(SingleValue);
      }
      if (causeCase_ == CauseOneofCase.Uri) {
        output.WriteRawTag(26);
        output.WriteMessage(Uri);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (causeCase_ == CauseOneofCase.SingleValue) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SingleValue);
      }
      if (causeCase_ == CauseOneofCase.Uri) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Uri);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingCause other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType.ProcessCpu) {
        Type = other.Type;
      }
      switch (other.CauseCase) {
        case CauseOneofCase.SingleValue:
          if (SingleValue == null) {
            SingleValue = new global::Skywalking.V3.ContinuousProfilingSingleValueCause();
          }
          SingleValue.MergeFrom(other.SingleValue);
          break;
        case CauseOneofCase.Uri:
          if (Uri == null) {
            Uri = new global::Skywalking.V3.ContinuousProfilingURICause();
          }
          Uri.MergeFrom(other.Uri);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType) input.ReadEnum();
            break;
          }
          case 18: {
            global::Skywalking.V3.ContinuousProfilingSingleValueCause subBuilder = new global::Skywalking.V3.ContinuousProfilingSingleValueCause();
            if (causeCase_ == CauseOneofCase.SingleValue) {
              subBuilder.MergeFrom(SingleValue);
            }
            input.ReadMessage(subBuilder);
            SingleValue = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.ContinuousProfilingURICause subBuilder = new global::Skywalking.V3.ContinuousProfilingURICause();
            if (causeCase_ == CauseOneofCase.Uri) {
              subBuilder.MergeFrom(Uri);
            }
            input.ReadMessage(subBuilder);
            Uri = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Type = (global::Skywalking.V3.ContinuousProfilingTriggeredMonitorType) input.ReadEnum();
            break;
          }
          case 18: {
            global::Skywalking.V3.ContinuousProfilingSingleValueCause subBuilder = new global::Skywalking.V3.ContinuousProfilingSingleValueCause();
            if (causeCase_ == CauseOneofCase.SingleValue) {
              subBuilder.MergeFrom(SingleValue);
            }
            input.ReadMessage(subBuilder);
            SingleValue = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.ContinuousProfilingURICause subBuilder = new global::Skywalking.V3.ContinuousProfilingURICause();
            if (causeCase_ == CauseOneofCase.Uri) {
              subBuilder.MergeFrom(Uri);
            }
            input.ReadMessage(subBuilder);
            Uri = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContinuousProfilingSingleValueCause : pb::IMessage<ContinuousProfilingSingleValueCause>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingSingleValueCause> _parser = new pb::MessageParser<ContinuousProfilingSingleValueCause>(() => new ContinuousProfilingSingleValueCause());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingSingleValueCause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingSingleValueCause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingSingleValueCause(ContinuousProfilingSingleValueCause other) : this() {
      threshold_ = other.threshold_;
      current_ = other.current_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingSingleValueCause Clone() {
      return new ContinuousProfilingSingleValueCause(this);
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 1;
    private double threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 2;
    private double current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingSingleValueCause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingSingleValueCause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Current, other.Current)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Threshold != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Threshold);
      if (Current != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Current);
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Threshold != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Threshold);
      }
      if (Current != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Threshold != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(Threshold);
      }
      if (Current != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Threshold != 0D) {
        size += 1 + 8;
      }
      if (Current != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingSingleValueCause other) {
      if (other == null) {
        return;
      }
      if (other.Threshold != 0D) {
        Threshold = other.Threshold;
      }
      if (other.Current != 0D) {
        Current = other.Current;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 9: {
            Threshold = input.ReadDouble();
            break;
          }
          case 17: {
            Current = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 9: {
            Threshold = input.ReadDouble();
            break;
          }
          case 17: {
            Current = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class ContinuousProfilingURICause : pb::IMessage<ContinuousProfilingURICause>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousProfilingURICause> _parser = new pb::MessageParser<ContinuousProfilingURICause>(() => new ContinuousProfilingURICause());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousProfilingURICause> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingURICause() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingURICause(ContinuousProfilingURICause other) : this() {
      threshold_ = other.threshold_;
      current_ = other.current_;
      switch (other.UriCase) {
        case UriOneofCase.Regex:
          Regex = other.Regex;
          break;
        case UriOneofCase.Path:
          Path = other.Path;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousProfilingURICause Clone() {
      return new ContinuousProfilingURICause(this);
    }

    /// <summary>Field number for the "regex" field.</summary>
    public const int RegexFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Regex {
      get { return uriCase_ == UriOneofCase.Regex ? (string) uri_ : ""; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        uriCase_ = UriOneofCase.Regex;
      }
    }

    /// <summary>Field number for the "path" field.</summary>
    public const int PathFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Path {
      get { return uriCase_ == UriOneofCase.Path ? (string) uri_ : ""; }
      set {
        uri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        uriCase_ = UriOneofCase.Path;
      }
    }

    /// <summary>Field number for the "threshold" field.</summary>
    public const int ThresholdFieldNumber = 3;
    private double threshold_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Threshold {
      get { return threshold_; }
      set {
        threshold_ = value;
      }
    }

    /// <summary>Field number for the "current" field.</summary>
    public const int CurrentFieldNumber = 4;
    private double current_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public double Current {
      get { return current_; }
      set {
        current_ = value;
      }
    }

    private object uri_;
    /// <summary>Enum of possible cases for the "uri" oneof.</summary>
    public enum UriOneofCase {
      None = 0,
      Regex = 1,
      Path = 2,
    }
    private UriOneofCase uriCase_ = UriOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public UriOneofCase UriCase {
      get { return uriCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearUri() {
      uriCase_ = UriOneofCase.None;
      uri_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousProfilingURICause);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousProfilingURICause other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Regex != other.Regex) return false;
      if (Path != other.Path) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Threshold, other.Threshold)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(Current, other.Current)) return false;
      if (UriCase != other.UriCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (uriCase_ == UriOneofCase.Regex) hash ^= Regex.GetHashCode();
      if (uriCase_ == UriOneofCase.Path) hash ^= Path.GetHashCode();
      if (Threshold != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Threshold);
      if (Current != 0D) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(Current);
      hash ^= (int) uriCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (uriCase_ == UriOneofCase.Regex) {
        output.WriteRawTag(10);
        output.WriteString(Regex);
      }
      if (uriCase_ == UriOneofCase.Path) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Threshold != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Threshold);
      }
      if (Current != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (uriCase_ == UriOneofCase.Regex) {
        output.WriteRawTag(10);
        output.WriteString(Regex);
      }
      if (uriCase_ == UriOneofCase.Path) {
        output.WriteRawTag(18);
        output.WriteString(Path);
      }
      if (Threshold != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(Threshold);
      }
      if (Current != 0D) {
        output.WriteRawTag(33);
        output.WriteDouble(Current);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (uriCase_ == UriOneofCase.Regex) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Regex);
      }
      if (uriCase_ == UriOneofCase.Path) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Path);
      }
      if (Threshold != 0D) {
        size += 1 + 8;
      }
      if (Current != 0D) {
        size += 1 + 8;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousProfilingURICause other) {
      if (other == null) {
        return;
      }
      if (other.Threshold != 0D) {
        Threshold = other.Threshold;
      }
      if (other.Current != 0D) {
        Current = other.Current;
      }
      switch (other.UriCase) {
        case UriOneofCase.Regex:
          Regex = other.Regex;
          break;
        case UriOneofCase.Path:
          Path = other.Path;
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Regex = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 25: {
            Threshold = input.ReadDouble();
            break;
          }
          case 33: {
            Current = input.ReadDouble();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Regex = input.ReadString();
            break;
          }
          case 18: {
            Path = input.ReadString();
            break;
          }
          case 25: {
            Threshold = input.ReadDouble();
            break;
          }
          case 33: {
            Current = input.ReadDouble();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// eBPF on CPU profiling task
  /// </summary>
  public sealed partial class ContinuousOnCPUProfilingTask : pb::IMessage<ContinuousOnCPUProfilingTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousOnCPUProfilingTask> _parser = new pb::MessageParser<ContinuousOnCPUProfilingTask>(() => new ContinuousOnCPUProfilingTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousOnCPUProfilingTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOnCPUProfilingTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOnCPUProfilingTask(ContinuousOnCPUProfilingTask other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOnCPUProfilingTask Clone() {
      return new ContinuousOnCPUProfilingTask(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousOnCPUProfilingTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousOnCPUProfilingTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousOnCPUProfilingTask other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// eBPF off CPU profiling task
  /// </summary>
  public sealed partial class ContinuousOffCPUProfilingTask : pb::IMessage<ContinuousOffCPUProfilingTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousOffCPUProfilingTask> _parser = new pb::MessageParser<ContinuousOffCPUProfilingTask>(() => new ContinuousOffCPUProfilingTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousOffCPUProfilingTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOffCPUProfilingTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOffCPUProfilingTask(ContinuousOffCPUProfilingTask other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousOffCPUProfilingTask Clone() {
      return new ContinuousOffCPUProfilingTask(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousOffCPUProfilingTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousOffCPUProfilingTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousOffCPUProfilingTask other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
        }
      }
    }
    #endif

  }

  /// <summary>
  /// eBPF Network profiling task
  /// </summary>
  public sealed partial class ContinuousNetworkProfilingTask : pb::IMessage<ContinuousNetworkProfilingTask>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ContinuousNetworkProfilingTask> _parser = new pb::MessageParser<ContinuousNetworkProfilingTask>(() => new ContinuousNetworkProfilingTask());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ContinuousNetworkProfilingTask> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ContinuousReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousNetworkProfilingTask() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousNetworkProfilingTask(ContinuousNetworkProfilingTask other) : this() {
      samplingURIRegexes_ = other.samplingURIRegexes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContinuousNetworkProfilingTask Clone() {
      return new ContinuousNetworkProfilingTask(this);
    }

    /// <summary>Field number for the "samplingURIRegexes" field.</summary>
    public const int SamplingURIRegexesFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_samplingURIRegexes_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> samplingURIRegexes_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> SamplingURIRegexes {
      get { return samplingURIRegexes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ContinuousNetworkProfilingTask);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ContinuousNetworkProfilingTask other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!samplingURIRegexes_.Equals(other.samplingURIRegexes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= samplingURIRegexes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      samplingURIRegexes_.WriteTo(output, _repeated_samplingURIRegexes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      samplingURIRegexes_.WriteTo(ref output, _repeated_samplingURIRegexes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += samplingURIRegexes_.CalculateSize(_repeated_samplingURIRegexes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ContinuousNetworkProfilingTask other) {
      if (other == null) {
        return;
      }
      samplingURIRegexes_.Add(other.samplingURIRegexes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            samplingURIRegexes_.AddEntriesFrom(input, _repeated_samplingURIRegexes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            samplingURIRegexes_.AddEntriesFrom(ref input, _repeated_samplingURIRegexes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
