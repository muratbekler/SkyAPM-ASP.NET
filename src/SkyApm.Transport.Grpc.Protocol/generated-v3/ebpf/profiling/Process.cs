// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ebpf/profiling/Process.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Skywalking.V3 {

  /// <summary>Holder for reflection information generated from ebpf/profiling/Process.proto</summary>
  public static partial class ProcessReflection {

    #region Descriptor
    /// <summary>File descriptor for ebpf/profiling/Process.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ProcessReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxlYnBmL3Byb2ZpbGluZy9Qcm9jZXNzLnByb3RvEg1za3l3YWxraW5nLnYz",
            "GhNjb21tb24vQ29tbW9uLnByb3RvGhRjb21tb24vQ29tbWFuZC5wcm90byJl",
            "ChVFQlBGUHJvY2Vzc1JlcG9ydExpc3QSNwoJcHJvY2Vzc2VzGAEgAygLMiQu",
            "c2t5d2Fsa2luZy52My5FQlBGUHJvY2Vzc1Byb3BlcnRpZXMSEwoLZWJwZkFn",
            "ZW50SUQYAiABKAkipgEKFUVCUEZQcm9jZXNzUHJvcGVydGllcxI9Cgtob3N0",
            "UHJvY2VzcxgBIAEoCzImLnNreXdhbGtpbmcudjMuRUJQRkhvc3RQcm9jZXNz",
            "TWV0YWRhdGFIABJCCgprOHNQcm9jZXNzGAIgASgLMiwuc2t5d2Fsa2luZy52",
            "My5FQlBGS3ViZXJuZXRlc1Byb2Nlc3NNZXRhZGF0YUgAQgoKCG1ldGFkYXRh",
            "IpcBChdFQlBGSG9zdFByb2Nlc3NNZXRhZGF0YRI4CgZlbnRpdHkYASABKAsy",
            "KC5za3l3YWxraW5nLnYzLkVCUEZQcm9jZXNzRW50aXR5TWV0YWRhdGESCwoD",
            "cGlkGAIgASgFEjUKCnByb3BlcnRpZXMYAyADKAsyIS5za3l3YWxraW5nLnYz",
            "LktleVN0cmluZ1ZhbHVlUGFpciJ6ChlFQlBGUHJvY2Vzc0VudGl0eU1ldGFk",
            "YXRhEg0KBWxheWVyGAEgASgJEhMKC3NlcnZpY2VOYW1lGAIgASgJEhQKDGlu",
            "c3RhbmNlTmFtZRgDIAEoCRITCgtwcm9jZXNzTmFtZRgEIAEoCRIOCgZsYWJl",
            "bHMYBSADKAkinQEKHUVCUEZLdWJlcm5ldGVzUHJvY2Vzc01ldGFkYXRhEjgK",
            "BmVudGl0eRgBIAEoCzIoLnNreXdhbGtpbmcudjMuRUJQRlByb2Nlc3NFbnRp",
            "dHlNZXRhZGF0YRILCgNwaWQYAiABKAUSNQoKcHJvcGVydGllcxgDIAMoCzIh",
            "LnNreXdhbGtpbmcudjMuS2V5U3RyaW5nVmFsdWVQYWlyIlYKG0VCUEZSZXBv",
            "cnRQcm9jZXNzRG93bnN0cmVhbRI3Cglwcm9jZXNzZXMYASADKAsyJC5za3l3",
            "YWxraW5nLnYzLkVCUEZQcm9jZXNzRG93bnN0cmVhbSK8AQoVRUJQRlByb2Nl",
            "c3NEb3duc3RyZWFtEhEKCXByb2Nlc3NJZBgBIAEoCRI/Cgtob3N0UHJvY2Vz",
            "cxgCIAEoCzIoLnNreXdhbGtpbmcudjMuRUJQRkhvc3RQcm9jZXNzRG93bnN0",
            "cmVhbUgAEkQKCms4c1Byb2Nlc3MYAyABKAsyLi5za3l3YWxraW5nLnYzLkVC",
            "UEZLdWJlcm5ldGVzUHJvY2Vzc0Rvd25zdHJlYW1IAEIJCgdwcm9jZXNzImoK",
            "GUVCUEZIb3N0UHJvY2Vzc0Rvd25zdHJlYW0SCwoDcGlkGAEgASgFEkAKDmVu",
            "dGl0eU1ldGFkYXRhGAIgASgLMiguc2t5d2Fsa2luZy52My5FQlBGUHJvY2Vz",
            "c0VudGl0eU1ldGFkYXRhInAKH0VCUEZLdWJlcm5ldGVzUHJvY2Vzc0Rvd25z",
            "dHJlYW0SCwoDcGlkGAEgASgFEkAKDmVudGl0eU1ldGFkYXRhGAIgASgLMigu",
            "c2t5d2Fsa2luZy52My5FQlBGUHJvY2Vzc0VudGl0eU1ldGFkYXRhImMKFkVC",
            "UEZQcm9jZXNzUGluZ1BrZ0xpc3QSNAoJcHJvY2Vzc2VzGAEgAygLMiEuc2t5",
            "d2Fsa2luZy52My5FQlBGUHJvY2Vzc1BpbmdQa2cSEwoLZWJwZkFnZW50SUQY",
            "AiABKAkijQEKEkVCUEZQcm9jZXNzUGluZ1BrZxJACg5lbnRpdHlNZXRhZGF0",
            "YRgBIAEoCzIoLnNreXdhbGtpbmcudjMuRUJQRlByb2Nlc3NFbnRpdHlNZXRh",
            "ZGF0YRI1Cgpwcm9wZXJ0aWVzGAIgAygLMiEuc2t5d2Fsa2luZy52My5LZXlT",
            "dHJpbmdWYWx1ZVBhaXIyygEKEkVCUEZQcm9jZXNzU2VydmljZRJlCg9yZXBv",
            "cnRQcm9jZXNzZXMSJC5za3l3YWxraW5nLnYzLkVCUEZQcm9jZXNzUmVwb3J0",
            "TGlzdBoqLnNreXdhbGtpbmcudjMuRUJQRlJlcG9ydFByb2Nlc3NEb3duc3Ry",
            "ZWFtIgASTQoJa2VlcEFsaXZlEiUuc2t5d2Fsa2luZy52My5FQlBGUHJvY2Vz",
            "c1BpbmdQa2dMaXN0Ghcuc2t5d2Fsa2luZy52My5Db21tYW5kcyIAQoMBCjtv",
            "cmcuYXBhY2hlLnNreXdhbGtpbmcuYXBtLm5ldHdvcmsuZWJwZi5wcm9maWxp",
            "bmcucHJvY2Vzcy52M1ABWkJza3l3YWxraW5nLmFwYWNoZS5vcmcvcmVwby9n",
            "b2FwaS9jb2xsZWN0L2VicGYvcHJvZmlsaW5nL3Byb2Nlc3MvdjNiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, global::SkyWalking.NetworkProtocol.V3.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessReportList), global::Skywalking.V3.EBPFProcessReportList.Parser, new[]{ "Processes", "EbpfAgentID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessProperties), global::Skywalking.V3.EBPFProcessProperties.Parser, new[]{ "HostProcess", "K8SProcess" }, new[]{ "Metadata" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFHostProcessMetadata), global::Skywalking.V3.EBPFHostProcessMetadata.Parser, new[]{ "Entity", "Pid", "Properties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessEntityMetadata), global::Skywalking.V3.EBPFProcessEntityMetadata.Parser, new[]{ "Layer", "ServiceName", "InstanceName", "ProcessName", "Labels" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFKubernetesProcessMetadata), global::Skywalking.V3.EBPFKubernetesProcessMetadata.Parser, new[]{ "Entity", "Pid", "Properties" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFReportProcessDownstream), global::Skywalking.V3.EBPFReportProcessDownstream.Parser, new[]{ "Processes" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessDownstream), global::Skywalking.V3.EBPFProcessDownstream.Parser, new[]{ "ProcessId", "HostProcess", "K8SProcess" }, new[]{ "Process" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFHostProcessDownstream), global::Skywalking.V3.EBPFHostProcessDownstream.Parser, new[]{ "Pid", "EntityMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFKubernetesProcessDownstream), global::Skywalking.V3.EBPFKubernetesProcessDownstream.Parser, new[]{ "Pid", "EntityMetadata" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessPingPkgList), global::Skywalking.V3.EBPFProcessPingPkgList.Parser, new[]{ "Processes", "EbpfAgentID" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Skywalking.V3.EBPFProcessPingPkg), global::Skywalking.V3.EBPFProcessPingPkg.Parser, new[]{ "EntityMetadata", "Properties" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class EBPFProcessReportList : pb::IMessage<EBPFProcessReportList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessReportList> _parser = new pb::MessageParser<EBPFProcessReportList>(() => new EBPFProcessReportList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessReportList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessReportList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessReportList(EBPFProcessReportList other) : this() {
      processes_ = other.processes_.Clone();
      ebpfAgentID_ = other.ebpfAgentID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessReportList Clone() {
      return new EBPFProcessReportList(this);
    }

    /// <summary>Field number for the "processes" field.</summary>
    public const int ProcessesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFProcessProperties> _repeated_processes_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.EBPFProcessProperties.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFProcessProperties> processes_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFProcessProperties>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFProcessProperties> Processes {
      get { return processes_; }
    }

    /// <summary>Field number for the "ebpfAgentID" field.</summary>
    public const int EbpfAgentIDFieldNumber = 2;
    private string ebpfAgentID_ = "";
    /// <summary>
    /// An ID generated by eBPF agent, should be unique globally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EbpfAgentID {
      get { return ebpfAgentID_; }
      set {
        ebpfAgentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessReportList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessReportList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!processes_.Equals(other.processes_)) return false;
      if (EbpfAgentID != other.EbpfAgentID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= processes_.GetHashCode();
      if (EbpfAgentID.Length != 0) hash ^= EbpfAgentID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      processes_.WriteTo(output, _repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EbpfAgentID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      processes_.WriteTo(ref output, _repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EbpfAgentID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += processes_.CalculateSize(_repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EbpfAgentID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessReportList other) {
      if (other == null) {
        return;
      }
      processes_.Add(other.processes_);
      if (other.EbpfAgentID.Length != 0) {
        EbpfAgentID = other.EbpfAgentID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            processes_.AddEntriesFrom(input, _repeated_processes_codec);
            break;
          }
          case 18: {
            EbpfAgentID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            processes_.AddEntriesFrom(ref input, _repeated_processes_codec);
            break;
          }
          case 18: {
            EbpfAgentID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProcessProperties : pb::IMessage<EBPFProcessProperties>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessProperties> _parser = new pb::MessageParser<EBPFProcessProperties>(() => new EBPFProcessProperties());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessProperties> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessProperties() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessProperties(EBPFProcessProperties other) : this() {
      switch (other.MetadataCase) {
        case MetadataOneofCase.HostProcess:
          HostProcess = other.HostProcess.Clone();
          break;
        case MetadataOneofCase.K8SProcess:
          K8SProcess = other.K8SProcess.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessProperties Clone() {
      return new EBPFProcessProperties(this);
    }

    /// <summary>Field number for the "hostProcess" field.</summary>
    public const int HostProcessFieldNumber = 1;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFHostProcessMetadata HostProcess {
      get { return metadataCase_ == MetadataOneofCase.HostProcess ? (global::Skywalking.V3.EBPFHostProcessMetadata) metadata_ : null; }
      set {
        metadata_ = value;
        metadataCase_ = value == null ? MetadataOneofCase.None : MetadataOneofCase.HostProcess;
      }
    }

    /// <summary>Field number for the "k8sProcess" field.</summary>
    public const int K8SProcessFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFKubernetesProcessMetadata K8SProcess {
      get { return metadataCase_ == MetadataOneofCase.K8SProcess ? (global::Skywalking.V3.EBPFKubernetesProcessMetadata) metadata_ : null; }
      set {
        metadata_ = value;
        metadataCase_ = value == null ? MetadataOneofCase.None : MetadataOneofCase.K8SProcess;
      }
    }

    private object metadata_;
    /// <summary>Enum of possible cases for the "metadata" oneof.</summary>
    public enum MetadataOneofCase {
      None = 0,
      HostProcess = 1,
      K8SProcess = 2,
    }
    private MetadataOneofCase metadataCase_ = MetadataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public MetadataOneofCase MetadataCase {
      get { return metadataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearMetadata() {
      metadataCase_ = MetadataOneofCase.None;
      metadata_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessProperties);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessProperties other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(HostProcess, other.HostProcess)) return false;
      if (!object.Equals(K8SProcess, other.K8SProcess)) return false;
      if (MetadataCase != other.MetadataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (metadataCase_ == MetadataOneofCase.HostProcess) hash ^= HostProcess.GetHashCode();
      if (metadataCase_ == MetadataOneofCase.K8SProcess) hash ^= K8SProcess.GetHashCode();
      hash ^= (int) metadataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (metadataCase_ == MetadataOneofCase.HostProcess) {
        output.WriteRawTag(10);
        output.WriteMessage(HostProcess);
      }
      if (metadataCase_ == MetadataOneofCase.K8SProcess) {
        output.WriteRawTag(18);
        output.WriteMessage(K8SProcess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (metadataCase_ == MetadataOneofCase.HostProcess) {
        output.WriteRawTag(10);
        output.WriteMessage(HostProcess);
      }
      if (metadataCase_ == MetadataOneofCase.K8SProcess) {
        output.WriteRawTag(18);
        output.WriteMessage(K8SProcess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (metadataCase_ == MetadataOneofCase.HostProcess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostProcess);
      }
      if (metadataCase_ == MetadataOneofCase.K8SProcess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(K8SProcess);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessProperties other) {
      if (other == null) {
        return;
      }
      switch (other.MetadataCase) {
        case MetadataOneofCase.HostProcess:
          if (HostProcess == null) {
            HostProcess = new global::Skywalking.V3.EBPFHostProcessMetadata();
          }
          HostProcess.MergeFrom(other.HostProcess);
          break;
        case MetadataOneofCase.K8SProcess:
          if (K8SProcess == null) {
            K8SProcess = new global::Skywalking.V3.EBPFKubernetesProcessMetadata();
          }
          K8SProcess.MergeFrom(other.K8SProcess);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Skywalking.V3.EBPFHostProcessMetadata subBuilder = new global::Skywalking.V3.EBPFHostProcessMetadata();
            if (metadataCase_ == MetadataOneofCase.HostProcess) {
              subBuilder.MergeFrom(HostProcess);
            }
            input.ReadMessage(subBuilder);
            HostProcess = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFKubernetesProcessMetadata subBuilder = new global::Skywalking.V3.EBPFKubernetesProcessMetadata();
            if (metadataCase_ == MetadataOneofCase.K8SProcess) {
              subBuilder.MergeFrom(K8SProcess);
            }
            input.ReadMessage(subBuilder);
            K8SProcess = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            global::Skywalking.V3.EBPFHostProcessMetadata subBuilder = new global::Skywalking.V3.EBPFHostProcessMetadata();
            if (metadataCase_ == MetadataOneofCase.HostProcess) {
              subBuilder.MergeFrom(HostProcess);
            }
            input.ReadMessage(subBuilder);
            HostProcess = subBuilder;
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFKubernetesProcessMetadata subBuilder = new global::Skywalking.V3.EBPFKubernetesProcessMetadata();
            if (metadataCase_ == MetadataOneofCase.K8SProcess) {
              subBuilder.MergeFrom(K8SProcess);
            }
            input.ReadMessage(subBuilder);
            K8SProcess = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFHostProcessMetadata : pb::IMessage<EBPFHostProcessMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFHostProcessMetadata> _parser = new pb::MessageParser<EBPFHostProcessMetadata>(() => new EBPFHostProcessMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFHostProcessMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessMetadata(EBPFHostProcessMetadata other) : this() {
      entity_ = other.entity_ != null ? other.entity_.Clone() : null;
      pid_ = other.pid_;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessMetadata Clone() {
      return new EBPFHostProcessMetadata(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Skywalking.V3.EBPFProcessEntityMetadata entity_;
    /// <summary>
    /// [required] Entity metadata
    /// Must ensure that entity information is unique at the time of reporting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProcessEntityMetadata Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    /// <summary>
    /// [required] The Process id of the host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> properties_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// [optional] properties of the process
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFHostProcessMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFHostProcessMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Entity, other.Entity)) return false;
      if (Pid != other.Pid) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      properties_.WriteTo(ref output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFHostProcessMetadata other) {
      if (other == null) {
        return;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (entity_ == null) {
              Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (entity_ == null) {
              Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(ref input, _repeated_properties_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Process Entity metadata
  /// </summary>
  public sealed partial class EBPFProcessEntityMetadata : pb::IMessage<EBPFProcessEntityMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessEntityMetadata> _parser = new pb::MessageParser<EBPFProcessEntityMetadata>(() => new EBPFProcessEntityMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessEntityMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessEntityMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessEntityMetadata(EBPFProcessEntityMetadata other) : this() {
      layer_ = other.layer_;
      serviceName_ = other.serviceName_;
      instanceName_ = other.instanceName_;
      processName_ = other.processName_;
      labels_ = other.labels_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessEntityMetadata Clone() {
      return new EBPFProcessEntityMetadata(this);
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 1;
    private string layer_ = "";
    /// <summary>
    /// [required] Process belong layer name which define in the backend
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Layer {
      get { return layer_; }
      set {
        layer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceName" field.</summary>
    public const int ServiceNameFieldNumber = 2;
    private string serviceName_ = "";
    /// <summary>
    /// [required] Process belong service name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceName {
      get { return serviceName_; }
      set {
        serviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "instanceName" field.</summary>
    public const int InstanceNameFieldNumber = 3;
    private string instanceName_ = "";
    /// <summary>
    /// [required] Process belong service instance name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string InstanceName {
      get { return instanceName_; }
      set {
        instanceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "processName" field.</summary>
    public const int ProcessNameFieldNumber = 4;
    private string processName_ = "";
    /// <summary>
    /// [required] Process name
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessName {
      get { return processName_; }
      set {
        processName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "labels" field.</summary>
    public const int LabelsFieldNumber = 5;
    private static readonly pb::FieldCodec<string> _repeated_labels_codec
        = pb::FieldCodec.ForString(42);
    private readonly pbc::RepeatedField<string> labels_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// Process labels for aggregate from service
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Labels {
      get { return labels_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessEntityMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessEntityMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Layer != other.Layer) return false;
      if (ServiceName != other.ServiceName) return false;
      if (InstanceName != other.InstanceName) return false;
      if (ProcessName != other.ProcessName) return false;
      if(!labels_.Equals(other.labels_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Layer.Length != 0) hash ^= Layer.GetHashCode();
      if (ServiceName.Length != 0) hash ^= ServiceName.GetHashCode();
      if (InstanceName.Length != 0) hash ^= InstanceName.GetHashCode();
      if (ProcessName.Length != 0) hash ^= ProcessName.GetHashCode();
      hash ^= labels_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Layer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Layer);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (InstanceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstanceName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      labels_.WriteTo(output, _repeated_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Layer.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Layer);
      }
      if (ServiceName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(ServiceName);
      }
      if (InstanceName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(InstanceName);
      }
      if (ProcessName.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(ProcessName);
      }
      labels_.WriteTo(ref output, _repeated_labels_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Layer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Layer);
      }
      if (ServiceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceName);
      }
      if (InstanceName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(InstanceName);
      }
      if (ProcessName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessName);
      }
      size += labels_.CalculateSize(_repeated_labels_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessEntityMetadata other) {
      if (other == null) {
        return;
      }
      if (other.Layer.Length != 0) {
        Layer = other.Layer;
      }
      if (other.ServiceName.Length != 0) {
        ServiceName = other.ServiceName;
      }
      if (other.InstanceName.Length != 0) {
        InstanceName = other.InstanceName;
      }
      if (other.ProcessName.Length != 0) {
        ProcessName = other.ProcessName;
      }
      labels_.Add(other.labels_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Layer = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            InstanceName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(input, _repeated_labels_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Layer = input.ReadString();
            break;
          }
          case 18: {
            ServiceName = input.ReadString();
            break;
          }
          case 26: {
            InstanceName = input.ReadString();
            break;
          }
          case 34: {
            ProcessName = input.ReadString();
            break;
          }
          case 42: {
            labels_.AddEntriesFrom(ref input, _repeated_labels_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Kubernetes process metadata
  /// </summary>
  public sealed partial class EBPFKubernetesProcessMetadata : pb::IMessage<EBPFKubernetesProcessMetadata>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFKubernetesProcessMetadata> _parser = new pb::MessageParser<EBPFKubernetesProcessMetadata>(() => new EBPFKubernetesProcessMetadata());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFKubernetesProcessMetadata> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessMetadata() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessMetadata(EBPFKubernetesProcessMetadata other) : this() {
      entity_ = other.entity_ != null ? other.entity_.Clone() : null;
      pid_ = other.pid_;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessMetadata Clone() {
      return new EBPFKubernetesProcessMetadata(this);
    }

    /// <summary>Field number for the "entity" field.</summary>
    public const int EntityFieldNumber = 1;
    private global::Skywalking.V3.EBPFProcessEntityMetadata entity_;
    /// <summary>
    /// [required] Entity metadata
    /// Must ensure that entity information is unique at the time of reporting
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProcessEntityMetadata Entity {
      get { return entity_; }
      set {
        entity_ = value;
      }
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 2;
    private int pid_;
    /// <summary>
    /// [required] The Process id of the host
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> properties_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// [optional] properties of the process
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFKubernetesProcessMetadata);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFKubernetesProcessMetadata other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Entity, other.Entity)) return false;
      if (Pid != other.Pid) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entity_ != null) hash ^= Entity.GetHashCode();
      if (Pid != 0) hash ^= Pid.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (entity_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Entity);
      }
      if (Pid != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Pid);
      }
      properties_.WriteTo(ref output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entity_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Entity);
      }
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFKubernetesProcessMetadata other) {
      if (other == null) {
        return;
      }
      if (other.entity_ != null) {
        if (entity_ == null) {
          Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
        }
        Entity.MergeFrom(other.Entity);
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (entity_ == null) {
              Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (entity_ == null) {
              Entity = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(Entity);
            break;
          }
          case 16: {
            Pid = input.ReadInt32();
            break;
          }
          case 26: {
            properties_.AddEntriesFrom(ref input, _repeated_properties_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFReportProcessDownstream : pb::IMessage<EBPFReportProcessDownstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFReportProcessDownstream> _parser = new pb::MessageParser<EBPFReportProcessDownstream>(() => new EBPFReportProcessDownstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFReportProcessDownstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFReportProcessDownstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFReportProcessDownstream(EBPFReportProcessDownstream other) : this() {
      processes_ = other.processes_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFReportProcessDownstream Clone() {
      return new EBPFReportProcessDownstream(this);
    }

    /// <summary>Field number for the "processes" field.</summary>
    public const int ProcessesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFProcessDownstream> _repeated_processes_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.EBPFProcessDownstream.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFProcessDownstream> processes_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFProcessDownstream>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFProcessDownstream> Processes {
      get { return processes_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFReportProcessDownstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFReportProcessDownstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!processes_.Equals(other.processes_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= processes_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      processes_.WriteTo(output, _repeated_processes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      processes_.WriteTo(ref output, _repeated_processes_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += processes_.CalculateSize(_repeated_processes_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFReportProcessDownstream other) {
      if (other == null) {
        return;
      }
      processes_.Add(other.processes_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            processes_.AddEntriesFrom(input, _repeated_processes_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            processes_.AddEntriesFrom(ref input, _repeated_processes_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProcessDownstream : pb::IMessage<EBPFProcessDownstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessDownstream> _parser = new pb::MessageParser<EBPFProcessDownstream>(() => new EBPFProcessDownstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessDownstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessDownstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessDownstream(EBPFProcessDownstream other) : this() {
      processId_ = other.processId_;
      switch (other.ProcessCase) {
        case ProcessOneofCase.HostProcess:
          HostProcess = other.HostProcess.Clone();
          break;
        case ProcessOneofCase.K8SProcess:
          K8SProcess = other.K8SProcess.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessDownstream Clone() {
      return new EBPFProcessDownstream(this);
    }

    /// <summary>Field number for the "processId" field.</summary>
    public const int ProcessIdFieldNumber = 1;
    private string processId_ = "";
    /// <summary>
    /// Generated process id
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ProcessId {
      get { return processId_; }
      set {
        processId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "hostProcess" field.</summary>
    public const int HostProcessFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFHostProcessDownstream HostProcess {
      get { return processCase_ == ProcessOneofCase.HostProcess ? (global::Skywalking.V3.EBPFHostProcessDownstream) process_ : null; }
      set {
        process_ = value;
        processCase_ = value == null ? ProcessOneofCase.None : ProcessOneofCase.HostProcess;
      }
    }

    /// <summary>Field number for the "k8sProcess" field.</summary>
    public const int K8SProcessFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFKubernetesProcessDownstream K8SProcess {
      get { return processCase_ == ProcessOneofCase.K8SProcess ? (global::Skywalking.V3.EBPFKubernetesProcessDownstream) process_ : null; }
      set {
        process_ = value;
        processCase_ = value == null ? ProcessOneofCase.None : ProcessOneofCase.K8SProcess;
      }
    }

    private object process_;
    /// <summary>Enum of possible cases for the "process" oneof.</summary>
    public enum ProcessOneofCase {
      None = 0,
      HostProcess = 2,
      K8SProcess = 3,
    }
    private ProcessOneofCase processCase_ = ProcessOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProcessOneofCase ProcessCase {
      get { return processCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearProcess() {
      processCase_ = ProcessOneofCase.None;
      process_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessDownstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessDownstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (ProcessId != other.ProcessId) return false;
      if (!object.Equals(HostProcess, other.HostProcess)) return false;
      if (!object.Equals(K8SProcess, other.K8SProcess)) return false;
      if (ProcessCase != other.ProcessCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (ProcessId.Length != 0) hash ^= ProcessId.GetHashCode();
      if (processCase_ == ProcessOneofCase.HostProcess) hash ^= HostProcess.GetHashCode();
      if (processCase_ == ProcessOneofCase.K8SProcess) hash ^= K8SProcess.GetHashCode();
      hash ^= (int) processCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (ProcessId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProcessId);
      }
      if (processCase_ == ProcessOneofCase.HostProcess) {
        output.WriteRawTag(18);
        output.WriteMessage(HostProcess);
      }
      if (processCase_ == ProcessOneofCase.K8SProcess) {
        output.WriteRawTag(26);
        output.WriteMessage(K8SProcess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (ProcessId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(ProcessId);
      }
      if (processCase_ == ProcessOneofCase.HostProcess) {
        output.WriteRawTag(18);
        output.WriteMessage(HostProcess);
      }
      if (processCase_ == ProcessOneofCase.K8SProcess) {
        output.WriteRawTag(26);
        output.WriteMessage(K8SProcess);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (ProcessId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ProcessId);
      }
      if (processCase_ == ProcessOneofCase.HostProcess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(HostProcess);
      }
      if (processCase_ == ProcessOneofCase.K8SProcess) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(K8SProcess);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessDownstream other) {
      if (other == null) {
        return;
      }
      if (other.ProcessId.Length != 0) {
        ProcessId = other.ProcessId;
      }
      switch (other.ProcessCase) {
        case ProcessOneofCase.HostProcess:
          if (HostProcess == null) {
            HostProcess = new global::Skywalking.V3.EBPFHostProcessDownstream();
          }
          HostProcess.MergeFrom(other.HostProcess);
          break;
        case ProcessOneofCase.K8SProcess:
          if (K8SProcess == null) {
            K8SProcess = new global::Skywalking.V3.EBPFKubernetesProcessDownstream();
          }
          K8SProcess.MergeFrom(other.K8SProcess);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            ProcessId = input.ReadString();
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFHostProcessDownstream subBuilder = new global::Skywalking.V3.EBPFHostProcessDownstream();
            if (processCase_ == ProcessOneofCase.HostProcess) {
              subBuilder.MergeFrom(HostProcess);
            }
            input.ReadMessage(subBuilder);
            HostProcess = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.EBPFKubernetesProcessDownstream subBuilder = new global::Skywalking.V3.EBPFKubernetesProcessDownstream();
            if (processCase_ == ProcessOneofCase.K8SProcess) {
              subBuilder.MergeFrom(K8SProcess);
            }
            input.ReadMessage(subBuilder);
            K8SProcess = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            ProcessId = input.ReadString();
            break;
          }
          case 18: {
            global::Skywalking.V3.EBPFHostProcessDownstream subBuilder = new global::Skywalking.V3.EBPFHostProcessDownstream();
            if (processCase_ == ProcessOneofCase.HostProcess) {
              subBuilder.MergeFrom(HostProcess);
            }
            input.ReadMessage(subBuilder);
            HostProcess = subBuilder;
            break;
          }
          case 26: {
            global::Skywalking.V3.EBPFKubernetesProcessDownstream subBuilder = new global::Skywalking.V3.EBPFKubernetesProcessDownstream();
            if (processCase_ == ProcessOneofCase.K8SProcess) {
              subBuilder.MergeFrom(K8SProcess);
            }
            input.ReadMessage(subBuilder);
            K8SProcess = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFHostProcessDownstream : pb::IMessage<EBPFHostProcessDownstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFHostProcessDownstream> _parser = new pb::MessageParser<EBPFHostProcessDownstream>(() => new EBPFHostProcessDownstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFHostProcessDownstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessDownstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessDownstream(EBPFHostProcessDownstream other) : this() {
      pid_ = other.pid_;
      entityMetadata_ = other.entityMetadata_ != null ? other.entityMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFHostProcessDownstream Clone() {
      return new EBPFHostProcessDownstream(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "entityMetadata" field.</summary>
    public const int EntityMetadataFieldNumber = 2;
    private global::Skywalking.V3.EBPFProcessEntityMetadata entityMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProcessEntityMetadata EntityMetadata {
      get { return entityMetadata_; }
      set {
        entityMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFHostProcessDownstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFHostProcessDownstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(EntityMetadata, other.EntityMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (entityMetadata_ != null) hash ^= EntityMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (entityMetadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (entityMetadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (entityMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFHostProcessDownstream other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.entityMetadata_ != null) {
        if (entityMetadata_ == null) {
          EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
        }
        EntityMetadata.MergeFrom(other.EntityMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Kubernetes process downstream
  /// </summary>
  public sealed partial class EBPFKubernetesProcessDownstream : pb::IMessage<EBPFKubernetesProcessDownstream>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFKubernetesProcessDownstream> _parser = new pb::MessageParser<EBPFKubernetesProcessDownstream>(() => new EBPFKubernetesProcessDownstream());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFKubernetesProcessDownstream> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessDownstream() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessDownstream(EBPFKubernetesProcessDownstream other) : this() {
      pid_ = other.pid_;
      entityMetadata_ = other.entityMetadata_ != null ? other.entityMetadata_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFKubernetesProcessDownstream Clone() {
      return new EBPFKubernetesProcessDownstream(this);
    }

    /// <summary>Field number for the "pid" field.</summary>
    public const int PidFieldNumber = 1;
    private int pid_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int Pid {
      get { return pid_; }
      set {
        pid_ = value;
      }
    }

    /// <summary>Field number for the "entityMetadata" field.</summary>
    public const int EntityMetadataFieldNumber = 2;
    private global::Skywalking.V3.EBPFProcessEntityMetadata entityMetadata_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProcessEntityMetadata EntityMetadata {
      get { return entityMetadata_; }
      set {
        entityMetadata_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFKubernetesProcessDownstream);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFKubernetesProcessDownstream other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Pid != other.Pid) return false;
      if (!object.Equals(EntityMetadata, other.EntityMetadata)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Pid != 0) hash ^= Pid.GetHashCode();
      if (entityMetadata_ != null) hash ^= EntityMetadata.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (entityMetadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Pid != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Pid);
      }
      if (entityMetadata_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(EntityMetadata);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Pid != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Pid);
      }
      if (entityMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityMetadata);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFKubernetesProcessDownstream other) {
      if (other == null) {
        return;
      }
      if (other.Pid != 0) {
        Pid = other.Pid;
      }
      if (other.entityMetadata_ != null) {
        if (entityMetadata_ == null) {
          EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
        }
        EntityMetadata.MergeFrom(other.EntityMetadata);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Pid = input.ReadInt32();
            break;
          }
          case 18: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProcessPingPkgList : pb::IMessage<EBPFProcessPingPkgList>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessPingPkgList> _parser = new pb::MessageParser<EBPFProcessPingPkgList>(() => new EBPFProcessPingPkgList());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessPingPkgList> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkgList() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkgList(EBPFProcessPingPkgList other) : this() {
      processes_ = other.processes_.Clone();
      ebpfAgentID_ = other.ebpfAgentID_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkgList Clone() {
      return new EBPFProcessPingPkgList(this);
    }

    /// <summary>Field number for the "processes" field.</summary>
    public const int ProcessesFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Skywalking.V3.EBPFProcessPingPkg> _repeated_processes_codec
        = pb::FieldCodec.ForMessage(10, global::Skywalking.V3.EBPFProcessPingPkg.Parser);
    private readonly pbc::RepeatedField<global::Skywalking.V3.EBPFProcessPingPkg> processes_ = new pbc::RepeatedField<global::Skywalking.V3.EBPFProcessPingPkg>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Skywalking.V3.EBPFProcessPingPkg> Processes {
      get { return processes_; }
    }

    /// <summary>Field number for the "ebpfAgentID" field.</summary>
    public const int EbpfAgentIDFieldNumber = 2;
    private string ebpfAgentID_ = "";
    /// <summary>
    /// An ID generated by eBPF agent, should be unique globally.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string EbpfAgentID {
      get { return ebpfAgentID_; }
      set {
        ebpfAgentID_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessPingPkgList);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessPingPkgList other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!processes_.Equals(other.processes_)) return false;
      if (EbpfAgentID != other.EbpfAgentID) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= processes_.GetHashCode();
      if (EbpfAgentID.Length != 0) hash ^= EbpfAgentID.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      processes_.WriteTo(output, _repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EbpfAgentID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      processes_.WriteTo(ref output, _repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(EbpfAgentID);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += processes_.CalculateSize(_repeated_processes_codec);
      if (EbpfAgentID.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EbpfAgentID);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessPingPkgList other) {
      if (other == null) {
        return;
      }
      processes_.Add(other.processes_);
      if (other.EbpfAgentID.Length != 0) {
        EbpfAgentID = other.EbpfAgentID;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            processes_.AddEntriesFrom(input, _repeated_processes_codec);
            break;
          }
          case 18: {
            EbpfAgentID = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            processes_.AddEntriesFrom(ref input, _repeated_processes_codec);
            break;
          }
          case 18: {
            EbpfAgentID = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class EBPFProcessPingPkg : pb::IMessage<EBPFProcessPingPkg>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EBPFProcessPingPkg> _parser = new pb::MessageParser<EBPFProcessPingPkg>(() => new EBPFProcessPingPkg());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<EBPFProcessPingPkg> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Skywalking.V3.ProcessReflection.Descriptor.MessageTypes[10]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkg() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkg(EBPFProcessPingPkg other) : this() {
      entityMetadata_ = other.entityMetadata_ != null ? other.entityMetadata_.Clone() : null;
      properties_ = other.properties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public EBPFProcessPingPkg Clone() {
      return new EBPFProcessPingPkg(this);
    }

    /// <summary>Field number for the "entityMetadata" field.</summary>
    public const int EntityMetadataFieldNumber = 1;
    private global::Skywalking.V3.EBPFProcessEntityMetadata entityMetadata_;
    /// <summary>
    /// Process entity
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Skywalking.V3.EBPFProcessEntityMetadata EntityMetadata {
      get { return entityMetadata_; }
      set {
        entityMetadata_ = value;
      }
    }

    /// <summary>Field number for the "properties" field.</summary>
    public const int PropertiesFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_properties_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> properties_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// Minimize necessary properties
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Properties {
      get { return properties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as EBPFProcessPingPkg);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(EBPFProcessPingPkg other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(EntityMetadata, other.EntityMetadata)) return false;
      if(!properties_.Equals(other.properties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (entityMetadata_ != null) hash ^= EntityMetadata.GetHashCode();
      hash ^= properties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (entityMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityMetadata);
      }
      properties_.WriteTo(output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (entityMetadata_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(EntityMetadata);
      }
      properties_.WriteTo(ref output, _repeated_properties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (entityMetadata_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EntityMetadata);
      }
      size += properties_.CalculateSize(_repeated_properties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(EBPFProcessPingPkg other) {
      if (other == null) {
        return;
      }
      if (other.entityMetadata_ != null) {
        if (entityMetadata_ == null) {
          EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
        }
        EntityMetadata.MergeFrom(other.EntityMetadata);
      }
      properties_.Add(other.properties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(input, _repeated_properties_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (entityMetadata_ == null) {
              EntityMetadata = new global::Skywalking.V3.EBPFProcessEntityMetadata();
            }
            input.ReadMessage(EntityMetadata);
            break;
          }
          case 18: {
            properties_.AddEntriesFrom(ref input, _repeated_properties_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
