// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: language-agent/Tracing.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol.V3 {

  /// <summary>Holder for reflection information generated from language-agent/Tracing.proto</summary>
  public static partial class TracingReflection {

    #region Descriptor
    /// <summary>File descriptor for language-agent/Tracing.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChxsYW5ndWFnZS1hZ2VudC9UcmFjaW5nLnByb3RvEg1za3l3YWxraW5nLnYz",
            "GhNjb21tb24vQ29tbW9uLnByb3RvGhRjb21tb24vQ29tbWFuZC5wcm90byKj",
            "AQoNU2VnbWVudE9iamVjdBIPCgd0cmFjZUlkGAEgASgJEhYKDnRyYWNlU2Vn",
            "bWVudElkGAIgASgJEigKBXNwYW5zGAMgAygLMhkuc2t5d2Fsa2luZy52My5T",
            "cGFuT2JqZWN0Eg8KB3NlcnZpY2UYBCABKAkSFwoPc2VydmljZUluc3RhbmNl",
            "GAUgASgJEhUKDWlzU2l6ZUxpbWl0ZWQYBiABKAgi8AEKEFNlZ21lbnRSZWZl",
            "cmVuY2USJwoHcmVmVHlwZRgBIAEoDjIWLnNreXdhbGtpbmcudjMuUmVmVHlw",
            "ZRIPCgd0cmFjZUlkGAIgASgJEhwKFHBhcmVudFRyYWNlU2VnbWVudElkGAMg",
            "ASgJEhQKDHBhcmVudFNwYW5JZBgEIAEoBRIVCg1wYXJlbnRTZXJ2aWNlGAUg",
            "ASgJEh0KFXBhcmVudFNlcnZpY2VJbnN0YW5jZRgGIAEoCRIWCg5wYXJlbnRF",
            "bmRwb2ludBgHIAEoCRIgChhuZXR3b3JrQWRkcmVzc1VzZWRBdFBlZXIYCCAB",
            "KAkikQMKClNwYW5PYmplY3QSDgoGc3BhbklkGAEgASgFEhQKDHBhcmVudFNw",
            "YW5JZBgCIAEoBRIRCglzdGFydFRpbWUYAyABKAMSDwoHZW5kVGltZRgEIAEo",
            "AxItCgRyZWZzGAUgAygLMh8uc2t5d2Fsa2luZy52My5TZWdtZW50UmVmZXJl",
            "bmNlEhUKDW9wZXJhdGlvbk5hbWUYBiABKAkSDAoEcGVlchgHIAEoCRIpCghz",
            "cGFuVHlwZRgIIAEoDjIXLnNreXdhbGtpbmcudjMuU3BhblR5cGUSKwoJc3Bh",
            "bkxheWVyGAkgASgOMhguc2t5d2Fsa2luZy52My5TcGFuTGF5ZXISEwoLY29t",
            "cG9uZW50SWQYCiABKAUSDwoHaXNFcnJvchgLIAEoCBIvCgR0YWdzGAwgAygL",
            "MiEuc2t5d2Fsa2luZy52My5LZXlTdHJpbmdWYWx1ZVBhaXISIAoEbG9ncxgN",
            "IAMoCzISLnNreXdhbGtpbmcudjMuTG9nEhQKDHNraXBBbmFseXNpcxgOIAEo",
            "CCJECgNMb2cSDAoEdGltZRgBIAEoAxIvCgRkYXRhGAIgAygLMiEuc2t5d2Fs",
            "a2luZy52My5LZXlTdHJpbmdWYWx1ZVBhaXIiEAoCSUQSCgoCaWQYASADKAki",
            "QwoRU2VnbWVudENvbGxlY3Rpb24SLgoIc2VnbWVudHMYASADKAsyHC5za3l3",
            "YWxraW5nLnYzLlNlZ21lbnRPYmplY3Qi3AMKEVNwYW5BdHRhY2hlZEV2ZW50",
            "EikKCXN0YXJ0VGltZRgBIAEoCzIWLnNreXdhbGtpbmcudjMuSW5zdGFudBIN",
            "CgVldmVudBgCIAEoCRInCgdlbmRUaW1lGAMgASgLMhYuc2t5d2Fsa2luZy52",
            "My5JbnN0YW50Ei8KBHRhZ3MYBCADKAsyIS5za3l3YWxraW5nLnYzLktleVN0",
            "cmluZ1ZhbHVlUGFpchIvCgdzdW1tYXJ5GAUgAygLMh4uc2t5d2Fsa2luZy52",
            "My5LZXlJbnRWYWx1ZVBhaXISRAoMdHJhY2VDb250ZXh0GAYgASgLMi4uc2t5",
            "d2Fsa2luZy52My5TcGFuQXR0YWNoZWRFdmVudC5TcGFuUmVmZXJlbmNlGooB",
            "Cg1TcGFuUmVmZXJlbmNlEkAKBHR5cGUYASABKA4yMi5za3l3YWxraW5nLnYz",
            "LlNwYW5BdHRhY2hlZEV2ZW50LlNwYW5SZWZlcmVuY2VUeXBlEg8KB3RyYWNl",
            "SWQYAiABKAkSFgoOdHJhY2VTZWdtZW50SWQYAyABKAkSDgoGc3BhbklkGAQg",
            "ASgJIi8KEVNwYW5SZWZlcmVuY2VUeXBlEg4KClNLWVdBTEtJTkcQABIKCgZa",
            "SVBLSU4QASoqCghTcGFuVHlwZRIJCgVFbnRyeRAAEggKBEV4aXQQARIJCgVM",
            "b2NhbBACKiwKB1JlZlR5cGUSEAoMQ3Jvc3NQcm9jZXNzEAASDwoLQ3Jvc3NU",
            "aHJlYWQQASpfCglTcGFuTGF5ZXISCwoHVW5rbm93bhAAEgwKCERhdGFiYXNl",
            "EAESEAoMUlBDRnJhbWV3b3JrEAISCAoESHR0cBADEgYKAk1REAQSCQoFQ2Fj",
            "aGUQBRIICgRGQUFTEAYyrwEKGVRyYWNlU2VnbWVudFJlcG9ydFNlcnZpY2US",
            "RAoHY29sbGVjdBIcLnNreXdhbGtpbmcudjMuU2VnbWVudE9iamVjdBoXLnNr",
            "eXdhbGtpbmcudjMuQ29tbWFuZHMiACgBEkwKDWNvbGxlY3RJblN5bmMSIC5z",
            "a3l3YWxraW5nLnYzLlNlZ21lbnRDb2xsZWN0aW9uGhcuc2t5d2Fsa2luZy52",
            "My5Db21tYW5kcyIAMmoKHlNwYW5BdHRhY2hlZEV2ZW50UmVwb3J0U2Vydmlj",
            "ZRJICgdjb2xsZWN0EiAuc2t5d2Fsa2luZy52My5TcGFuQXR0YWNoZWRFdmVu",
            "dBoXLnNreXdhbGtpbmcudjMuQ29tbWFuZHMiACgBQpMBCjNvcmcuYXBhY2hl",
            "LnNreXdhbGtpbmcuYXBtLm5ldHdvcmsubGFuZ3VhZ2UuYWdlbnQudjNQAVo6",
            "c2t5d2Fsa2luZy5hcGFjaGUub3JnL3JlcG8vZ29hcGkvY29sbGVjdC9sYW5n",
            "dWFnZS9hZ2VudC92M6oCHVNreVdhbGtpbmcuTmV0d29ya1Byb3RvY29sLlYz",
            "YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, global::SkyWalking.NetworkProtocol.V3.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::SkyWalking.NetworkProtocol.V3.SpanType), typeof(global::SkyWalking.NetworkProtocol.V3.RefType), typeof(global::SkyWalking.NetworkProtocol.V3.SpanLayer), }, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SegmentObject), global::SkyWalking.NetworkProtocol.V3.SegmentObject.Parser, new[]{ "TraceId", "TraceSegmentId", "Spans", "Service", "ServiceInstance", "IsSizeLimited" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SegmentReference), global::SkyWalking.NetworkProtocol.V3.SegmentReference.Parser, new[]{ "RefType", "TraceId", "ParentTraceSegmentId", "ParentSpanId", "ParentService", "ParentServiceInstance", "ParentEndpoint", "NetworkAddressUsedAtPeer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SpanObject), global::SkyWalking.NetworkProtocol.V3.SpanObject.Parser, new[]{ "SpanId", "ParentSpanId", "StartTime", "EndTime", "Refs", "OperationName", "Peer", "SpanType", "SpanLayer", "ComponentId", "IsError", "Tags", "Logs", "SkipAnalysis" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.Log), global::SkyWalking.NetworkProtocol.V3.Log.Parser, new[]{ "Time", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.ID), global::SkyWalking.NetworkProtocol.V3.ID.Parser, new[]{ "Id" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SegmentCollection), global::SkyWalking.NetworkProtocol.V3.SegmentCollection.Parser, new[]{ "Segments" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent), global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Parser, new[]{ "StartTime", "Event", "EndTime", "Tags", "Summary", "TraceContext" }, null, new[]{ typeof(global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference), global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference.Parser, new[]{ "Type", "TraceId", "TraceSegmentId", "SpanId" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// Map to the type of span
  /// </summary>
  public enum SpanType {
    /// <summary>
    /// Server side of RPC. Consumer side of MQ.
    /// </summary>
    [pbr::OriginalName("Entry")] Entry = 0,
    /// <summary>
    /// Client side of RPC. Producer side of MQ.
    /// </summary>
    [pbr::OriginalName("Exit")] Exit = 1,
    /// <summary>
    /// A common local code execution.
    /// </summary>
    [pbr::OriginalName("Local")] Local = 2,
  }

  /// <summary>
  /// Type of the reference
  /// </summary>
  public enum RefType {
    /// <summary>
    /// Map to the reference targeting the segment in another OS process.
    /// </summary>
    [pbr::OriginalName("CrossProcess")] CrossProcess = 0,
    /// <summary>
    /// Map to the reference targeting the segment in the same process of the current one, just across thread.
    /// This is only used when the coding language has the thread concept.
    /// </summary>
    [pbr::OriginalName("CrossThread")] CrossThread = 1,
  }

  /// <summary>
  /// Map to the layer of span
  /// </summary>
  public enum SpanLayer {
    /// <summary>
    /// Unknown layer. Could be anything.
    /// </summary>
    [pbr::OriginalName("Unknown")] Unknown = 0,
    /// <summary>
    /// A database layer, used in tracing the database client component.
    /// </summary>
    [pbr::OriginalName("Database")] Database = 1,
    /// <summary>
    /// A RPC layer, used in both client and server sides of RPC component.
    /// </summary>
    [pbr::OriginalName("RPCFramework")] Rpcframework = 2,
    /// <summary>
    /// HTTP is a more specific RPCFramework.
    /// </summary>
    [pbr::OriginalName("Http")] Http = 3,
    /// <summary>
    /// A MQ layer, used in both producer and consuer sides of the MQ component.
    /// </summary>
    [pbr::OriginalName("MQ")] Mq = 4,
    /// <summary>
    /// A cache layer, used in tracing the cache client component.
    /// </summary>
    [pbr::OriginalName("Cache")] Cache = 5,
    /// <summary>
    /// A FAAS layer, used in function-as-a-Service platform.
    /// </summary>
    [pbr::OriginalName("FAAS")] Faas = 6,
  }

  #endregion

  #region Messages
  /// <summary>
  /// The segment is a collection of spans. It includes all collected spans in a simple one request context, such as a HTTP request process.
  ///
  /// We recommend the agent/SDK report all tracked data of one request once for all.
  /// Typically, such as in Java, one segment represent all tracked operations(spans) of one request context in the same thread.
  /// At the same time, in some language there is not a clear `thread` concept like golang.
  /// Then, it could represent all tracked operations of one request context cross threads/goroutines.
  /// </summary>
  public sealed partial class SegmentObject : pb::IMessage<SegmentObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentObject> _parser = new pb::MessageParser<SegmentObject>(() => new SegmentObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject(SegmentObject other) : this() {
      traceId_ = other.traceId_;
      traceSegmentId_ = other.traceSegmentId_;
      spans_ = other.spans_.Clone();
      service_ = other.service_;
      serviceInstance_ = other.serviceInstance_;
      isSizeLimited_ = other.isSizeLimited_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentObject Clone() {
      return new SegmentObject(this);
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private string traceId_ = "";
    /// <summary>
    /// A string id represents the whole trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 2;
    private string traceSegmentId_ = "";
    /// <summary>
    /// A unique id represents this segment. Other segments could use this id to reference as a child segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spans" field.</summary>
    public const int SpansFieldNumber = 3;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.SpanObject> _repeated_spans_codec
        = pb::FieldCodec.ForMessage(26, global::SkyWalking.NetworkProtocol.V3.SpanObject.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject> spans_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject>();
    /// <summary>
    /// Span collections included in this segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SpanObject> Spans {
      get { return spans_; }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 4;
    private string service_ = "";
    /// <summary>
    /// **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
    ///
    /// The logic name represents the service. This would show as a separate node in the topology.
    /// The metrics analyzed from the spans, would be aggregated for this entity as the service level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceInstance" field.</summary>
    public const int ServiceInstanceFieldNumber = 5;
    private string serviceInstance_ = "";
    /// <summary>
    /// **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
    /// doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
    ///
    /// The logic name represents the service instance. This would show as a separate node in the instance relationship.
    /// The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceInstance {
      get { return serviceInstance_; }
      set {
        serviceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "isSizeLimited" field.</summary>
    public const int IsSizeLimitedFieldNumber = 6;
    private bool isSizeLimited_;
    /// <summary>
    /// Whether the segment includes all tracked spans.
    /// In the production environment tracked, some tasks could include too many spans for one request context, such as a batch update for a cache, or an async job.
    /// The agent/SDK could optimize or ignore some tracked spans for better performance.
    /// In this case, the value should be flagged as TRUE.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsSizeLimited {
      get { return isSizeLimited_; }
      set {
        isSizeLimited_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (TraceSegmentId != other.TraceSegmentId) return false;
      if(!spans_.Equals(other.spans_)) return false;
      if (Service != other.Service) return false;
      if (ServiceInstance != other.ServiceInstance) return false;
      if (IsSizeLimited != other.IsSizeLimited) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (TraceSegmentId.Length != 0) hash ^= TraceSegmentId.GetHashCode();
      hash ^= spans_.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceInstance.Length != 0) hash ^= ServiceInstance.GetHashCode();
      if (IsSizeLimited != false) hash ^= IsSizeLimited.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceSegmentId);
      }
      spans_.WriteTo(output, _repeated_spans_codec);
      if (Service.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServiceInstance);
      }
      if (IsSizeLimited != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSizeLimited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceSegmentId);
      }
      spans_.WriteTo(ref output, _repeated_spans_codec);
      if (Service.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ServiceInstance);
      }
      if (IsSizeLimited != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsSizeLimited);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceSegmentId);
      }
      size += spans_.CalculateSize(_repeated_spans_codec);
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceInstance);
      }
      if (IsSizeLimited != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentObject other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.TraceSegmentId.Length != 0) {
        TraceSegmentId = other.TraceSegmentId;
      }
      spans_.Add(other.spans_);
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceInstance.Length != 0) {
        ServiceInstance = other.ServiceInstance;
      }
      if (other.IsSizeLimited != false) {
        IsSizeLimited = other.IsSizeLimited;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 26: {
            spans_.AddEntriesFrom(input, _repeated_spans_codec);
            break;
          }
          case 34: {
            Service = input.ReadString();
            break;
          }
          case 42: {
            ServiceInstance = input.ReadString();
            break;
          }
          case 48: {
            IsSizeLimited = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 26: {
            spans_.AddEntriesFrom(ref input, _repeated_spans_codec);
            break;
          }
          case 34: {
            Service = input.ReadString();
            break;
          }
          case 42: {
            ServiceInstance = input.ReadString();
            break;
          }
          case 48: {
            IsSizeLimited = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Segment reference represents the link between two existing segment.
  /// </summary>
  public sealed partial class SegmentReference : pb::IMessage<SegmentReference>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentReference> _parser = new pb::MessageParser<SegmentReference>(() => new SegmentReference());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentReference> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference(SegmentReference other) : this() {
      refType_ = other.refType_;
      traceId_ = other.traceId_;
      parentTraceSegmentId_ = other.parentTraceSegmentId_;
      parentSpanId_ = other.parentSpanId_;
      parentService_ = other.parentService_;
      parentServiceInstance_ = other.parentServiceInstance_;
      parentEndpoint_ = other.parentEndpoint_;
      networkAddressUsedAtPeer_ = other.networkAddressUsedAtPeer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentReference Clone() {
      return new SegmentReference(this);
    }

    /// <summary>Field number for the "refType" field.</summary>
    public const int RefTypeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.V3.RefType refType_ = global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess;
    /// <summary>
    /// Represent the reference type. It could be across thread or across process.
    /// Across process means there is a downstream RPC call for this.
    /// Typically, refType == CrossProcess means SpanObject#spanType = entry.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.RefType RefType {
      get { return refType_; }
      set {
        refType_ = value;
      }
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 2;
    private string traceId_ = "";
    /// <summary>
    /// A string id represents the whole trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentTraceSegmentId" field.</summary>
    public const int ParentTraceSegmentIdFieldNumber = 3;
    private string parentTraceSegmentId_ = "";
    /// <summary>
    /// Another segment id as the parent.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentTraceSegmentId {
      get { return parentTraceSegmentId_; }
      set {
        parentTraceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 4;
    private int parentSpanId_;
    /// <summary>
    /// The span id in the parent trace segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "parentService" field.</summary>
    public const int ParentServiceFieldNumber = 5;
    private string parentService_ = "";
    /// <summary>
    /// The service logic name of the parent segment.
    /// If refType == CrossThread, this name is as same as the trace segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentService {
      get { return parentService_; }
      set {
        parentService_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentServiceInstance" field.</summary>
    public const int ParentServiceInstanceFieldNumber = 6;
    private string parentServiceInstance_ = "";
    /// <summary>
    /// The service logic name instance of the parent segment.
    /// If refType == CrossThread, this name is as same as the trace segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentServiceInstance {
      get { return parentServiceInstance_; }
      set {
        parentServiceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "parentEndpoint" field.</summary>
    public const int ParentEndpointFieldNumber = 7;
    private string parentEndpoint_ = "";
    /// <summary>
    /// The endpoint name of the parent segment.
    /// **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
    /// In a trace segment, the endpoint name is the name of first entry span.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ParentEndpoint {
      get { return parentEndpoint_; }
      set {
        parentEndpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "networkAddressUsedAtPeer" field.</summary>
    public const int NetworkAddressUsedAtPeerFieldNumber = 8;
    private string networkAddressUsedAtPeer_ = "";
    /// <summary>
    /// The network address, including ip/hostname and port, which is used in the client side.
    /// Such as Client --> use 127.0.11.8:913 -> Server
    /// then, in the reference of entry span reported by Server, the value of this field is 127.0.11.8:913.
    /// This plays the important role in the SkyWalking STAM(Streaming Topology Analysis Method)
    /// For more details, read https://wu-sheng.github.io/STAM/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NetworkAddressUsedAtPeer {
      get { return networkAddressUsedAtPeer_; }
      set {
        networkAddressUsedAtPeer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentReference);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentReference other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (RefType != other.RefType) return false;
      if (TraceId != other.TraceId) return false;
      if (ParentTraceSegmentId != other.ParentTraceSegmentId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (ParentService != other.ParentService) return false;
      if (ParentServiceInstance != other.ParentServiceInstance) return false;
      if (ParentEndpoint != other.ParentEndpoint) return false;
      if (NetworkAddressUsedAtPeer != other.NetworkAddressUsedAtPeer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (RefType != global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess) hash ^= RefType.GetHashCode();
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (ParentTraceSegmentId.Length != 0) hash ^= ParentTraceSegmentId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (ParentService.Length != 0) hash ^= ParentService.GetHashCode();
      if (ParentServiceInstance.Length != 0) hash ^= ParentServiceInstance.GetHashCode();
      if (ParentEndpoint.Length != 0) hash ^= ParentEndpoint.GetHashCode();
      if (NetworkAddressUsedAtPeer.Length != 0) hash ^= NetworkAddressUsedAtPeer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (RefType != global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefType);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceId);
      }
      if (ParentTraceSegmentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentSpanId);
      }
      if (ParentService.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParentService);
      }
      if (ParentServiceInstance.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ParentServiceInstance);
      }
      if (ParentEndpoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentEndpoint);
      }
      if (NetworkAddressUsedAtPeer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetworkAddressUsedAtPeer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (RefType != global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess) {
        output.WriteRawTag(8);
        output.WriteEnum((int) RefType);
      }
      if (TraceId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceId);
      }
      if (ParentTraceSegmentId.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ParentSpanId);
      }
      if (ParentService.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(ParentService);
      }
      if (ParentServiceInstance.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ParentServiceInstance);
      }
      if (ParentEndpoint.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(ParentEndpoint);
      }
      if (NetworkAddressUsedAtPeer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(NetworkAddressUsedAtPeer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (RefType != global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefType);
      }
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (ParentTraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentTraceSegmentId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (ParentService.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentService);
      }
      if (ParentServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentServiceInstance);
      }
      if (ParentEndpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ParentEndpoint);
      }
      if (NetworkAddressUsedAtPeer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NetworkAddressUsedAtPeer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentReference other) {
      if (other == null) {
        return;
      }
      if (other.RefType != global::SkyWalking.NetworkProtocol.V3.RefType.CrossProcess) {
        RefType = other.RefType;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.ParentTraceSegmentId.Length != 0) {
        ParentTraceSegmentId = other.ParentTraceSegmentId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.ParentService.Length != 0) {
        ParentService = other.ParentService;
      }
      if (other.ParentServiceInstance.Length != 0) {
        ParentServiceInstance = other.ParentServiceInstance;
      }
      if (other.ParentEndpoint.Length != 0) {
        ParentEndpoint = other.ParentEndpoint;
      }
      if (other.NetworkAddressUsedAtPeer.Length != 0) {
        NetworkAddressUsedAtPeer = other.NetworkAddressUsedAtPeer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            RefType = (global::SkyWalking.NetworkProtocol.V3.RefType) input.ReadEnum();
            break;
          }
          case 18: {
            TraceId = input.ReadString();
            break;
          }
          case 26: {
            ParentTraceSegmentId = input.ReadString();
            break;
          }
          case 32: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 42: {
            ParentService = input.ReadString();
            break;
          }
          case 50: {
            ParentServiceInstance = input.ReadString();
            break;
          }
          case 58: {
            ParentEndpoint = input.ReadString();
            break;
          }
          case 66: {
            NetworkAddressUsedAtPeer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            RefType = (global::SkyWalking.NetworkProtocol.V3.RefType) input.ReadEnum();
            break;
          }
          case 18: {
            TraceId = input.ReadString();
            break;
          }
          case 26: {
            ParentTraceSegmentId = input.ReadString();
            break;
          }
          case 32: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 42: {
            ParentService = input.ReadString();
            break;
          }
          case 50: {
            ParentServiceInstance = input.ReadString();
            break;
          }
          case 58: {
            ParentEndpoint = input.ReadString();
            break;
          }
          case 66: {
            NetworkAddressUsedAtPeer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Span represents a execution unit in the system, with duration and many other attributes.
  /// Span could be a method, a RPC, MQ message produce or consume.
  /// In the practice, the span should be added when it is really necessary, to avoid payload overhead.
  /// We recommend to creating spans in across process(client/server of RPC/MQ) and across thread cases only.
  /// </summary>
  public sealed partial class SpanObject : pb::IMessage<SpanObject>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpanObject> _parser = new pb::MessageParser<SpanObject>(() => new SpanObject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanObject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject(SpanObject other) : this() {
      spanId_ = other.spanId_;
      parentSpanId_ = other.parentSpanId_;
      startTime_ = other.startTime_;
      endTime_ = other.endTime_;
      refs_ = other.refs_.Clone();
      operationName_ = other.operationName_;
      peer_ = other.peer_;
      spanType_ = other.spanType_;
      spanLayer_ = other.spanLayer_;
      componentId_ = other.componentId_;
      isError_ = other.isError_;
      tags_ = other.tags_.Clone();
      logs_ = other.logs_.Clone();
      skipAnalysis_ = other.skipAnalysis_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanObject Clone() {
      return new SpanObject(this);
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 1;
    private int spanId_;
    /// <summary>
    /// The number id of the span. Should be unique in the whole segment.
    /// Starting at 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    /// <summary>Field number for the "parentSpanId" field.</summary>
    public const int ParentSpanIdFieldNumber = 2;
    private int parentSpanId_;
    /// <summary>
    /// The number id of the parent span in the whole segment.
    /// -1 represents no parent span.
    /// Also, be known as the root/first span of the segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ParentSpanId {
      get { return parentSpanId_; }
      set {
        parentSpanId_ = value;
      }
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 3;
    private long startTime_;
    /// <summary>
    /// Start timestamp in milliseconds of this span,
    /// measured between the current time and midnight, January 1, 1970 UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 4;
    private long endTime_;
    /// <summary>
    /// End timestamp in milliseconds of this span,
    /// measured between the current time and midnight, January 1, 1970 UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "refs" field.</summary>
    public const int RefsFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.SegmentReference> _repeated_refs_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.V3.SegmentReference.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference> refs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference>();
    /// <summary>
    /// &lt;Optional>
    /// In the across thread and across process, these references targeting the parent segments.
    /// The references usually have only one element, but in batch consumer case, such as in MQ or async batch process, it could be multiple.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentReference> Refs {
      get { return refs_; }
    }

    /// <summary>Field number for the "operationName" field.</summary>
    public const int OperationNameFieldNumber = 6;
    private string operationName_ = "";
    /// <summary>
    /// A logic name represents this span.
    ///
    /// We don't recommend to include the parameter, such as HTTP request parameters, as a part of the operation, especially this is the name of the entry span.
    /// All statistic for the endpoints are aggregated base on this name. Those parameters should be added in the tags if necessary.
    /// If in some cases, it have to be a part of the operation name,
    /// users should use the Group Parameterized Endpoints capability at the backend to get the meaningful metrics.
    /// Read https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/endpoint-grouping-rules.md
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string OperationName {
      get { return operationName_; }
      set {
        operationName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "peer" field.</summary>
    public const int PeerFieldNumber = 7;
    private string peer_ = "";
    /// <summary>
    /// Remote address of the peer in RPC/MQ case.
    /// This is required when spanType = Exit, as it is a part of the SkyWalking STAM(Streaming Topology Analysis Method).
    /// For more details, read https://wu-sheng.github.io/STAM/
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Peer {
      get { return peer_; }
      set {
        peer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanType" field.</summary>
    public const int SpanTypeFieldNumber = 8;
    private global::SkyWalking.NetworkProtocol.V3.SpanType spanType_ = global::SkyWalking.NetworkProtocol.V3.SpanType.Entry;
    /// <summary>
    /// Span type represents the role in the RPC context.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.SpanType SpanType {
      get { return spanType_; }
      set {
        spanType_ = value;
      }
    }

    /// <summary>Field number for the "spanLayer" field.</summary>
    public const int SpanLayerFieldNumber = 9;
    private global::SkyWalking.NetworkProtocol.V3.SpanLayer spanLayer_ = global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown;
    /// <summary>
    /// Span layer represent the component tech stack, related to the network tech.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.SpanLayer SpanLayer {
      get { return spanLayer_; }
      set {
        spanLayer_ = value;
      }
    }

    /// <summary>Field number for the "componentId" field.</summary>
    public const int ComponentIdFieldNumber = 10;
    private int componentId_;
    /// <summary>
    /// Component id is a predefinited number id in the SkyWalking.
    /// It represents the framework, tech stack used by this tracked span, such as Spring.
    /// All IDs are defined in the https://github.com/apache/skywalking/blob/master/oap-server/server-bootstrap/src/main/resources/component-libraries.yml
    /// Send a pull request if you want to add languages, components or mapping defintions,
    /// all public components could be accepted.
    /// Follow this doc for more details, https://github.com/apache/skywalking/blob/master/docs/en/guides/Component-library-settings.md
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int ComponentId {
      get { return componentId_; }
      set {
        componentId_ = value;
      }
    }

    /// <summary>Field number for the "isError" field.</summary>
    public const int IsErrorFieldNumber = 11;
    private bool isError_;
    /// <summary>
    /// The status of the span. False means the tracked execution ends in the unexpected status.
    /// This affects the successful rate statistic in the backend.
    /// Exception or error code happened in the tracked process doesn't mean isError == true, the implementations of agent plugin and tracing SDK make the final decision.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsError {
      get { return isError_; }
      set {
        isError_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 12;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(98, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> tags_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// String key, String value pair.
    /// Tags provides more informance, includes parameters.
    ///
    /// In the OAP backend analysis, some special tag or tag combination could provide other advanced features.
    /// https://github.com/apache/skywalking/blob/master/docs/en/guides/Java-Plugin-Development-Guide.md#special-span-tags
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 13;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.Log> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(106, global::SkyWalking.NetworkProtocol.V3.Log.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log> logs_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log>();
    /// <summary>
    /// String key, String value pair with an accurate timestamp.
    /// Logging some events happening in the context of the span duration.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.Log> Logs {
      get { return logs_; }
    }

    /// <summary>Field number for the "skipAnalysis" field.</summary>
    public const int SkipAnalysisFieldNumber = 14;
    private bool skipAnalysis_;
    /// <summary>
    /// Force the backend don't do analysis, if the value is TRUE.
    /// The backend has its own configurations to follow or override this.
    ///
    /// Use this mostly because the agent/SDK could know more context of the service role.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool SkipAnalysis {
      get { return skipAnalysis_; }
      set {
        skipAnalysis_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanObject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanObject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SpanId != other.SpanId) return false;
      if (ParentSpanId != other.ParentSpanId) return false;
      if (StartTime != other.StartTime) return false;
      if (EndTime != other.EndTime) return false;
      if(!refs_.Equals(other.refs_)) return false;
      if (OperationName != other.OperationName) return false;
      if (Peer != other.Peer) return false;
      if (SpanType != other.SpanType) return false;
      if (SpanLayer != other.SpanLayer) return false;
      if (ComponentId != other.ComponentId) return false;
      if (IsError != other.IsError) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!logs_.Equals(other.logs_)) return false;
      if (SkipAnalysis != other.SkipAnalysis) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (SpanId != 0) hash ^= SpanId.GetHashCode();
      if (ParentSpanId != 0) hash ^= ParentSpanId.GetHashCode();
      if (StartTime != 0L) hash ^= StartTime.GetHashCode();
      if (EndTime != 0L) hash ^= EndTime.GetHashCode();
      hash ^= refs_.GetHashCode();
      if (OperationName.Length != 0) hash ^= OperationName.GetHashCode();
      if (Peer.Length != 0) hash ^= Peer.GetHashCode();
      if (SpanType != global::SkyWalking.NetworkProtocol.V3.SpanType.Entry) hash ^= SpanType.GetHashCode();
      if (SpanLayer != global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown) hash ^= SpanLayer.GetHashCode();
      if (ComponentId != 0) hash ^= ComponentId.GetHashCode();
      if (IsError != false) hash ^= IsError.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= logs_.GetHashCode();
      if (SkipAnalysis != false) hash ^= SkipAnalysis.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SpanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpanId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentSpanId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      refs_.WriteTo(output, _repeated_refs_codec);
      if (OperationName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OperationName);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Peer);
      }
      if (SpanType != global::SkyWalking.NetworkProtocol.V3.SpanType.Entry) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SpanType);
      }
      if (SpanLayer != global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SpanLayer);
      }
      if (ComponentId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ComponentId);
      }
      if (IsError != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsError);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      logs_.WriteTo(output, _repeated_logs_codec);
      if (SkipAnalysis != false) {
        output.WriteRawTag(112);
        output.WriteBool(SkipAnalysis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SpanId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SpanId);
      }
      if (ParentSpanId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(ParentSpanId);
      }
      if (StartTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartTime);
      }
      if (EndTime != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(EndTime);
      }
      refs_.WriteTo(ref output, _repeated_refs_codec);
      if (OperationName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(OperationName);
      }
      if (Peer.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Peer);
      }
      if (SpanType != global::SkyWalking.NetworkProtocol.V3.SpanType.Entry) {
        output.WriteRawTag(64);
        output.WriteEnum((int) SpanType);
      }
      if (SpanLayer != global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown) {
        output.WriteRawTag(72);
        output.WriteEnum((int) SpanLayer);
      }
      if (ComponentId != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ComponentId);
      }
      if (IsError != false) {
        output.WriteRawTag(88);
        output.WriteBool(IsError);
      }
      tags_.WriteTo(ref output, _repeated_tags_codec);
      logs_.WriteTo(ref output, _repeated_logs_codec);
      if (SkipAnalysis != false) {
        output.WriteRawTag(112);
        output.WriteBool(SkipAnalysis);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (SpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpanId);
      }
      if (ParentSpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ParentSpanId);
      }
      if (StartTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartTime);
      }
      if (EndTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(EndTime);
      }
      size += refs_.CalculateSize(_repeated_refs_codec);
      if (OperationName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(OperationName);
      }
      if (Peer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Peer);
      }
      if (SpanType != global::SkyWalking.NetworkProtocol.V3.SpanType.Entry) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanType);
      }
      if (SpanLayer != global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SpanLayer);
      }
      if (ComponentId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ComponentId);
      }
      if (IsError != false) {
        size += 1 + 1;
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (SkipAnalysis != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanObject other) {
      if (other == null) {
        return;
      }
      if (other.SpanId != 0) {
        SpanId = other.SpanId;
      }
      if (other.ParentSpanId != 0) {
        ParentSpanId = other.ParentSpanId;
      }
      if (other.StartTime != 0L) {
        StartTime = other.StartTime;
      }
      if (other.EndTime != 0L) {
        EndTime = other.EndTime;
      }
      refs_.Add(other.refs_);
      if (other.OperationName.Length != 0) {
        OperationName = other.OperationName;
      }
      if (other.Peer.Length != 0) {
        Peer = other.Peer;
      }
      if (other.SpanType != global::SkyWalking.NetworkProtocol.V3.SpanType.Entry) {
        SpanType = other.SpanType;
      }
      if (other.SpanLayer != global::SkyWalking.NetworkProtocol.V3.SpanLayer.Unknown) {
        SpanLayer = other.SpanLayer;
      }
      if (other.ComponentId != 0) {
        ComponentId = other.ComponentId;
      }
      if (other.IsError != false) {
        IsError = other.IsError;
      }
      tags_.Add(other.tags_);
      logs_.Add(other.logs_);
      if (other.SkipAnalysis != false) {
        SkipAnalysis = other.SkipAnalysis;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SpanId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 42: {
            refs_.AddEntriesFrom(input, _repeated_refs_codec);
            break;
          }
          case 50: {
            OperationName = input.ReadString();
            break;
          }
          case 58: {
            Peer = input.ReadString();
            break;
          }
          case 64: {
            SpanType = (global::SkyWalking.NetworkProtocol.V3.SpanType) input.ReadEnum();
            break;
          }
          case 72: {
            SpanLayer = (global::SkyWalking.NetworkProtocol.V3.SpanLayer) input.ReadEnum();
            break;
          }
          case 80: {
            ComponentId = input.ReadInt32();
            break;
          }
          case 88: {
            IsError = input.ReadBool();
            break;
          }
          case 98: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 106: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
          case 112: {
            SkipAnalysis = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SpanId = input.ReadInt32();
            break;
          }
          case 16: {
            ParentSpanId = input.ReadInt32();
            break;
          }
          case 24: {
            StartTime = input.ReadInt64();
            break;
          }
          case 32: {
            EndTime = input.ReadInt64();
            break;
          }
          case 42: {
            refs_.AddEntriesFrom(ref input, _repeated_refs_codec);
            break;
          }
          case 50: {
            OperationName = input.ReadString();
            break;
          }
          case 58: {
            Peer = input.ReadString();
            break;
          }
          case 64: {
            SpanType = (global::SkyWalking.NetworkProtocol.V3.SpanType) input.ReadEnum();
            break;
          }
          case 72: {
            SpanLayer = (global::SkyWalking.NetworkProtocol.V3.SpanLayer) input.ReadEnum();
            break;
          }
          case 80: {
            ComponentId = input.ReadInt32();
            break;
          }
          case 88: {
            IsError = input.ReadBool();
            break;
          }
          case 98: {
            tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
            break;
          }
          case 106: {
            logs_.AddEntriesFrom(ref input, _repeated_logs_codec);
            break;
          }
          case 112: {
            SkipAnalysis = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class Log : pb::IMessage<Log>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Log> _parser = new pb::MessageParser<Log>(() => new Log());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<Log> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log(Log other) : this() {
      time_ = other.time_;
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public Log Clone() {
      return new Log(this);
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 1;
    private long time_;
    /// <summary>
    /// The timestamp in milliseconds of this event.,
    /// measured between the current time and midnight, January 1, 1970 UTC.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 2;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> data_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// String key, String value pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as Log);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(Log other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Time != other.Time) return false;
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Time != 0L) hash ^= Time.GetHashCode();
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Time != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Time);
      }
      data_.WriteTo(ref output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Time != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Time);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(Log other) {
      if (other == null) {
        return;
      }
      if (other.Time != 0L) {
        Time = other.Time;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Time = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(ref input, _repeated_data_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// A ID could be represented by multiple string sections.
  /// </summary>
  public sealed partial class ID : pb::IMessage<ID>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ID> _parser = new pb::MessageParser<ID>(() => new ID());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ID> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID(ID other) : this() {
      id_ = other.id_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ID Clone() {
      return new ID(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private static readonly pb::FieldCodec<string> _repeated_id_codec
        = pb::FieldCodec.ForString(10);
    private readonly pbc::RepeatedField<string> id_ = new pbc::RepeatedField<string>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> Id {
      get { return id_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ID);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ID other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!id_.Equals(other.id_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= id_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      id_.WriteTo(output, _repeated_id_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      id_.WriteTo(ref output, _repeated_id_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += id_.CalculateSize(_repeated_id_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ID other) {
      if (other == null) {
        return;
      }
      id_.Add(other.id_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            id_.AddEntriesFrom(input, _repeated_id_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            id_.AddEntriesFrom(ref input, _repeated_id_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The segment collections for trace report in batch and sync mode.
  /// </summary>
  public sealed partial class SegmentCollection : pb::IMessage<SegmentCollection>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SegmentCollection> _parser = new pb::MessageParser<SegmentCollection>(() => new SegmentCollection());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SegmentCollection> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentCollection() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentCollection(SegmentCollection other) : this() {
      segments_ = other.segments_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SegmentCollection Clone() {
      return new SegmentCollection(this);
    }

    /// <summary>Field number for the "segments" field.</summary>
    public const int SegmentsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.SegmentObject> _repeated_segments_codec
        = pb::FieldCodec.ForMessage(10, global::SkyWalking.NetworkProtocol.V3.SegmentObject.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentObject> segments_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentObject>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.SegmentObject> Segments {
      get { return segments_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SegmentCollection);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SegmentCollection other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!segments_.Equals(other.segments_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= segments_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      segments_.WriteTo(output, _repeated_segments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      segments_.WriteTo(ref output, _repeated_segments_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += segments_.CalculateSize(_repeated_segments_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SegmentCollection other) {
      if (other == null) {
        return;
      }
      segments_.Add(other.segments_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            segments_.AddEntriesFrom(input, _repeated_segments_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            segments_.AddEntriesFrom(ref input, _repeated_segments_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// SpanAttachedEvent represents an attached event for a traced RPC.
  ///
  /// When an RPC is being traced by the in-process language agent, a span would be reported by the client-side agent.
  /// And the rover would be aware of this RPC due to the existing tracing header.
  /// Then, the rover agent collects extra information from the OS level to provide assistance information to diagnose network performance.
  /// </summary>
  public sealed partial class SpanAttachedEvent : pb::IMessage<SpanAttachedEvent>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<SpanAttachedEvent> _parser = new pb::MessageParser<SpanAttachedEvent>(() => new SpanAttachedEvent());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SpanAttachedEvent> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.TracingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanAttachedEvent() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanAttachedEvent(SpanAttachedEvent other) : this() {
      startTime_ = other.startTime_ != null ? other.startTime_.Clone() : null;
      event_ = other.event_;
      endTime_ = other.endTime_ != null ? other.endTime_.Clone() : null;
      tags_ = other.tags_.Clone();
      summary_ = other.summary_.Clone();
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SpanAttachedEvent Clone() {
      return new SpanAttachedEvent(this);
    }

    /// <summary>Field number for the "startTime" field.</summary>
    public const int StartTimeFieldNumber = 1;
    private global::SkyWalking.NetworkProtocol.V3.Instant startTime_;
    /// <summary>
    /// The nanosecond timestamp of the event's start time.
    /// Notice, most unit of timestamp in SkyWalking is milliseconds, but NANO-SECOND is required here.
    /// Because the attached event happens in the OS syscall level, most of them are executed rapidly.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.Instant StartTime {
      get { return startTime_; }
      set {
        startTime_ = value;
      }
    }

    /// <summary>Field number for the "event" field.</summary>
    public const int EventFieldNumber = 2;
    private string event_ = "";
    /// <summary>
    /// The official event name.
    /// For example, the event name is a method signature from syscall stack.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Event {
      get { return event_; }
      set {
        event_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endTime" field.</summary>
    public const int EndTimeFieldNumber = 3;
    private global::SkyWalking.NetworkProtocol.V3.Instant endTime_;
    /// <summary>
    /// [Optional] The nanosecond timestamp of the event's end time.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.Instant EndTime {
      get { return endTime_; }
      set {
        endTime_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 4;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_tags_codec
        = pb::FieldCodec.ForMessage(34, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> tags_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// The tags for this event includes some extra OS level information,
    /// such as
    /// 1. net_device used for this exit span.
    /// 2. network L7 protocol
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "summary" field.</summary>
    public const int SummaryFieldNumber = 5;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyIntValuePair> _repeated_summary_codec
        = pb::FieldCodec.ForMessage(42, global::SkyWalking.NetworkProtocol.V3.KeyIntValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyIntValuePair> summary_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyIntValuePair>();
    /// <summary>
    /// The summary of statistics during this event.
    /// Each statistic provides a name(metric name) to represent the name, and an int64/long as the value.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyIntValuePair> Summary {
      get { return summary_; }
    }

    /// <summary>Field number for the "traceContext" field.</summary>
    public const int TraceContextFieldNumber = 6;
    private global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference traceContext_;
    /// <summary>
    /// Refer to a trace context decoded from `sw8` header through network, such as HTTP header, MQ metadata
    /// https://skywalking.apache.org/docs/main/next/en/protocols/skywalking-cross-process-propagation-headers-protocol-v3/#standard-header-item
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SpanAttachedEvent);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SpanAttachedEvent other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(StartTime, other.StartTime)) return false;
      if (Event != other.Event) return false;
      if (!object.Equals(EndTime, other.EndTime)) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!summary_.Equals(other.summary_)) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (startTime_ != null) hash ^= StartTime.GetHashCode();
      if (Event.Length != 0) hash ^= Event.GetHashCode();
      if (endTime_ != null) hash ^= EndTime.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= summary_.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (Event.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Event);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      summary_.WriteTo(output, _repeated_summary_codec);
      if (traceContext_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (startTime_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StartTime);
      }
      if (Event.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Event);
      }
      if (endTime_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(EndTime);
      }
      tags_.WriteTo(ref output, _repeated_tags_codec);
      summary_.WriteTo(ref output, _repeated_summary_codec);
      if (traceContext_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TraceContext);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (startTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StartTime);
      }
      if (Event.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Event);
      }
      if (endTime_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(EndTime);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += summary_.CalculateSize(_repeated_summary_codec);
      if (traceContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SpanAttachedEvent other) {
      if (other == null) {
        return;
      }
      if (other.startTime_ != null) {
        if (startTime_ == null) {
          StartTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
        }
        StartTime.MergeFrom(other.StartTime);
      }
      if (other.Event.Length != 0) {
        Event = other.Event;
      }
      if (other.endTime_ != null) {
        if (endTime_ == null) {
          EndTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
        }
        EndTime.MergeFrom(other.EndTime);
      }
      tags_.Add(other.tags_);
      summary_.Add(other.summary_);
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            Event = input.ReadString();
            break;
          }
          case 26: {
            if (endTime_ == null) {
              EndTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 42: {
            summary_.AddEntriesFrom(input, _repeated_summary_codec);
            break;
          }
          case 50: {
            if (traceContext_ == null) {
              TraceContext = new global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            if (startTime_ == null) {
              StartTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(StartTime);
            break;
          }
          case 18: {
            Event = input.ReadString();
            break;
          }
          case 26: {
            if (endTime_ == null) {
              EndTime = new global::SkyWalking.NetworkProtocol.V3.Instant();
            }
            input.ReadMessage(EndTime);
            break;
          }
          case 34: {
            tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
            break;
          }
          case 42: {
            summary_.AddEntriesFrom(ref input, _repeated_summary_codec);
            break;
          }
          case 50: {
            if (traceContext_ == null) {
              TraceContext = new global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReference();
            }
            input.ReadMessage(TraceContext);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the SpanAttachedEvent message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum SpanReferenceType {
        [pbr::OriginalName("SKYWALKING")] Skywalking = 0,
        [pbr::OriginalName("ZIPKIN")] Zipkin = 1,
      }

      public sealed partial class SpanReference : pb::IMessage<SpanReference>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<SpanReference> _parser = new pb::MessageParser<SpanReference>(() => new SpanReference());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pb::MessageParser<SpanReference> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpanReference() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpanReference(SpanReference other) : this() {
          type_ = other.type_;
          traceId_ = other.traceId_;
          traceSegmentId_ = other.traceSegmentId_;
          spanId_ = other.spanId_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public SpanReference Clone() {
          return new SpanReference(this);
        }

        /// <summary>Field number for the "type" field.</summary>
        public const int TypeFieldNumber = 1;
        private global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType type_ = global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType Type {
          get { return type_; }
          set {
            type_ = value;
          }
        }

        /// <summary>Field number for the "traceId" field.</summary>
        public const int TraceIdFieldNumber = 2;
        private string traceId_ = "";
        /// <summary>
        /// [Optional] A string id represents the whole trace.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraceId {
          get { return traceId_; }
          set {
            traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "traceSegmentId" field.</summary>
        public const int TraceSegmentIdFieldNumber = 3;
        private string traceSegmentId_ = "";
        /// <summary>
        /// A unique id represents this segment. Other segments could use this id to reference as a child segment.
        /// [Optional] when this span reference
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string TraceSegmentId {
          get { return traceSegmentId_; }
          set {
            traceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "spanId" field.</summary>
        public const int SpanIdFieldNumber = 4;
        private string spanId_ = "";
        /// <summary>
        /// If type == SKYWALKING
        /// The number id of the span. Should be unique in the whole segment.
        /// Starting at 0
        ///
        /// If type == ZIPKIN
        /// The type of span ID is string.
        /// </summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public string SpanId {
          get { return spanId_; }
          set {
            spanId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override bool Equals(object other) {
          return Equals(other as SpanReference);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public bool Equals(SpanReference other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Type != other.Type) return false;
          if (TraceId != other.TraceId) return false;
          if (TraceSegmentId != other.TraceSegmentId) return false;
          if (SpanId != other.SpanId) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override int GetHashCode() {
          int hash = 1;
          if (Type != global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking) hash ^= Type.GetHashCode();
          if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
          if (TraceSegmentId.Length != 0) hash ^= TraceSegmentId.GetHashCode();
          if (SpanId.Length != 0) hash ^= SpanId.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Type != global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (TraceId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TraceId);
          }
          if (TraceSegmentId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TraceSegmentId);
          }
          if (SpanId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SpanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Type != global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking) {
            output.WriteRawTag(8);
            output.WriteEnum((int) Type);
          }
          if (TraceId.Length != 0) {
            output.WriteRawTag(18);
            output.WriteString(TraceId);
          }
          if (TraceSegmentId.Length != 0) {
            output.WriteRawTag(26);
            output.WriteString(TraceSegmentId);
          }
          if (SpanId.Length != 0) {
            output.WriteRawTag(34);
            output.WriteString(SpanId);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public int CalculateSize() {
          int size = 0;
          if (Type != global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking) {
            size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
          }
          if (TraceId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
          }
          if (TraceSegmentId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceSegmentId);
          }
          if (SpanId.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(SpanId);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(SpanReference other) {
          if (other == null) {
            return;
          }
          if (other.Type != global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType.Skywalking) {
            Type = other.Type;
          }
          if (other.TraceId.Length != 0) {
            TraceId = other.TraceId;
          }
          if (other.TraceSegmentId.Length != 0) {
            TraceSegmentId = other.TraceSegmentId;
          }
          if (other.SpanId.Length != 0) {
            SpanId = other.SpanId;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Type = (global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType) input.ReadEnum();
                break;
              }
              case 18: {
                TraceId = input.ReadString();
                break;
              }
              case 26: {
                TraceSegmentId = input.ReadString();
                break;
              }
              case 34: {
                SpanId = input.ReadString();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Type = (global::SkyWalking.NetworkProtocol.V3.SpanAttachedEvent.Types.SpanReferenceType) input.ReadEnum();
                break;
              }
              case 18: {
                TraceId = input.ReadString();
                break;
              }
              case 26: {
                TraceSegmentId = input.ReadString();
                break;
              }
              case 34: {
                SpanId = input.ReadString();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
