// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: logging/Logging.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SkyWalking.NetworkProtocol.V3 {

  /// <summary>Holder for reflection information generated from logging/Logging.proto</summary>
  public static partial class LoggingReflection {

    #region Descriptor
    /// <summary>File descriptor for logging/Logging.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoggingReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVsb2dnaW5nL0xvZ2dpbmcucHJvdG8SDXNreXdhbGtpbmcudjMaE2NvbW1v",
            "bi9Db21tb24ucHJvdG8aFGNvbW1vbi9Db21tYW5kLnByb3RvIuoBCgdMb2dE",
            "YXRhEhEKCXRpbWVzdGFtcBgBIAEoAxIPCgdzZXJ2aWNlGAIgASgJEhcKD3Nl",
            "cnZpY2VJbnN0YW5jZRgDIAEoCRIQCghlbmRwb2ludBgEIAEoCRIoCgRib2R5",
            "GAUgASgLMhouc2t5d2Fsa2luZy52My5Mb2dEYXRhQm9keRIxCgx0cmFjZUNv",
            "bnRleHQYBiABKAsyGy5za3l3YWxraW5nLnYzLlRyYWNlQ29udGV4dBIkCgR0",
            "YWdzGAcgASgLMhYuc2t5d2Fsa2luZy52My5Mb2dUYWdzEg0KBWxheWVyGAgg",
            "ASgJIp4BCgtMb2dEYXRhQm9keRIMCgR0eXBlGAEgASgJEiYKBHRleHQYAiAB",
            "KAsyFi5za3l3YWxraW5nLnYzLlRleHRMb2dIABImCgRqc29uGAMgASgLMhYu",
            "c2t5d2Fsa2luZy52My5KU09OTG9nSAASJgoEeWFtbBgEIAEoCzIWLnNreXdh",
            "bGtpbmcudjMuWUFNTExvZ0gAQgkKB2NvbnRlbnQiFwoHVGV4dExvZxIMCgR0",
            "ZXh0GAEgASgJIhcKB0pTT05Mb2cSDAoEanNvbhgBIAEoCSIXCgdZQU1MTG9n",
            "EgwKBHlhbWwYASABKAkiRwoMVHJhY2VDb250ZXh0Eg8KB3RyYWNlSWQYASAB",
            "KAkSFgoOdHJhY2VTZWdtZW50SWQYAiABKAkSDgoGc3BhbklkGAMgASgFIjoK",
            "B0xvZ1RhZ3MSLwoEZGF0YRgBIAMoCzIhLnNreXdhbGtpbmcudjMuS2V5U3Ry",
            "aW5nVmFsdWVQYWlyMlIKEExvZ1JlcG9ydFNlcnZpY2USPgoHY29sbGVjdBIW",
            "LnNreXdhbGtpbmcudjMuTG9nRGF0YRoXLnNreXdhbGtpbmcudjMuQ29tbWFu",
            "ZHMiACgBQoUBCixvcmcuYXBhY2hlLnNreXdhbGtpbmcuYXBtLm5ldHdvcmsu",
            "bG9nZ2luZy52M1ABWjNza3l3YWxraW5nLmFwYWNoZS5vcmcvcmVwby9nb2Fw",
            "aS9jb2xsZWN0L2xvZ2dpbmcvdjOqAh1Ta3lXYWxraW5nLk5ldHdvcmtQcm90",
            "b2NvbC5WM2IGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::SkyWalking.NetworkProtocol.V3.CommonReflection.Descriptor, global::SkyWalking.NetworkProtocol.V3.CommandReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.LogData), global::SkyWalking.NetworkProtocol.V3.LogData.Parser, new[]{ "Timestamp", "Service", "ServiceInstance", "Endpoint", "Body", "TraceContext", "Tags", "Layer" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.LogDataBody), global::SkyWalking.NetworkProtocol.V3.LogDataBody.Parser, new[]{ "Type", "Text", "Json", "Yaml" }, new[]{ "Content" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.TextLog), global::SkyWalking.NetworkProtocol.V3.TextLog.Parser, new[]{ "Text" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.JSONLog), global::SkyWalking.NetworkProtocol.V3.JSONLog.Parser, new[]{ "Json" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.YAMLLog), global::SkyWalking.NetworkProtocol.V3.YAMLLog.Parser, new[]{ "Yaml" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.TraceContext), global::SkyWalking.NetworkProtocol.V3.TraceContext.Parser, new[]{ "TraceId", "TraceSegmentId", "SpanId" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::SkyWalking.NetworkProtocol.V3.LogTags), global::SkyWalking.NetworkProtocol.V3.LogTags.Parser, new[]{ "Data" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// Log data is collected through file scratcher of agent.
  /// Natively, Satellite provides various ways to collect logs.
  /// </summary>
  public sealed partial class LogData : pb::IMessage<LogData>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogData> _parser = new pb::MessageParser<LogData>(() => new LogData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogData(LogData other) : this() {
      timestamp_ = other.timestamp_;
      service_ = other.service_;
      serviceInstance_ = other.serviceInstance_;
      endpoint_ = other.endpoint_;
      body_ = other.body_ != null ? other.body_.Clone() : null;
      traceContext_ = other.traceContext_ != null ? other.traceContext_.Clone() : null;
      tags_ = other.tags_ != null ? other.tags_.Clone() : null;
      layer_ = other.layer_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogData Clone() {
      return new LogData(this);
    }

    /// <summary>Field number for the "timestamp" field.</summary>
    public const int TimestampFieldNumber = 1;
    private long timestamp_;
    /// <summary>
    /// [Optional] The timestamp of the log, in millisecond.
    /// If not set, OAP server would use the received timestamp as log's timestamp, or relies on the OAP server analyzer.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    /// <summary>Field number for the "service" field.</summary>
    public const int ServiceFieldNumber = 2;
    private string service_ = "";
    /// <summary>
    /// [Required] **Service**. Represents a set/group of workloads which provide the same behaviours for incoming requests.
    ///
    /// The logic name represents the service. This would show as a separate node in the topology.
    /// The metrics analyzed from the spans, would be aggregated for this entity as the service level.
    ///
    /// If this is not the first element of the streaming, use the previous not-null name as the service name.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Service {
      get { return service_; }
      set {
        service_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "serviceInstance" field.</summary>
    public const int ServiceInstanceFieldNumber = 3;
    private string serviceInstance_ = "";
    /// <summary>
    /// [Optional] **Service Instance**. Each individual workload in the Service group is known as an instance. Like `pods` in Kubernetes, it
    /// doesn't need to be a single OS process, however, if you are using instrument agents, an instance is actually a real OS process.
    ///
    /// The logic name represents the service instance. This would show as a separate node in the instance relationship.
    /// The metrics analyzed from the spans, would be aggregated for this entity as the service instance level.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string ServiceInstance {
      get { return serviceInstance_; }
      set {
        serviceInstance_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "endpoint" field.</summary>
    public const int EndpointFieldNumber = 4;
    private string endpoint_ = "";
    /// <summary>
    /// [Optional] **Endpoint**. A path in a service for incoming requests, such as an HTTP URI path or a gRPC service class + method signature.
    ///
    /// The logic name represents the endpoint, which logs belong.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Endpoint {
      get { return endpoint_; }
      set {
        endpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "body" field.</summary>
    public const int BodyFieldNumber = 5;
    private global::SkyWalking.NetworkProtocol.V3.LogDataBody body_;
    /// <summary>
    /// [Required] The content of the log.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.LogDataBody Body {
      get { return body_; }
      set {
        body_ = value;
      }
    }

    /// <summary>Field number for the "traceContext" field.</summary>
    public const int TraceContextFieldNumber = 6;
    private global::SkyWalking.NetworkProtocol.V3.TraceContext traceContext_;
    /// <summary>
    /// [Optional] Logs with trace context
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.TraceContext TraceContext {
      get { return traceContext_; }
      set {
        traceContext_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 7;
    private global::SkyWalking.NetworkProtocol.V3.LogTags tags_;
    /// <summary>
    /// [Optional] The available tags. OAP server could provide search/analysis capabilities based on these.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.LogTags Tags {
      get { return tags_; }
      set {
        tags_ = value;
      }
    }

    /// <summary>Field number for the "layer" field.</summary>
    public const int LayerFieldNumber = 8;
    private string layer_ = "";
    /// <summary>
    /// [Optional] Since 9.0.0
    /// The layer of the service and servce instance. If absent, the OAP would set `layer`=`ID: 2, NAME: general`
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Layer {
      get { return layer_; }
      set {
        layer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Timestamp != other.Timestamp) return false;
      if (Service != other.Service) return false;
      if (ServiceInstance != other.ServiceInstance) return false;
      if (Endpoint != other.Endpoint) return false;
      if (!object.Equals(Body, other.Body)) return false;
      if (!object.Equals(TraceContext, other.TraceContext)) return false;
      if (!object.Equals(Tags, other.Tags)) return false;
      if (Layer != other.Layer) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Timestamp != 0L) hash ^= Timestamp.GetHashCode();
      if (Service.Length != 0) hash ^= Service.GetHashCode();
      if (ServiceInstance.Length != 0) hash ^= ServiceInstance.GetHashCode();
      if (Endpoint.Length != 0) hash ^= Endpoint.GetHashCode();
      if (body_ != null) hash ^= Body.GetHashCode();
      if (traceContext_ != null) hash ^= TraceContext.GetHashCode();
      if (tags_ != null) hash ^= Tags.GetHashCode();
      if (Layer.Length != 0) hash ^= Layer.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceInstance);
      }
      if (Endpoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Endpoint);
      }
      if (body_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Body);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TraceContext);
      }
      if (tags_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tags);
      }
      if (Layer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Layer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Service.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Service);
      }
      if (ServiceInstance.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(ServiceInstance);
      }
      if (Endpoint.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Endpoint);
      }
      if (body_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Body);
      }
      if (traceContext_ != null) {
        output.WriteRawTag(50);
        output.WriteMessage(TraceContext);
      }
      if (tags_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(Tags);
      }
      if (Layer.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(Layer);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Service.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Service);
      }
      if (ServiceInstance.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ServiceInstance);
      }
      if (Endpoint.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Endpoint);
      }
      if (body_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Body);
      }
      if (traceContext_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TraceContext);
      }
      if (tags_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Tags);
      }
      if (Layer.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Layer);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogData other) {
      if (other == null) {
        return;
      }
      if (other.Timestamp != 0L) {
        Timestamp = other.Timestamp;
      }
      if (other.Service.Length != 0) {
        Service = other.Service;
      }
      if (other.ServiceInstance.Length != 0) {
        ServiceInstance = other.ServiceInstance;
      }
      if (other.Endpoint.Length != 0) {
        Endpoint = other.Endpoint;
      }
      if (other.body_ != null) {
        if (body_ == null) {
          Body = new global::SkyWalking.NetworkProtocol.V3.LogDataBody();
        }
        Body.MergeFrom(other.Body);
      }
      if (other.traceContext_ != null) {
        if (traceContext_ == null) {
          TraceContext = new global::SkyWalking.NetworkProtocol.V3.TraceContext();
        }
        TraceContext.MergeFrom(other.TraceContext);
      }
      if (other.tags_ != null) {
        if (tags_ == null) {
          Tags = new global::SkyWalking.NetworkProtocol.V3.LogTags();
        }
        Tags.MergeFrom(other.Tags);
      }
      if (other.Layer.Length != 0) {
        Layer = other.Layer;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            ServiceInstance = input.ReadString();
            break;
          }
          case 34: {
            Endpoint = input.ReadString();
            break;
          }
          case 42: {
            if (body_ == null) {
              Body = new global::SkyWalking.NetworkProtocol.V3.LogDataBody();
            }
            input.ReadMessage(Body);
            break;
          }
          case 50: {
            if (traceContext_ == null) {
              TraceContext = new global::SkyWalking.NetworkProtocol.V3.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
          case 58: {
            if (tags_ == null) {
              Tags = new global::SkyWalking.NetworkProtocol.V3.LogTags();
            }
            input.ReadMessage(Tags);
            break;
          }
          case 66: {
            Layer = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            Service = input.ReadString();
            break;
          }
          case 26: {
            ServiceInstance = input.ReadString();
            break;
          }
          case 34: {
            Endpoint = input.ReadString();
            break;
          }
          case 42: {
            if (body_ == null) {
              Body = new global::SkyWalking.NetworkProtocol.V3.LogDataBody();
            }
            input.ReadMessage(Body);
            break;
          }
          case 50: {
            if (traceContext_ == null) {
              TraceContext = new global::SkyWalking.NetworkProtocol.V3.TraceContext();
            }
            input.ReadMessage(TraceContext);
            break;
          }
          case 58: {
            if (tags_ == null) {
              Tags = new global::SkyWalking.NetworkProtocol.V3.LogTags();
            }
            input.ReadMessage(Tags);
            break;
          }
          case 66: {
            Layer = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// The content of the log data
  /// </summary>
  public sealed partial class LogDataBody : pb::IMessage<LogDataBody>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogDataBody> _parser = new pb::MessageParser<LogDataBody>(() => new LogDataBody());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogDataBody> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogDataBody() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogDataBody(LogDataBody other) : this() {
      type_ = other.type_;
      switch (other.ContentCase) {
        case ContentOneofCase.Text:
          Text = other.Text.Clone();
          break;
        case ContentOneofCase.Json:
          Json = other.Json.Clone();
          break;
        case ContentOneofCase.Yaml:
          Yaml = other.Yaml.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogDataBody Clone() {
      return new LogDataBody(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private string type_ = "";
    /// <summary>
    /// A type to match analyzer(s) at the OAP server.
    /// The data could be analyzed at the client side, but could be partial
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Type {
      get { return type_; }
      set {
        type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 2;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.TextLog Text {
      get { return contentCase_ == ContentOneofCase.Text ? (global::SkyWalking.NetworkProtocol.V3.TextLog) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Text;
      }
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 3;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.JSONLog Json {
      get { return contentCase_ == ContentOneofCase.Json ? (global::SkyWalking.NetworkProtocol.V3.JSONLog) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Json;
      }
    }

    /// <summary>Field number for the "yaml" field.</summary>
    public const int YamlFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::SkyWalking.NetworkProtocol.V3.YAMLLog Yaml {
      get { return contentCase_ == ContentOneofCase.Yaml ? (global::SkyWalking.NetworkProtocol.V3.YAMLLog) content_ : null; }
      set {
        content_ = value;
        contentCase_ = value == null ? ContentOneofCase.None : ContentOneofCase.Yaml;
      }
    }

    private object content_;
    /// <summary>Enum of possible cases for the "content" oneof.</summary>
    public enum ContentOneofCase {
      None = 0,
      Text = 2,
      Json = 3,
      Yaml = 4,
    }
    private ContentOneofCase contentCase_ = ContentOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ContentOneofCase ContentCase {
      get { return contentCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearContent() {
      contentCase_ = ContentOneofCase.None;
      content_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogDataBody);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogDataBody other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (!object.Equals(Text, other.Text)) return false;
      if (!object.Equals(Json, other.Json)) return false;
      if (!object.Equals(Yaml, other.Yaml)) return false;
      if (ContentCase != other.ContentCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type.Length != 0) hash ^= Type.GetHashCode();
      if (contentCase_ == ContentOneofCase.Text) hash ^= Text.GetHashCode();
      if (contentCase_ == ContentOneofCase.Json) hash ^= Json.GetHashCode();
      if (contentCase_ == ContentOneofCase.Yaml) hash ^= Yaml.GetHashCode();
      hash ^= (int) contentCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (contentCase_ == ContentOneofCase.Text) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (contentCase_ == ContentOneofCase.Json) {
        output.WriteRawTag(26);
        output.WriteMessage(Json);
      }
      if (contentCase_ == ContentOneofCase.Yaml) {
        output.WriteRawTag(34);
        output.WriteMessage(Yaml);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Type.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Type);
      }
      if (contentCase_ == ContentOneofCase.Text) {
        output.WriteRawTag(18);
        output.WriteMessage(Text);
      }
      if (contentCase_ == ContentOneofCase.Json) {
        output.WriteRawTag(26);
        output.WriteMessage(Json);
      }
      if (contentCase_ == ContentOneofCase.Yaml) {
        output.WriteRawTag(34);
        output.WriteMessage(Yaml);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
      }
      if (contentCase_ == ContentOneofCase.Text) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Text);
      }
      if (contentCase_ == ContentOneofCase.Json) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Json);
      }
      if (contentCase_ == ContentOneofCase.Yaml) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Yaml);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogDataBody other) {
      if (other == null) {
        return;
      }
      if (other.Type.Length != 0) {
        Type = other.Type;
      }
      switch (other.ContentCase) {
        case ContentOneofCase.Text:
          if (Text == null) {
            Text = new global::SkyWalking.NetworkProtocol.V3.TextLog();
          }
          Text.MergeFrom(other.Text);
          break;
        case ContentOneofCase.Json:
          if (Json == null) {
            Json = new global::SkyWalking.NetworkProtocol.V3.JSONLog();
          }
          Json.MergeFrom(other.Json);
          break;
        case ContentOneofCase.Yaml:
          if (Yaml == null) {
            Yaml = new global::SkyWalking.NetworkProtocol.V3.YAMLLog();
          }
          Yaml.MergeFrom(other.Yaml);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            global::SkyWalking.NetworkProtocol.V3.TextLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.TextLog();
            if (contentCase_ == ContentOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
          case 26: {
            global::SkyWalking.NetworkProtocol.V3.JSONLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.JSONLog();
            if (contentCase_ == ContentOneofCase.Json) {
              subBuilder.MergeFrom(Json);
            }
            input.ReadMessage(subBuilder);
            Json = subBuilder;
            break;
          }
          case 34: {
            global::SkyWalking.NetworkProtocol.V3.YAMLLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.YAMLLog();
            if (contentCase_ == ContentOneofCase.Yaml) {
              subBuilder.MergeFrom(Yaml);
            }
            input.ReadMessage(subBuilder);
            Yaml = subBuilder;
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Type = input.ReadString();
            break;
          }
          case 18: {
            global::SkyWalking.NetworkProtocol.V3.TextLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.TextLog();
            if (contentCase_ == ContentOneofCase.Text) {
              subBuilder.MergeFrom(Text);
            }
            input.ReadMessage(subBuilder);
            Text = subBuilder;
            break;
          }
          case 26: {
            global::SkyWalking.NetworkProtocol.V3.JSONLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.JSONLog();
            if (contentCase_ == ContentOneofCase.Json) {
              subBuilder.MergeFrom(Json);
            }
            input.ReadMessage(subBuilder);
            Json = subBuilder;
            break;
          }
          case 34: {
            global::SkyWalking.NetworkProtocol.V3.YAMLLog subBuilder = new global::SkyWalking.NetworkProtocol.V3.YAMLLog();
            if (contentCase_ == ContentOneofCase.Yaml) {
              subBuilder.MergeFrom(Yaml);
            }
            input.ReadMessage(subBuilder);
            Yaml = subBuilder;
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Literal text log, typically requires regex or split mechanism to filter meaningful info.
  /// </summary>
  public sealed partial class TextLog : pb::IMessage<TextLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TextLog> _parser = new pb::MessageParser<TextLog>(() => new TextLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TextLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextLog(TextLog other) : this() {
      text_ = other.text_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TextLog Clone() {
      return new TextLog(this);
    }

    /// <summary>Field number for the "text" field.</summary>
    public const int TextFieldNumber = 1;
    private string text_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Text {
      get { return text_; }
      set {
        text_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TextLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TextLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Text != other.Text) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Text.Length != 0) hash ^= Text.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Text.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Text);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Text.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Text);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TextLog other) {
      if (other == null) {
        return;
      }
      if (other.Text.Length != 0) {
        Text = other.Text;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Text = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// JSON formatted log. The json field represents the string that could be formatted as a JSON object.
  /// </summary>
  public sealed partial class JSONLog : pb::IMessage<JSONLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<JSONLog> _parser = new pb::MessageParser<JSONLog>(() => new JSONLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<JSONLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JSONLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JSONLog(JSONLog other) : this() {
      json_ = other.json_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public JSONLog Clone() {
      return new JSONLog(this);
    }

    /// <summary>Field number for the "json" field.</summary>
    public const int JsonFieldNumber = 1;
    private string json_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as JSONLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(JSONLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Json != other.Json) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Json.Length != 0) hash ^= Json.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Json.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Json);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(JSONLog other) {
      if (other == null) {
        return;
      }
      if (other.Json.Length != 0) {
        Json = other.Json;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Json = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// YAML formatted log. The yaml field represents the string that could be formatted as a YAML map.
  /// </summary>
  public sealed partial class YAMLLog : pb::IMessage<YAMLLog>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<YAMLLog> _parser = new pb::MessageParser<YAMLLog>(() => new YAMLLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<YAMLLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAMLLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAMLLog(YAMLLog other) : this() {
      yaml_ = other.yaml_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public YAMLLog Clone() {
      return new YAMLLog(this);
    }

    /// <summary>Field number for the "yaml" field.</summary>
    public const int YamlFieldNumber = 1;
    private string yaml_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Yaml {
      get { return yaml_; }
      set {
        yaml_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as YAMLLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(YAMLLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Yaml != other.Yaml) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Yaml.Length != 0) hash ^= Yaml.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Yaml.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Yaml);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Yaml.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Yaml);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Yaml.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Yaml);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(YAMLLog other) {
      if (other == null) {
        return;
      }
      if (other.Yaml.Length != 0) {
        Yaml = other.Yaml;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Yaml = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Yaml = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  /// <summary>
  /// Logs with trace context, represent agent system has injects context(IDs) into log text.
  /// </summary>
  public sealed partial class TraceContext : pb::IMessage<TraceContext>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TraceContext> _parser = new pb::MessageParser<TraceContext>(() => new TraceContext());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceContext> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext(TraceContext other) : this() {
      traceId_ = other.traceId_;
      traceSegmentId_ = other.traceSegmentId_;
      spanId_ = other.spanId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceContext Clone() {
      return new TraceContext(this);
    }

    /// <summary>Field number for the "traceId" field.</summary>
    public const int TraceIdFieldNumber = 1;
    private string traceId_ = "";
    /// <summary>
    /// [Optional] A string id represents the whole trace.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceId {
      get { return traceId_; }
      set {
        traceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "traceSegmentId" field.</summary>
    public const int TraceSegmentIdFieldNumber = 2;
    private string traceSegmentId_ = "";
    /// <summary>
    /// [Optional] A unique id represents this segment. Other segments could use this id to reference as a child segment.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TraceSegmentId {
      get { return traceSegmentId_; }
      set {
        traceSegmentId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "spanId" field.</summary>
    public const int SpanIdFieldNumber = 3;
    private int spanId_;
    /// <summary>
    /// [Optional] The number id of the span. Should be unique in the whole segment.
    /// Starting at 0.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int SpanId {
      get { return spanId_; }
      set {
        spanId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceContext);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceContext other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TraceId != other.TraceId) return false;
      if (TraceSegmentId != other.TraceSegmentId) return false;
      if (SpanId != other.SpanId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TraceId.Length != 0) hash ^= TraceId.GetHashCode();
      if (TraceSegmentId.Length != 0) hash ^= TraceSegmentId.GetHashCode();
      if (SpanId != 0) hash ^= SpanId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceSegmentId);
      }
      if (SpanId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (TraceId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(TraceSegmentId);
      }
      if (SpanId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SpanId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TraceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceId);
      }
      if (TraceSegmentId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TraceSegmentId);
      }
      if (SpanId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SpanId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceContext other) {
      if (other == null) {
        return;
      }
      if (other.TraceId.Length != 0) {
        TraceId = other.TraceId;
      }
      if (other.TraceSegmentId.Length != 0) {
        TraceSegmentId = other.TraceSegmentId;
      }
      if (other.SpanId != 0) {
        SpanId = other.SpanId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 24: {
            SpanId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            TraceId = input.ReadString();
            break;
          }
          case 18: {
            TraceSegmentId = input.ReadString();
            break;
          }
          case 24: {
            SpanId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  public sealed partial class LogTags : pb::IMessage<LogTags>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<LogTags> _parser = new pb::MessageParser<LogTags>(() => new LogTags());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LogTags> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::SkyWalking.NetworkProtocol.V3.LoggingReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTags() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTags(LogTags other) : this() {
      data_ = other.data_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LogTags Clone() {
      return new LogTags(this);
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair.Parser);
    private readonly pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> data_ = new pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair>();
    /// <summary>
    /// String key, String value pair.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::SkyWalking.NetworkProtocol.V3.KeyStringValuePair> Data {
      get { return data_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LogTags);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LogTags other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!data_.Equals(other.data_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= data_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      data_.WriteTo(output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      data_.WriteTo(ref output, _repeated_data_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += data_.CalculateSize(_repeated_data_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LogTags other) {
      if (other == null) {
        return;
      }
      data_.Add(other.data_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            data_.AddEntriesFrom(ref input, _repeated_data_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
